
F407_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fd4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08007168  08007168  00017168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007574  08007574  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007574  08007574  00017574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800757c  0800757c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800757c  0800757c  0001757c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007580  08007580  00017580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  200001dc  08007760  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08007760  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae18  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b94  00000000  00000000  0002b024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0002cbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c8  00000000  00000000  0002d430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000031fb  00000000  00000000  0002dbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b503  00000000  00000000  00030df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3cf4  00000000  00000000  0003c2f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fffea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003258  00000000  00000000  00100040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800714c 	.word	0x0800714c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800714c 	.word	0x0800714c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <_Read>:
static uint16_t _Read(INA219_t *sensor, uint8_t registerAddr);
static void _Write(INA219_t *sensor, uint8_t registerAddr, uint16_t data);

/* Private Functions */
static uint16_t _Read(INA219_t *sensor, uint8_t registerAddr)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af02      	add	r7, sp, #8
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2];
	HAL_I2C_Mem_Read_IT(sensor->i2c, (sensor->address << 1), registerAddr, 1, data, 2);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6818      	ldr	r0, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	791b      	ldrb	r3, [r3, #4]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	b299      	uxth	r1, r3
 8000eba:	78fb      	ldrb	r3, [r7, #3]
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	9301      	str	r3, [sp, #4]
 8000ec2:	f107 030c 	add.w	r3, r7, #12
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	f001 f8d3 	bl	8002074 <HAL_I2C_Mem_Read_IT>
	return (uint16_t)((data[0] << 8) | data[1]);
 8000ece:	7b3b      	ldrb	r3, [r7, #12]
 8000ed0:	021b      	lsls	r3, r3, #8
 8000ed2:	b21a      	sxth	r2, r3
 8000ed4:	7b7b      	ldrb	r3, [r7, #13]
 8000ed6:	b21b      	sxth	r3, r3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b21b      	sxth	r3, r3
 8000edc:	b29b      	uxth	r3, r3
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <_Write>:

static void _Write(INA219_t *sensor, uint8_t registerAddr, uint16_t data)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af02      	add	r7, sp, #8
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	70fb      	strb	r3, [r7, #3]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[2];
	buffer[0] = (data >> 8) & 0xFF;
 8000ef6:	883b      	ldrh	r3, [r7, #0]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	733b      	strb	r3, [r7, #12]
	buffer[1] = (data >> 0) & 0xFF;
 8000f00:	883b      	ldrh	r3, [r7, #0]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write_IT(sensor->i2c, (sensor->address << 1), registerAddr, 1, buffer, 2);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6818      	ldr	r0, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	791b      	ldrb	r3, [r3, #4]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	b299      	uxth	r1, r3
 8000f14:	78fb      	ldrb	r3, [r7, #3]
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	2302      	movs	r3, #2
 8000f1a:	9301      	str	r3, [sp, #4]
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	2301      	movs	r3, #1
 8000f24:	f000 fff4 	bl	8001f10 <HAL_I2C_Mem_Write_IT>
}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <INA219_Init>:

	return INA219_OK;
}
#else
INA219_Status_t INA219_Init(INA219_t *sensor, I2C_HandleTypeDef *hi2c, uint8_t deviceAddr)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	71fb      	strb	r3, [r7, #7]
#ifdef INA219_32V_2A
	sensor->currentCoeff = 10.0f;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <INA219_Init+0x5c>)
 8000f42:	611a      	str	r2, [r3, #16]
	sensor->powerCoeff = 2.0f;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f4a:	615a      	str	r2, [r3, #20]
	if (HAL_I2C_IsDeviceReady(sensor->i2c, (sensor->address), 3, 2) != HAL_OK)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6818      	ldr	r0, [r3, #0]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	791b      	ldrb	r3, [r3, #4]
 8000f54:	b299      	uxth	r1, r3
 8000f56:	2302      	movs	r3, #2
 8000f58:	2203      	movs	r2, #3
 8000f5a:	f001 f949 	bl	80021f0 <HAL_I2C_IsDeviceReady>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <INA219_Init+0x38>
		return INA219_ERROR;
 8000f64:	2300      	movs	r3, #0
 8000f66:	e00d      	b.n	8000f84 <INA219_Init+0x54>
	INA219_Reset(sensor);
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f000 f82e 	bl	8000fca <INA219_Reset>
	INA219_SetCalibration(sensor, 0x1000);
 8000f6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f72:	68f8      	ldr	r0, [r7, #12]
 8000f74:	f000 f837 	bl	8000fe6 <INA219_SetCalibration>
	INA219_SetConfiguration(sensor, (FSR32V | GAIN_8 | BADC_12bit | SADC_12bit | MODE_SHUNT_BUS_CONTINUOUS));
 8000f78:	f643 119f 	movw	r1, #14751	; 0x399f
 8000f7c:	68f8      	ldr	r0, [r7, #12]
 8000f7e:	f000 f842 	bl	8001006 <INA219_SetConfiguration>
	return INA219_OK;
 8000f82:	2301      	movs	r3, #1
	INA219_Reset(sensor);
	INA219_SetCalibration(sensor, 0x2000);
	INA219_SetConfiguration(sensor, (FSR16V | GAIN_1 | BADC_12bit | SADC_12bit | MODE_SHUNT_BUS_CONTINUOUS));
	return INA219_OK;
#endif /* INA219_16V_400mA */
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	41200000 	.word	0x41200000

08000f90 <INA219_GetCurrent>:
	uint16_t data = _Read(sensor, SHUNT_VOLTAGE);
	sensor->shuntVoltage = (uint16_t)(data * 0.01f);
}

void INA219_GetCurrent(INA219_t *sensor)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	sensor->current = (int16_t)(_Read(sensor, CURRENT) / sensor->currentCoeff);
 8000f98:	2104      	movs	r1, #4
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ff80 	bl	8000ea0 <_Read>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	ee07 3a90 	vmov	s15, r3
 8000fa6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	ed93 7a04 	vldr	s14, [r3, #16]
 8000fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fb8:	ee17 3a90 	vmov	r3, s15
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	819a      	strh	r2, [r3, #12]
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <INA219_Reset>:
{
	sensor->power = (int16_t)(_Read(sensor, POWER) * sensor->powerCoeff);
}

void INA219_Reset(INA219_t *sensor)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
	_Write(sensor, CONFIGURATION, 0x8000);
 8000fd2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff84 	bl	8000ee6 <_Write>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <INA219_SetCalibration>:

void INA219_SetCalibration(INA219_t *sensor, uint16_t calibration)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	807b      	strh	r3, [r7, #2]
	_Write(sensor, CALIBRATION, calibration);
 8000ff2:	887b      	ldrh	r3, [r7, #2]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	2105      	movs	r1, #5
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ff74 	bl	8000ee6 <_Write>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <INA219_SetConfiguration>:

void INA219_SetConfiguration(INA219_t *sensor, uint16_t config)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	460b      	mov	r3, r1
 8001010:	807b      	strh	r3, [r7, #2]
	_Write(sensor, CONFIGURATION, config);
 8001012:	887b      	ldrh	r3, [r7, #2]
 8001014:	461a      	mov	r2, r3
 8001016:	2100      	movs	r1, #0
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff64 	bl	8000ee6 <_Write>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102c:	f000 fab8 	bl	80015a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001030:	f000 f81e 	bl	8001070 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001034:	f000 f8b4 	bl	80011a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001038:	f000 f884 	bl	8001144 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  INA219_Init(&sensor, &hi2c1, INA219_ADDR);
 800103c:	2240      	movs	r2, #64	; 0x40
 800103e:	4909      	ldr	r1, [pc, #36]	; (8001064 <main+0x3c>)
 8001040:	4809      	ldr	r0, [pc, #36]	; (8001068 <main+0x40>)
 8001042:	f7ff ff75 	bl	8000f30 <INA219_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  INA219_GetCurrent(&sensor);
 8001046:	4808      	ldr	r0, [pc, #32]	; (8001068 <main+0x40>)
 8001048:	f7ff ffa2 	bl	8000f90 <INA219_GetCurrent>
	  printf("Current: %d\n", sensor.current);
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <main+0x40>)
 800104e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <main+0x44>)
 8001056:	f003 fffb 	bl	8005050 <iprintf>
	  HAL_Delay(1000);
 800105a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800105e:	f000 fb11 	bl	8001684 <HAL_Delay>
	  INA219_GetCurrent(&sensor);
 8001062:	e7f0      	b.n	8001046 <main+0x1e>
 8001064:	20000204 	.word	0x20000204
 8001068:	20000258 	.word	0x20000258
 800106c:	08007168 	.word	0x08007168

08001070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b094      	sub	sp, #80	; 0x50
 8001074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001076:	f107 0320 	add.w	r3, r7, #32
 800107a:	2230      	movs	r2, #48	; 0x30
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f003 fb74 	bl	800476c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	4b28      	ldr	r3, [pc, #160]	; (800113c <SystemClock_Config+0xcc>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	4a27      	ldr	r2, [pc, #156]	; (800113c <SystemClock_Config+0xcc>)
 800109e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a2:	6413      	str	r3, [r2, #64]	; 0x40
 80010a4:	4b25      	ldr	r3, [pc, #148]	; (800113c <SystemClock_Config+0xcc>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	4b22      	ldr	r3, [pc, #136]	; (8001140 <SystemClock_Config+0xd0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a21      	ldr	r2, [pc, #132]	; (8001140 <SystemClock_Config+0xd0>)
 80010ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <SystemClock_Config+0xd0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010cc:	2301      	movs	r3, #1
 80010ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d6:	2302      	movs	r3, #2
 80010d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010e0:	2304      	movs	r3, #4
 80010e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010e4:	23a8      	movs	r3, #168	; 0xa8
 80010e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010ec:	2307      	movs	r3, #7
 80010ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f0:	f107 0320 	add.w	r3, r7, #32
 80010f4:	4618      	mov	r0, r3
 80010f6:	f002 feb7 	bl	8003e68 <HAL_RCC_OscConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001100:	f000 f884 	bl	800120c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001104:	230f      	movs	r3, #15
 8001106:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001108:	2302      	movs	r3, #2
 800110a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001110:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001114:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2105      	movs	r1, #5
 8001122:	4618      	mov	r0, r3
 8001124:	f003 f910 	bl	8004348 <HAL_RCC_ClockConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800112e:	f000 f86d 	bl	800120c <Error_Handler>
  }
}
 8001132:	bf00      	nop
 8001134:	3750      	adds	r7, #80	; 0x50
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40007000 	.word	0x40007000

08001144 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <MX_I2C1_Init+0x50>)
 800114a:	4a13      	ldr	r2, [pc, #76]	; (8001198 <MX_I2C1_Init+0x54>)
 800114c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_I2C1_Init+0x50>)
 8001150:	4a12      	ldr	r2, [pc, #72]	; (800119c <MX_I2C1_Init+0x58>)
 8001152:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_I2C1_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_I2C1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_I2C1_Init+0x50>)
 8001162:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001166:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <MX_I2C1_Init+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_I2C1_Init+0x50>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <MX_I2C1_Init+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_I2C1_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <MX_I2C1_Init+0x50>)
 8001182:	f000 fd81 	bl	8001c88 <HAL_I2C_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800118c:	f000 f83e 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000204 	.word	0x20000204
 8001198:	40005400 	.word	0x40005400
 800119c:	00061a80 	.word	0x00061a80

080011a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <MX_GPIO_Init+0x68>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a16      	ldr	r2, [pc, #88]	; (8001208 <MX_GPIO_Init+0x68>)
 80011b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_GPIO_Init+0x68>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <MX_GPIO_Init+0x68>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <MX_GPIO_Init+0x68>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <MX_GPIO_Init+0x68>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_GPIO_Init+0x68>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <MX_GPIO_Init+0x68>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_GPIO_Init+0x68>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001210:	b672      	cpsid	i
}
 8001212:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001214:	e7fe      	b.n	8001214 <Error_Handler+0x8>
	...

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <HAL_MspInit+0x4c>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	4a0f      	ldr	r2, [pc, #60]	; (8001264 <HAL_MspInit+0x4c>)
 8001228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122c:	6453      	str	r3, [r2, #68]	; 0x44
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <HAL_MspInit+0x4c>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	603b      	str	r3, [r7, #0]
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_MspInit+0x4c>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_MspInit+0x4c>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_MspInit+0x4c>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800

08001268 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a21      	ldr	r2, [pc, #132]	; (800130c <HAL_I2C_MspInit+0xa4>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d13b      	bne.n	8001302 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	4b20      	ldr	r3, [pc, #128]	; (8001310 <HAL_I2C_MspInit+0xa8>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a1f      	ldr	r2, [pc, #124]	; (8001310 <HAL_I2C_MspInit+0xa8>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <HAL_I2C_MspInit+0xa8>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012a6:	23c0      	movs	r3, #192	; 0xc0
 80012a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012aa:	2312      	movs	r3, #18
 80012ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b2:	2303      	movs	r3, #3
 80012b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012b6:	2304      	movs	r3, #4
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4814      	ldr	r0, [pc, #80]	; (8001314 <HAL_I2C_MspInit+0xac>)
 80012c2:	f000 fb45 	bl	8001950 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <HAL_I2C_MspInit+0xa8>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	4a10      	ldr	r2, [pc, #64]	; (8001310 <HAL_I2C_MspInit+0xa8>)
 80012d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012d4:	6413      	str	r3, [r2, #64]	; 0x40
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <HAL_I2C_MspInit+0xa8>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	201f      	movs	r0, #31
 80012e8:	f000 facb 	bl	8001882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80012ec:	201f      	movs	r0, #31
 80012ee:	f000 fae4 	bl	80018ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	2020      	movs	r0, #32
 80012f8:	f000 fac3 	bl	8001882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80012fc:	2020      	movs	r0, #32
 80012fe:	f000 fadc 	bl	80018ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	; 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40005400 	.word	0x40005400
 8001310:	40023800 	.word	0x40023800
 8001314:	40020400 	.word	0x40020400

08001318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800131c:	e7fe      	b.n	800131c <NMI_Handler+0x4>

0800131e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <HardFault_Handler+0x4>

08001324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <MemManage_Handler+0x4>

0800132a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132e:	e7fe      	b.n	800132e <BusFault_Handler+0x4>

08001330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <UsageFault_Handler+0x4>

08001336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001364:	f000 f96e 	bl	8001644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}

0800136c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <I2C1_EV_IRQHandler+0x10>)
 8001372:	f001 f86b 	bl	800244c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000204 	.word	0x20000204

08001380 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <I2C1_ER_IRQHandler+0x10>)
 8001386:	f001 f9ce 	bl	8002726 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000204 	.word	0x20000204

08001394 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
	return 1;
 8001398:	2301      	movs	r3, #1
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <_kill>:

int _kill(int pid, int sig)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013ae:	f003 f9b3 	bl	8004718 <__errno>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2216      	movs	r2, #22
 80013b6:	601a      	str	r2, [r3, #0]
	return -1;
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <_exit>:

void _exit (int status)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff ffe7 	bl	80013a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80013d6:	e7fe      	b.n	80013d6 <_exit+0x12>

080013d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	e00a      	b.n	8001400 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013ea:	f3af 8000 	nop.w
 80013ee:	4601      	mov	r1, r0
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	60ba      	str	r2, [r7, #8]
 80013f6:	b2ca      	uxtb	r2, r1
 80013f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	3301      	adds	r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	429a      	cmp	r2, r3
 8001406:	dbf0      	blt.n	80013ea <_read+0x12>
	}

return len;
 8001408:	687b      	ldr	r3, [r7, #4]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b086      	sub	sp, #24
 8001416:	af00      	add	r7, sp, #0
 8001418:	60f8      	str	r0, [r7, #12]
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	e009      	b.n	8001438 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	1c5a      	adds	r2, r3, #1
 8001428:	60ba      	str	r2, [r7, #8]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	3301      	adds	r3, #1
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	429a      	cmp	r2, r3
 800143e:	dbf1      	blt.n	8001424 <_write+0x12>
	}
	return len;
 8001440:	687b      	ldr	r3, [r7, #4]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <_close>:

int _close(int file)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
	return -1;
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001472:	605a      	str	r2, [r3, #4]
	return 0;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <_isatty>:

int _isatty(int file)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
	return 1;
 800148a:	2301      	movs	r3, #1
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
	return 0;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014bc:	4a14      	ldr	r2, [pc, #80]	; (8001510 <_sbrk+0x5c>)
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <_sbrk+0x60>)
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <_sbrk+0x64>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <_sbrk+0x68>)
 80014d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d207      	bcs.n	80014f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e4:	f003 f918 	bl	8004718 <__errno>
 80014e8:	4603      	mov	r3, r0
 80014ea:	220c      	movs	r2, #12
 80014ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
 80014f2:	e009      	b.n	8001508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	4a05      	ldr	r2, [pc, #20]	; (8001518 <_sbrk+0x64>)
 8001504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001506:	68fb      	ldr	r3, [r7, #12]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20020000 	.word	0x20020000
 8001514:	00000400 	.word	0x00000400
 8001518:	200001f8 	.word	0x200001f8
 800151c:	20000288 	.word	0x20000288

08001520 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <SystemInit+0x28>)
 8001526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152a:	4a07      	ldr	r2, [pc, #28]	; (8001548 <SystemInit+0x28>)
 800152c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <SystemInit+0x28>)
 8001536:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800153a:	609a      	str	r2, [r3, #8]
#endif
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800154c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001584 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001550:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001552:	e003      	b.n	800155c <LoopCopyDataInit>

08001554 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001556:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001558:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800155a:	3104      	adds	r1, #4

0800155c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800155c:	480b      	ldr	r0, [pc, #44]	; (800158c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001560:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001562:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001564:	d3f6      	bcc.n	8001554 <CopyDataInit>
  ldr  r2, =_sbss
 8001566:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001568:	e002      	b.n	8001570 <LoopFillZerobss>

0800156a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800156a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800156c:	f842 3b04 	str.w	r3, [r2], #4

08001570 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001572:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001574:	d3f9      	bcc.n	800156a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001576:	f7ff ffd3 	bl	8001520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800157a:	f003 f8d3 	bl	8004724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800157e:	f7ff fd53 	bl	8001028 <main>
  bx  lr    
 8001582:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001584:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001588:	08007584 	.word	0x08007584
  ldr  r0, =_sdata
 800158c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001590:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001594:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001598:	20000284 	.word	0x20000284

0800159c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800159c:	e7fe      	b.n	800159c <ADC_IRQHandler>
	...

080015a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <HAL_Init+0x40>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0d      	ldr	r2, [pc, #52]	; (80015e0 <HAL_Init+0x40>)
 80015aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_Init+0x40>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <HAL_Init+0x40>)
 80015b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_Init+0x40>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <HAL_Init+0x40>)
 80015c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c8:	2003      	movs	r0, #3
 80015ca:	f000 f94f 	bl	800186c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ce:	2000      	movs	r0, #0
 80015d0:	f000 f808 	bl	80015e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d4:	f7ff fe20 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023c00 	.word	0x40023c00

080015e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_InitTick+0x54>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_InitTick+0x58>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f967 	bl	80018d6 <HAL_SYSTICK_Config>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e00e      	b.n	8001630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d80a      	bhi.n	800162e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001618:	2200      	movs	r2, #0
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f000 f92f 	bl	8001882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001624:	4a06      	ldr	r2, [pc, #24]	; (8001640 <HAL_InitTick+0x5c>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000000 	.word	0x20000000
 800163c:	20000008 	.word	0x20000008
 8001640:	20000004 	.word	0x20000004

08001644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_IncTick+0x20>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_IncTick+0x24>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4413      	add	r3, r2
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_IncTick+0x24>)
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20000008 	.word	0x20000008
 8001668:	20000270 	.word	0x20000270

0800166c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return uwTick;
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <HAL_GetTick+0x14>)
 8001672:	681b      	ldr	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000270 	.word	0x20000270

08001684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800168c:	f7ff ffee 	bl	800166c <HAL_GetTick>
 8001690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169c:	d005      	beq.n	80016aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_Delay+0x44>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4413      	add	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016aa:	bf00      	nop
 80016ac:	f7ff ffde 	bl	800166c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d8f7      	bhi.n	80016ac <HAL_Delay+0x28>
  {
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000008 	.word	0x20000008

080016cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e8:	4013      	ands	r3, r2
 80016ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fe:	4a04      	ldr	r2, [pc, #16]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	60d3      	str	r3, [r2, #12]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <__NVIC_GetPriorityGrouping+0x18>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	f003 0307 	and.w	r3, r3, #7
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	2b00      	cmp	r3, #0
 8001740:	db0b      	blt.n	800175a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	f003 021f 	and.w	r2, r3, #31
 8001748:	4907      	ldr	r1, [pc, #28]	; (8001768 <__NVIC_EnableIRQ+0x38>)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	095b      	lsrs	r3, r3, #5
 8001750:	2001      	movs	r0, #1
 8001752:	fa00 f202 	lsl.w	r2, r0, r2
 8001756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000e100 	.word	0xe000e100

0800176c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	6039      	str	r1, [r7, #0]
 8001776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177c:	2b00      	cmp	r3, #0
 800177e:	db0a      	blt.n	8001796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	b2da      	uxtb	r2, r3
 8001784:	490c      	ldr	r1, [pc, #48]	; (80017b8 <__NVIC_SetPriority+0x4c>)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	0112      	lsls	r2, r2, #4
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	440b      	add	r3, r1
 8001790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001794:	e00a      	b.n	80017ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4908      	ldr	r1, [pc, #32]	; (80017bc <__NVIC_SetPriority+0x50>)
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	3b04      	subs	r3, #4
 80017a4:	0112      	lsls	r2, r2, #4
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	440b      	add	r3, r1
 80017aa:	761a      	strb	r2, [r3, #24]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000e100 	.word	0xe000e100
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	; 0x24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f1c3 0307 	rsb	r3, r3, #7
 80017da:	2b04      	cmp	r3, #4
 80017dc:	bf28      	it	cs
 80017de:	2304      	movcs	r3, #4
 80017e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3304      	adds	r3, #4
 80017e6:	2b06      	cmp	r3, #6
 80017e8:	d902      	bls.n	80017f0 <NVIC_EncodePriority+0x30>
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3b03      	subs	r3, #3
 80017ee:	e000      	b.n	80017f2 <NVIC_EncodePriority+0x32>
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	f04f 32ff 	mov.w	r2, #4294967295
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43da      	mvns	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	401a      	ands	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001808:	f04f 31ff 	mov.w	r1, #4294967295
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	43d9      	mvns	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	4313      	orrs	r3, r2
         );
}
 800181a:	4618      	mov	r0, r3
 800181c:	3724      	adds	r7, #36	; 0x24
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001838:	d301      	bcc.n	800183e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183a:	2301      	movs	r3, #1
 800183c:	e00f      	b.n	800185e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183e:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <SysTick_Config+0x40>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001846:	210f      	movs	r1, #15
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f7ff ff8e 	bl	800176c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <SysTick_Config+0x40>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001856:	4b04      	ldr	r3, [pc, #16]	; (8001868 <SysTick_Config+0x40>)
 8001858:	2207      	movs	r2, #7
 800185a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	e000e010 	.word	0xe000e010

0800186c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ff29 	bl	80016cc <__NVIC_SetPriorityGrouping>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
 800188e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001894:	f7ff ff3e 	bl	8001714 <__NVIC_GetPriorityGrouping>
 8001898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	6978      	ldr	r0, [r7, #20]
 80018a0:	f7ff ff8e 	bl	80017c0 <NVIC_EncodePriority>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff5d 	bl	800176c <__NVIC_SetPriority>
}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff31 	bl	8001730 <__NVIC_EnableIRQ>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ffa2 	bl	8001828 <SysTick_Config>
 80018e4:	4603      	mov	r3, r0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d004      	beq.n	800190c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2280      	movs	r2, #128	; 0x80
 8001906:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e00c      	b.n	8001926 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2205      	movs	r2, #5
 8001910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0201 	bic.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001940:	b2db      	uxtb	r3, r3
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	; 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	e16b      	b.n	8001c44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800196c:	2201      	movs	r2, #1
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	429a      	cmp	r2, r3
 8001986:	f040 815a 	bne.w	8001c3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d00b      	beq.n	80019aa <HAL_GPIO_Init+0x5a>
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b02      	cmp	r3, #2
 8001998:	d007      	beq.n	80019aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800199e:	2b11      	cmp	r3, #17
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b12      	cmp	r3, #18
 80019a8:	d130      	bne.n	8001a0c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	2203      	movs	r2, #3
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019e0:	2201      	movs	r2, #1
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f003 0201 	and.w	r2, r3, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0xfc>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b12      	cmp	r3, #18
 8001a4a:	d123      	bne.n	8001a94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	08da      	lsrs	r2, r3, #3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3208      	adds	r2, #8
 8001a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	220f      	movs	r2, #15
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	08da      	lsrs	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3208      	adds	r2, #8
 8001a8e:	69b9      	ldr	r1, [r7, #24]
 8001a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0203 	and.w	r2, r3, #3
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 80b4 	beq.w	8001c3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b60      	ldr	r3, [pc, #384]	; (8001c5c <HAL_GPIO_Init+0x30c>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	4a5f      	ldr	r2, [pc, #380]	; (8001c5c <HAL_GPIO_Init+0x30c>)
 8001ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae6:	4b5d      	ldr	r3, [pc, #372]	; (8001c5c <HAL_GPIO_Init+0x30c>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001af2:	4a5b      	ldr	r2, [pc, #364]	; (8001c60 <HAL_GPIO_Init+0x310>)
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	089b      	lsrs	r3, r3, #2
 8001af8:	3302      	adds	r3, #2
 8001afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	220f      	movs	r2, #15
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a52      	ldr	r2, [pc, #328]	; (8001c64 <HAL_GPIO_Init+0x314>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d02b      	beq.n	8001b76 <HAL_GPIO_Init+0x226>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a51      	ldr	r2, [pc, #324]	; (8001c68 <HAL_GPIO_Init+0x318>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d025      	beq.n	8001b72 <HAL_GPIO_Init+0x222>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a50      	ldr	r2, [pc, #320]	; (8001c6c <HAL_GPIO_Init+0x31c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d01f      	beq.n	8001b6e <HAL_GPIO_Init+0x21e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a4f      	ldr	r2, [pc, #316]	; (8001c70 <HAL_GPIO_Init+0x320>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d019      	beq.n	8001b6a <HAL_GPIO_Init+0x21a>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a4e      	ldr	r2, [pc, #312]	; (8001c74 <HAL_GPIO_Init+0x324>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d013      	beq.n	8001b66 <HAL_GPIO_Init+0x216>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a4d      	ldr	r2, [pc, #308]	; (8001c78 <HAL_GPIO_Init+0x328>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d00d      	beq.n	8001b62 <HAL_GPIO_Init+0x212>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a4c      	ldr	r2, [pc, #304]	; (8001c7c <HAL_GPIO_Init+0x32c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d007      	beq.n	8001b5e <HAL_GPIO_Init+0x20e>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a4b      	ldr	r2, [pc, #300]	; (8001c80 <HAL_GPIO_Init+0x330>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d101      	bne.n	8001b5a <HAL_GPIO_Init+0x20a>
 8001b56:	2307      	movs	r3, #7
 8001b58:	e00e      	b.n	8001b78 <HAL_GPIO_Init+0x228>
 8001b5a:	2308      	movs	r3, #8
 8001b5c:	e00c      	b.n	8001b78 <HAL_GPIO_Init+0x228>
 8001b5e:	2306      	movs	r3, #6
 8001b60:	e00a      	b.n	8001b78 <HAL_GPIO_Init+0x228>
 8001b62:	2305      	movs	r3, #5
 8001b64:	e008      	b.n	8001b78 <HAL_GPIO_Init+0x228>
 8001b66:	2304      	movs	r3, #4
 8001b68:	e006      	b.n	8001b78 <HAL_GPIO_Init+0x228>
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e004      	b.n	8001b78 <HAL_GPIO_Init+0x228>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e002      	b.n	8001b78 <HAL_GPIO_Init+0x228>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <HAL_GPIO_Init+0x228>
 8001b76:	2300      	movs	r3, #0
 8001b78:	69fa      	ldr	r2, [r7, #28]
 8001b7a:	f002 0203 	and.w	r2, r2, #3
 8001b7e:	0092      	lsls	r2, r2, #2
 8001b80:	4093      	lsls	r3, r2
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b88:	4935      	ldr	r1, [pc, #212]	; (8001c60 <HAL_GPIO_Init+0x310>)
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	089b      	lsrs	r3, r3, #2
 8001b8e:	3302      	adds	r3, #2
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b96:	4b3b      	ldr	r3, [pc, #236]	; (8001c84 <HAL_GPIO_Init+0x334>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bba:	4a32      	ldr	r2, [pc, #200]	; (8001c84 <HAL_GPIO_Init+0x334>)
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bc0:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <HAL_GPIO_Init+0x334>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001be4:	4a27      	ldr	r2, [pc, #156]	; (8001c84 <HAL_GPIO_Init+0x334>)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bea:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <HAL_GPIO_Init+0x334>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c0e:	4a1d      	ldr	r2, [pc, #116]	; (8001c84 <HAL_GPIO_Init+0x334>)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <HAL_GPIO_Init+0x334>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c38:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <HAL_GPIO_Init+0x334>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3301      	adds	r3, #1
 8001c42:	61fb      	str	r3, [r7, #28]
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	2b0f      	cmp	r3, #15
 8001c48:	f67f ae90 	bls.w	800196c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	bf00      	nop
 8001c50:	3724      	adds	r7, #36	; 0x24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40013800 	.word	0x40013800
 8001c64:	40020000 	.word	0x40020000
 8001c68:	40020400 	.word	0x40020400
 8001c6c:	40020800 	.word	0x40020800
 8001c70:	40020c00 	.word	0x40020c00
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40021400 	.word	0x40021400
 8001c7c:	40021800 	.word	0x40021800
 8001c80:	40021c00 	.word	0x40021c00
 8001c84:	40013c00 	.word	0x40013c00

08001c88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e12b      	b.n	8001ef2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d106      	bne.n	8001cb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff fada 	bl	8001268 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2224      	movs	r2, #36	; 0x24
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0201 	bic.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cec:	f002 fd00 	bl	80046f0 <HAL_RCC_GetPCLK1Freq>
 8001cf0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4a81      	ldr	r2, [pc, #516]	; (8001efc <HAL_I2C_Init+0x274>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d807      	bhi.n	8001d0c <HAL_I2C_Init+0x84>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4a80      	ldr	r2, [pc, #512]	; (8001f00 <HAL_I2C_Init+0x278>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	bf94      	ite	ls
 8001d04:	2301      	movls	r3, #1
 8001d06:	2300      	movhi	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	e006      	b.n	8001d1a <HAL_I2C_Init+0x92>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4a7d      	ldr	r2, [pc, #500]	; (8001f04 <HAL_I2C_Init+0x27c>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	bf94      	ite	ls
 8001d14:	2301      	movls	r3, #1
 8001d16:	2300      	movhi	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e0e7      	b.n	8001ef2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4a78      	ldr	r2, [pc, #480]	; (8001f08 <HAL_I2C_Init+0x280>)
 8001d26:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2a:	0c9b      	lsrs	r3, r3, #18
 8001d2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	4a6a      	ldr	r2, [pc, #424]	; (8001efc <HAL_I2C_Init+0x274>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d802      	bhi.n	8001d5c <HAL_I2C_Init+0xd4>
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	e009      	b.n	8001d70 <HAL_I2C_Init+0xe8>
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d62:	fb02 f303 	mul.w	r3, r2, r3
 8001d66:	4a69      	ldr	r2, [pc, #420]	; (8001f0c <HAL_I2C_Init+0x284>)
 8001d68:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6c:	099b      	lsrs	r3, r3, #6
 8001d6e:	3301      	adds	r3, #1
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	430b      	orrs	r3, r1
 8001d76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	495c      	ldr	r1, [pc, #368]	; (8001efc <HAL_I2C_Init+0x274>)
 8001d8c:	428b      	cmp	r3, r1
 8001d8e:	d819      	bhi.n	8001dc4 <HAL_I2C_Init+0x13c>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	1e59      	subs	r1, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d9e:	1c59      	adds	r1, r3, #1
 8001da0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001da4:	400b      	ands	r3, r1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00a      	beq.n	8001dc0 <HAL_I2C_Init+0x138>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1e59      	subs	r1, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001db8:	3301      	adds	r3, #1
 8001dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dbe:	e051      	b.n	8001e64 <HAL_I2C_Init+0x1dc>
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	e04f      	b.n	8001e64 <HAL_I2C_Init+0x1dc>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d111      	bne.n	8001df0 <HAL_I2C_Init+0x168>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1e58      	subs	r0, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	440b      	add	r3, r1
 8001dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dde:	3301      	adds	r3, #1
 8001de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf0c      	ite	eq
 8001de8:	2301      	moveq	r3, #1
 8001dea:	2300      	movne	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	e012      	b.n	8001e16 <HAL_I2C_Init+0x18e>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	1e58      	subs	r0, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	0099      	lsls	r1, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e06:	3301      	adds	r3, #1
 8001e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	bf0c      	ite	eq
 8001e10:	2301      	moveq	r3, #1
 8001e12:	2300      	movne	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_I2C_Init+0x196>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e022      	b.n	8001e64 <HAL_I2C_Init+0x1dc>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10e      	bne.n	8001e44 <HAL_I2C_Init+0x1bc>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1e58      	subs	r0, r3, #1
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6859      	ldr	r1, [r3, #4]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	440b      	add	r3, r1
 8001e34:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e38:	3301      	adds	r3, #1
 8001e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e42:	e00f      	b.n	8001e64 <HAL_I2C_Init+0x1dc>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1e58      	subs	r0, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6859      	ldr	r1, [r3, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	0099      	lsls	r1, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	6809      	ldr	r1, [r1, #0]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69da      	ldr	r2, [r3, #28]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6911      	ldr	r1, [r2, #16]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	68d2      	ldr	r2, [r2, #12]
 8001e9e:	4311      	orrs	r1, r2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695a      	ldr	r2, [r3, #20]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2220      	movs	r2, #32
 8001ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	000186a0 	.word	0x000186a0
 8001f00:	001e847f 	.word	0x001e847f
 8001f04:	003d08ff 	.word	0x003d08ff
 8001f08:	431bde83 	.word	0x431bde83
 8001f0c:	10624dd3 	.word	0x10624dd3

08001f10 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	4608      	mov	r0, r1
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4603      	mov	r3, r0
 8001f20:	817b      	strh	r3, [r7, #10]
 8001f22:	460b      	mov	r3, r1
 8001f24:	813b      	strh	r3, [r7, #8]
 8001f26:	4613      	mov	r3, r2
 8001f28:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b20      	cmp	r3, #32
 8001f38:	f040 808e 	bne.w	8002058 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001f3c:	4b4a      	ldr	r3, [pc, #296]	; (8002068 <HAL_I2C_Mem_Write_IT+0x158>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	08db      	lsrs	r3, r3, #3
 8001f42:	4a4a      	ldr	r2, [pc, #296]	; (800206c <HAL_I2C_Mem_Write_IT+0x15c>)
 8001f44:	fba2 2303 	umull	r2, r3, r2, r3
 8001f48:	0a1a      	lsrs	r2, r3, #8
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	009a      	lsls	r2, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d116      	bne.n	8001f90 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	f043 0220 	orr.w	r2, r3, #32
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e064      	b.n	800205a <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d0db      	beq.n	8001f56 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_I2C_Mem_Write_IT+0x9c>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e056      	b.n	800205a <HAL_I2C_Mem_Write_IT+0x14a>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d007      	beq.n	8001fd2 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0201 	orr.w	r2, r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fe0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2221      	movs	r2, #33	; 0x21
 8001fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2240      	movs	r2, #64	; 0x40
 8001fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a3a      	ldr	r2, [r7, #32]
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002002:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4a17      	ldr	r2, [pc, #92]	; (8002070 <HAL_I2C_Mem_Write_IT+0x160>)
 8002012:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002014:	897a      	ldrh	r2, [r7, #10]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800201a:	893a      	ldrh	r2, [r7, #8]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002020:	88fa      	ldrh	r2, [r7, #6]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800203a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002052:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002054:	2300      	movs	r3, #0
 8002056:	e000      	b.n	800205a <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002058:	2302      	movs	r3, #2
  }
}
 800205a:	4618      	mov	r0, r3
 800205c:	371c      	adds	r7, #28
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	20000000 	.word	0x20000000
 800206c:	14f8b589 	.word	0x14f8b589
 8002070:	ffff0000 	.word	0xffff0000

08002074 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002074:	b480      	push	{r7}
 8002076:	b087      	sub	sp, #28
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	4608      	mov	r0, r1
 800207e:	4611      	mov	r1, r2
 8002080:	461a      	mov	r2, r3
 8002082:	4603      	mov	r3, r0
 8002084:	817b      	strh	r3, [r7, #10]
 8002086:	460b      	mov	r3, r1
 8002088:	813b      	strh	r3, [r7, #8]
 800208a:	4613      	mov	r3, r2
 800208c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b20      	cmp	r3, #32
 800209c:	f040 809a 	bne.w	80021d4 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80020a0:	4b50      	ldr	r3, [pc, #320]	; (80021e4 <HAL_I2C_Mem_Read_IT+0x170>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	08db      	lsrs	r3, r3, #3
 80020a6:	4a50      	ldr	r2, [pc, #320]	; (80021e8 <HAL_I2C_Mem_Read_IT+0x174>)
 80020a8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ac:	0a1a      	lsrs	r2, r3, #8
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	009a      	lsls	r2, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	3b01      	subs	r3, #1
 80020be:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d116      	bne.n	80020f4 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2220      	movs	r2, #32
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f043 0220 	orr.w	r2, r3, #32
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e070      	b.n	80021d6 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d0db      	beq.n	80020ba <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_I2C_Mem_Read_IT+0x9c>
 800210c:	2302      	movs	r3, #2
 800210e:	e062      	b.n	80021d6 <HAL_I2C_Mem_Read_IT+0x162>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b01      	cmp	r3, #1
 8002124:	d007      	beq.n	8002136 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f042 0201 	orr.w	r2, r2, #1
 8002134:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002144:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2222      	movs	r2, #34	; 0x22
 800214a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2240      	movs	r2, #64	; 0x40
 8002152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6a3a      	ldr	r2, [r7, #32]
 8002160:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002166:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4a1d      	ldr	r2, [pc, #116]	; (80021ec <HAL_I2C_Mem_Read_IT+0x178>)
 8002176:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002178:	897a      	ldrh	r2, [r7, #10]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800217e:	893a      	ldrh	r2, [r7, #8]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002184:	88fa      	ldrh	r2, [r7, #6]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800219e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021ae:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d007      	beq.n	80021d0 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80021ce:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	e000      	b.n	80021d6 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 80021d4:	2302      	movs	r3, #2
  }
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	371c      	adds	r7, #28
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	20000000 	.word	0x20000000
 80021e8:	14f8b589 	.word	0x14f8b589
 80021ec:	ffff0000 	.word	0xffff0000

080021f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	; 0x28
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	460b      	mov	r3, r1
 80021fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002200:	f7ff fa34 	bl	800166c <HAL_GetTick>
 8002204:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002206:	2301      	movs	r3, #1
 8002208:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b20      	cmp	r3, #32
 8002214:	f040 8111 	bne.w	800243a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	2319      	movs	r3, #25
 800221e:	2201      	movs	r2, #1
 8002220:	4988      	ldr	r1, [pc, #544]	; (8002444 <HAL_I2C_IsDeviceReady+0x254>)
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f001 fd7a 	bl	8003d1c <I2C_WaitOnFlagUntilTimeout>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800222e:	2302      	movs	r3, #2
 8002230:	e104      	b.n	800243c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002238:	2b01      	cmp	r3, #1
 800223a:	d101      	bne.n	8002240 <HAL_I2C_IsDeviceReady+0x50>
 800223c:	2302      	movs	r3, #2
 800223e:	e0fd      	b.n	800243c <HAL_I2C_IsDeviceReady+0x24c>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b01      	cmp	r3, #1
 8002254:	d007      	beq.n	8002266 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0201 	orr.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002274:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2224      	movs	r2, #36	; 0x24
 800227a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4a70      	ldr	r2, [pc, #448]	; (8002448 <HAL_I2C_IsDeviceReady+0x258>)
 8002288:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002298:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f001 fd38 	bl	8003d1c <I2C_WaitOnFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00d      	beq.n	80022ce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022c0:	d103      	bne.n	80022ca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e0b6      	b.n	800243c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022ce:	897b      	ldrh	r3, [r7, #10]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022dc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80022de:	f7ff f9c5 	bl	800166c <HAL_GetTick>
 80022e2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	bf0c      	ite	eq
 80022f2:	2301      	moveq	r3, #1
 80022f4:	2300      	movne	r3, #0
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002308:	bf0c      	ite	eq
 800230a:	2301      	moveq	r3, #1
 800230c:	2300      	movne	r3, #0
 800230e:	b2db      	uxtb	r3, r3
 8002310:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002312:	e025      	b.n	8002360 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002314:	f7ff f9aa 	bl	800166c <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d302      	bcc.n	800232a <HAL_I2C_IsDeviceReady+0x13a>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d103      	bne.n	8002332 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	22a0      	movs	r2, #160	; 0xa0
 800232e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b02      	cmp	r3, #2
 800233e:	bf0c      	ite	eq
 8002340:	2301      	moveq	r3, #1
 8002342:	2300      	movne	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002356:	bf0c      	ite	eq
 8002358:	2301      	moveq	r3, #1
 800235a:	2300      	movne	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2ba0      	cmp	r3, #160	; 0xa0
 800236a:	d005      	beq.n	8002378 <HAL_I2C_IsDeviceReady+0x188>
 800236c:	7dfb      	ldrb	r3, [r7, #23]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d102      	bne.n	8002378 <HAL_I2C_IsDeviceReady+0x188>
 8002372:	7dbb      	ldrb	r3, [r7, #22]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0cd      	beq.n	8002314 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2220      	movs	r2, #32
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b02      	cmp	r3, #2
 800238c:	d129      	bne.n	80023e2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800239e:	2300      	movs	r3, #0
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	2319      	movs	r3, #25
 80023ba:	2201      	movs	r2, #1
 80023bc:	4921      	ldr	r1, [pc, #132]	; (8002444 <HAL_I2C_IsDeviceReady+0x254>)
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f001 fcac 	bl	8003d1c <I2C_WaitOnFlagUntilTimeout>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e036      	b.n	800243c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2220      	movs	r2, #32
 80023d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	e02c      	b.n	800243c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023fa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	2319      	movs	r3, #25
 8002402:	2201      	movs	r2, #1
 8002404:	490f      	ldr	r1, [pc, #60]	; (8002444 <HAL_I2C_IsDeviceReady+0x254>)
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f001 fc88 	bl	8003d1c <I2C_WaitOnFlagUntilTimeout>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e012      	b.n	800243c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	3301      	adds	r3, #1
 800241a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	429a      	cmp	r2, r3
 8002422:	f4ff af32 	bcc.w	800228a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2220      	movs	r2, #32
 800242a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800243a:	2302      	movs	r3, #2
  }
}
 800243c:	4618      	mov	r0, r3
 800243e:	3720      	adds	r7, #32
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	00100002 	.word	0x00100002
 8002448:	ffff0000 	.word	0xffff0000

0800244c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002464:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800246c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002474:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002476:	7bfb      	ldrb	r3, [r7, #15]
 8002478:	2b10      	cmp	r3, #16
 800247a:	d003      	beq.n	8002484 <HAL_I2C_EV_IRQHandler+0x38>
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	2b40      	cmp	r3, #64	; 0x40
 8002480:	f040 80bd 	bne.w	80025fe <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10d      	bne.n	80024ba <HAL_I2C_EV_IRQHandler+0x6e>
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80024a4:	d003      	beq.n	80024ae <HAL_I2C_EV_IRQHandler+0x62>
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80024ac:	d101      	bne.n	80024b2 <HAL_I2C_EV_IRQHandler+0x66>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_I2C_EV_IRQHandler+0x68>
 80024b2:	2300      	movs	r3, #0
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	f000 812e 	beq.w	8002716 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00c      	beq.n	80024de <HAL_I2C_EV_IRQHandler+0x92>
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	0a5b      	lsrs	r3, r3, #9
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d006      	beq.n	80024de <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f001 fcad 	bl	8003e30 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fd62 	bl	8002fa0 <I2C_Master_SB>
 80024dc:	e08e      	b.n	80025fc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	08db      	lsrs	r3, r3, #3
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <HAL_I2C_EV_IRQHandler+0xb2>
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	0a5b      	lsrs	r3, r3, #9
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fdd8 	bl	80030ac <I2C_Master_ADD10>
 80024fc:	e07e      	b.n	80025fc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	085b      	lsrs	r3, r3, #1
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <HAL_I2C_EV_IRQHandler+0xd2>
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	0a5b      	lsrs	r3, r3, #9
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 fdf2 	bl	8003100 <I2C_Master_ADDR>
 800251c:	e06e      	b.n	80025fc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	089b      	lsrs	r3, r3, #2
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d037      	beq.n	800259a <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002538:	f000 80ef 	beq.w	800271a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	09db      	lsrs	r3, r3, #7
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00f      	beq.n	8002568 <HAL_I2C_EV_IRQHandler+0x11c>
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	0a9b      	lsrs	r3, r3, #10
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	d009      	beq.n	8002568 <HAL_I2C_EV_IRQHandler+0x11c>
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	089b      	lsrs	r3, r3, #2
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d103      	bne.n	8002568 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f9ef 	bl	8002944 <I2C_MasterTransmit_TXE>
 8002566:	e049      	b.n	80025fc <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	089b      	lsrs	r3, r3, #2
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 80d2 	beq.w	800271a <HAL_I2C_EV_IRQHandler+0x2ce>
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	0a5b      	lsrs	r3, r3, #9
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 80cb 	beq.w	800271a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	2b10      	cmp	r3, #16
 8002588:	d103      	bne.n	8002592 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 fa76 	bl	8002a7c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002590:	e0c3      	b.n	800271a <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 fada 	bl	8002b4c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002598:	e0bf      	b.n	800271a <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025a8:	f000 80b7 	beq.w	800271a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	099b      	lsrs	r3, r3, #6
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00f      	beq.n	80025d8 <HAL_I2C_EV_IRQHandler+0x18c>
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	0a9b      	lsrs	r3, r3, #10
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d009      	beq.n	80025d8 <HAL_I2C_EV_IRQHandler+0x18c>
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	089b      	lsrs	r3, r3, #2
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d103      	bne.n	80025d8 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 fb4a 	bl	8002c6a <I2C_MasterReceive_RXNE>
 80025d6:	e011      	b.n	80025fc <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	089b      	lsrs	r3, r3, #2
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 809a 	beq.w	800271a <HAL_I2C_EV_IRQHandler+0x2ce>
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	0a5b      	lsrs	r3, r3, #9
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 8093 	beq.w	800271a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 fbe9 	bl	8002dcc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025fa:	e08e      	b.n	800271a <HAL_I2C_EV_IRQHandler+0x2ce>
 80025fc:	e08d      	b.n	800271a <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d004      	beq.n	8002610 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	61fb      	str	r3, [r7, #28]
 800260e:	e007      	b.n	8002620 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	085b      	lsrs	r3, r3, #1
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d012      	beq.n	8002652 <HAL_I2C_EV_IRQHandler+0x206>
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	0a5b      	lsrs	r3, r3, #9
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00c      	beq.n	8002652 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002648:	69b9      	ldr	r1, [r7, #24]
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 ffa7 	bl	800359e <I2C_Slave_ADDR>
 8002650:	e066      	b.n	8002720 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d009      	beq.n	8002672 <HAL_I2C_EV_IRQHandler+0x226>
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	0a5b      	lsrs	r3, r3, #9
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 ffdc 	bl	8003628 <I2C_Slave_STOPF>
 8002670:	e056      	b.n	8002720 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002672:	7bbb      	ldrb	r3, [r7, #14]
 8002674:	2b21      	cmp	r3, #33	; 0x21
 8002676:	d002      	beq.n	800267e <HAL_I2C_EV_IRQHandler+0x232>
 8002678:	7bbb      	ldrb	r3, [r7, #14]
 800267a:	2b29      	cmp	r3, #41	; 0x29
 800267c:	d125      	bne.n	80026ca <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	09db      	lsrs	r3, r3, #7
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00f      	beq.n	80026aa <HAL_I2C_EV_IRQHandler+0x25e>
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	0a9b      	lsrs	r3, r3, #10
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <HAL_I2C_EV_IRQHandler+0x25e>
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	089b      	lsrs	r3, r3, #2
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d103      	bne.n	80026aa <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 febd 	bl	8003422 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026a8:	e039      	b.n	800271e <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	089b      	lsrs	r3, r3, #2
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d033      	beq.n	800271e <HAL_I2C_EV_IRQHandler+0x2d2>
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	0a5b      	lsrs	r3, r3, #9
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d02d      	beq.n	800271e <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 feea 	bl	800349c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026c8:	e029      	b.n	800271e <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	099b      	lsrs	r3, r3, #6
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00f      	beq.n	80026f6 <HAL_I2C_EV_IRQHandler+0x2aa>
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	0a9b      	lsrs	r3, r3, #10
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d009      	beq.n	80026f6 <HAL_I2C_EV_IRQHandler+0x2aa>
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	089b      	lsrs	r3, r3, #2
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d103      	bne.n	80026f6 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fef5 	bl	80034de <I2C_SlaveReceive_RXNE>
 80026f4:	e014      	b.n	8002720 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	089b      	lsrs	r3, r3, #2
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00e      	beq.n	8002720 <HAL_I2C_EV_IRQHandler+0x2d4>
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	0a5b      	lsrs	r3, r3, #9
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d008      	beq.n	8002720 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 ff23 	bl	800355a <I2C_SlaveReceive_BTF>
 8002714:	e004      	b.n	8002720 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8002716:	bf00      	nop
 8002718:	e002      	b.n	8002720 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800271a:	bf00      	nop
 800271c:	e000      	b.n	8002720 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800271e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002720:	3720      	adds	r7, #32
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b08a      	sub	sp, #40	; 0x28
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800273e:	2300      	movs	r3, #0
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002748:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	0a1b      	lsrs	r3, r3, #8
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00e      	beq.n	8002774 <HAL_I2C_ER_IRQHandler+0x4e>
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	0a1b      	lsrs	r3, r3, #8
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d008      	beq.n	8002774 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002772:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	0a5b      	lsrs	r3, r3, #9
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00e      	beq.n	800279e <HAL_I2C_ER_IRQHandler+0x78>
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	0a1b      	lsrs	r3, r3, #8
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	f043 0302 	orr.w	r3, r3, #2
 8002792:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800279c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	0a9b      	lsrs	r3, r3, #10
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d03f      	beq.n	800282a <HAL_I2C_ER_IRQHandler+0x104>
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	0a1b      	lsrs	r3, r3, #8
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d039      	beq.n	800282a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80027b6:	7efb      	ldrb	r3, [r7, #27]
 80027b8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027be:	b29b      	uxth	r3, r3
 80027c0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80027d0:	7ebb      	ldrb	r3, [r7, #26]
 80027d2:	2b20      	cmp	r3, #32
 80027d4:	d112      	bne.n	80027fc <HAL_I2C_ER_IRQHandler+0xd6>
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10f      	bne.n	80027fc <HAL_I2C_ER_IRQHandler+0xd6>
 80027dc:	7cfb      	ldrb	r3, [r7, #19]
 80027de:	2b21      	cmp	r3, #33	; 0x21
 80027e0:	d008      	beq.n	80027f4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80027e2:	7cfb      	ldrb	r3, [r7, #19]
 80027e4:	2b29      	cmp	r3, #41	; 0x29
 80027e6:	d005      	beq.n	80027f4 <HAL_I2C_ER_IRQHandler+0xce>
 80027e8:	7cfb      	ldrb	r3, [r7, #19]
 80027ea:	2b28      	cmp	r3, #40	; 0x28
 80027ec:	d106      	bne.n	80027fc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2b21      	cmp	r3, #33	; 0x21
 80027f2:	d103      	bne.n	80027fc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f001 f847 	bl	8003888 <I2C_Slave_AF>
 80027fa:	e016      	b.n	800282a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002804:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	f043 0304 	orr.w	r3, r3, #4
 800280c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800280e:	7efb      	ldrb	r3, [r7, #27]
 8002810:	2b10      	cmp	r3, #16
 8002812:	d002      	beq.n	800281a <HAL_I2C_ER_IRQHandler+0xf4>
 8002814:	7efb      	ldrb	r3, [r7, #27]
 8002816:	2b40      	cmp	r3, #64	; 0x40
 8002818:	d107      	bne.n	800282a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002828:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	0adb      	lsrs	r3, r3, #11
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00e      	beq.n	8002854 <HAL_I2C_ER_IRQHandler+0x12e>
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	0a1b      	lsrs	r3, r3, #8
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d008      	beq.n	8002854 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	f043 0308 	orr.w	r3, r3, #8
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002852:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	2b00      	cmp	r3, #0
 8002858:	d008      	beq.n	800286c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f001 f87e 	bl	8003968 <I2C_ITError>
  }
}
 800286c:	bf00      	nop
 800286e:	3728      	adds	r7, #40	; 0x28
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	70fb      	strb	r3, [r7, #3]
 80028d0:	4613      	mov	r3, r2
 80028d2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002952:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800295a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002966:	2b00      	cmp	r3, #0
 8002968:	d150      	bne.n	8002a0c <I2C_MasterTransmit_TXE+0xc8>
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	2b21      	cmp	r3, #33	; 0x21
 800296e:	d14d      	bne.n	8002a0c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b08      	cmp	r3, #8
 8002974:	d01d      	beq.n	80029b2 <I2C_MasterTransmit_TXE+0x6e>
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b20      	cmp	r3, #32
 800297a:	d01a      	beq.n	80029b2 <I2C_MasterTransmit_TXE+0x6e>
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002982:	d016      	beq.n	80029b2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002992:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2211      	movs	r2, #17
 8002998:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff ff62 	bl	8002874 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029b0:	e060      	b.n	8002a74 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029c0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b40      	cmp	r3, #64	; 0x40
 80029ea:	d107      	bne.n	80029fc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ff7d 	bl	80028f4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029fa:	e03b      	b.n	8002a74 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff ff35 	bl	8002874 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a0a:	e033      	b.n	8002a74 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
 8002a0e:	2b21      	cmp	r3, #33	; 0x21
 8002a10:	d005      	beq.n	8002a1e <I2C_MasterTransmit_TXE+0xda>
 8002a12:	7bbb      	ldrb	r3, [r7, #14]
 8002a14:	2b40      	cmp	r3, #64	; 0x40
 8002a16:	d12d      	bne.n	8002a74 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	2b22      	cmp	r3, #34	; 0x22
 8002a1c:	d12a      	bne.n	8002a74 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d108      	bne.n	8002a3a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a36:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002a38:	e01c      	b.n	8002a74 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b40      	cmp	r3, #64	; 0x40
 8002a44:	d103      	bne.n	8002a4e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f880 	bl	8002b4c <I2C_MemoryTransmit_TXE_BTF>
}
 8002a4c:	e012      	b.n	8002a74 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	781a      	ldrb	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a72:	e7ff      	b.n	8002a74 <I2C_MasterTransmit_TXE+0x130>
 8002a74:	bf00      	nop
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b21      	cmp	r3, #33	; 0x21
 8002a94:	d156      	bne.n	8002b44 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d012      	beq.n	8002ac6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	781a      	ldrb	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002ac4:	e03e      	b.n	8002b44 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d01d      	beq.n	8002b08 <I2C_MasterTransmit_BTF+0x8c>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2b20      	cmp	r3, #32
 8002ad0:	d01a      	beq.n	8002b08 <I2C_MasterTransmit_BTF+0x8c>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ad8:	d016      	beq.n	8002b08 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ae8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2211      	movs	r2, #17
 8002aee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff feb7 	bl	8002874 <HAL_I2C_MasterTxCpltCallback>
}
 8002b06:	e01d      	b.n	8002b44 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b16:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b26:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff fe98 	bl	8002874 <HAL_I2C_MasterTxCpltCallback>
}
 8002b44:	bf00      	nop
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d11d      	bne.n	8002ba0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d10b      	bne.n	8002b84 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b7c:	1c9a      	adds	r2, r3, #2
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002b82:	e06e      	b.n	8002c62 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	121b      	asrs	r3, r3, #8
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b9e:	e060      	b.n	8002c62 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d10b      	bne.n	8002bc0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002bbe:	e050      	b.n	8002c62 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d14c      	bne.n	8002c62 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	2b22      	cmp	r3, #34	; 0x22
 8002bcc:	d108      	bne.n	8002be0 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bdc:	601a      	str	r2, [r3, #0]
}
 8002bde:	e040      	b.n	8002c62 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d015      	beq.n	8002c16 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	2b21      	cmp	r3, #33	; 0x21
 8002bee:	d112      	bne.n	8002c16 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	781a      	ldrb	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002c14:	e025      	b.n	8002c62 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d120      	bne.n	8002c62 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	2b21      	cmp	r3, #33	; 0x21
 8002c24:	d11d      	bne.n	8002c62 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c34:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c44:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7ff fe49 	bl	80028f4 <HAL_I2C_MemTxCpltCallback>
}
 8002c62:	bf00      	nop
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b084      	sub	sp, #16
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b22      	cmp	r3, #34	; 0x22
 8002c7c:	f040 80a2 	bne.w	8002dc4 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d921      	bls.n	8002cd2 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b03      	cmp	r3, #3
 8002cbc:	f040 8082 	bne.w	8002dc4 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cce:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002cd0:	e078      	b.n	8002dc4 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d074      	beq.n	8002dc4 <I2C_MasterReceive_RXNE+0x15a>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d002      	beq.n	8002ce6 <I2C_MasterReceive_RXNE+0x7c>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d16e      	bne.n	8002dc4 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f001 f870 	bl	8003dcc <I2C_WaitOnSTOPRequestThroughIT>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d142      	bne.n	8002d78 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d00:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d10:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b40      	cmp	r3, #64	; 0x40
 8002d4a:	d10a      	bne.n	8002d62 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff fdd4 	bl	8002908 <HAL_I2C_MemRxCpltCallback>
}
 8002d60:	e030      	b.n	8002dc4 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2212      	movs	r2, #18
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff fd89 	bl	8002888 <HAL_I2C_MasterRxCpltCallback>
}
 8002d76:	e025      	b.n	8002dc4 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d86:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2220      	movs	r2, #32
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff fdac 	bl	800291c <HAL_I2C_ErrorCallback>
}
 8002dc4:	bf00      	nop
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	d11b      	bne.n	8002e1c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691a      	ldr	r2, [r3, #16]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002e1a:	e0bd      	b.n	8002f98 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d129      	bne.n	8002e7a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e34:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d00a      	beq.n	8002e52 <I2C_MasterReceive_BTF+0x86>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d007      	beq.n	8002e52 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e50:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e78:	e08e      	b.n	8002f98 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d176      	bne.n	8002f72 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d002      	beq.n	8002e90 <I2C_MasterReceive_BTF+0xc4>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2b10      	cmp	r3, #16
 8002e8e:	d108      	bne.n	8002ea2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	e019      	b.n	8002ed6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d002      	beq.n	8002eae <I2C_MasterReceive_BTF+0xe2>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d108      	bne.n	8002ec0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	e00a      	b.n	8002ed6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b10      	cmp	r3, #16
 8002ec4:	d007      	beq.n	8002ed6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002f30:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b40      	cmp	r3, #64	; 0x40
 8002f44:	d10a      	bne.n	8002f5c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff fcd7 	bl	8002908 <HAL_I2C_MemRxCpltCallback>
}
 8002f5a:	e01d      	b.n	8002f98 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2212      	movs	r2, #18
 8002f68:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff fc8c 	bl	8002888 <HAL_I2C_MasterRxCpltCallback>
}
 8002f70:	e012      	b.n	8002f98 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f98:	bf00      	nop
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b40      	cmp	r3, #64	; 0x40
 8002fb2:	d117      	bne.n	8002fe4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d109      	bne.n	8002fd0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fcc:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002fce:	e067      	b.n	80030a0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	611a      	str	r2, [r3, #16]
}
 8002fe2:	e05d      	b.n	80030a0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fec:	d133      	bne.n	8003056 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b21      	cmp	r3, #33	; 0x21
 8002ff8:	d109      	bne.n	800300e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800300a:	611a      	str	r2, [r3, #16]
 800300c:	e008      	b.n	8003020 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	b2db      	uxtb	r3, r3
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	b2da      	uxtb	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003024:	2b00      	cmp	r3, #0
 8003026:	d004      	beq.n	8003032 <I2C_Master_SB+0x92>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302e:	2b00      	cmp	r3, #0
 8003030:	d108      	bne.n	8003044 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003036:	2b00      	cmp	r3, #0
 8003038:	d032      	beq.n	80030a0 <I2C_Master_SB+0x100>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003040:	2b00      	cmp	r3, #0
 8003042:	d02d      	beq.n	80030a0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003052:	605a      	str	r2, [r3, #4]
}
 8003054:	e024      	b.n	80030a0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10e      	bne.n	800307c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	b29b      	uxth	r3, r3
 8003064:	11db      	asrs	r3, r3, #7
 8003066:	b2db      	uxtb	r3, r3
 8003068:	f003 0306 	and.w	r3, r3, #6
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f063 030f 	orn	r3, r3, #15
 8003072:	b2da      	uxtb	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	611a      	str	r2, [r3, #16]
}
 800307a:	e011      	b.n	80030a0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003080:	2b01      	cmp	r3, #1
 8003082:	d10d      	bne.n	80030a0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003088:	b29b      	uxth	r3, r3
 800308a:	11db      	asrs	r3, r3, #7
 800308c:	b2db      	uxtb	r3, r3
 800308e:	f003 0306 	and.w	r3, r3, #6
 8003092:	b2db      	uxtb	r3, r3
 8003094:	f063 030e 	orn	r3, r3, #14
 8003098:	b2da      	uxtb	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	611a      	str	r2, [r3, #16]
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d103      	bne.n	80030d0 <I2C_Master_ADD10+0x24>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d011      	beq.n	80030f4 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d104      	bne.n	80030e4 <I2C_Master_ADD10+0x38>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d007      	beq.n	80030f4 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030f2:	605a      	str	r2, [r3, #4]
    }
  }
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003100:	b480      	push	{r7}
 8003102:	b091      	sub	sp, #68	; 0x44
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800310e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b22      	cmp	r3, #34	; 0x22
 8003128:	f040 8169 	bne.w	80033fe <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10f      	bne.n	8003154 <I2C_Master_ADDR+0x54>
 8003134:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003138:	2b40      	cmp	r3, #64	; 0x40
 800313a:	d10b      	bne.n	8003154 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800313c:	2300      	movs	r3, #0
 800313e:	633b      	str	r3, [r7, #48]	; 0x30
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	633b      	str	r3, [r7, #48]	; 0x30
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	633b      	str	r3, [r7, #48]	; 0x30
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	e160      	b.n	8003416 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003158:	2b00      	cmp	r3, #0
 800315a:	d11d      	bne.n	8003198 <I2C_Master_ADDR+0x98>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003164:	d118      	bne.n	8003198 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003166:	2300      	movs	r3, #0
 8003168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800317a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800318a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	651a      	str	r2, [r3, #80]	; 0x50
 8003196:	e13e      	b.n	8003416 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d113      	bne.n	80031ca <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a2:	2300      	movs	r3, #0
 80031a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	e115      	b.n	80033f6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	f040 808a 	bne.w	80032ea <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80031d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031dc:	d137      	bne.n	800324e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ec:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031fc:	d113      	bne.n	8003226 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800320e:	2300      	movs	r3, #0
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	e0e7      	b.n	80033f6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003226:	2300      	movs	r3, #0
 8003228:	623b      	str	r3, [r7, #32]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	623b      	str	r3, [r7, #32]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	623b      	str	r3, [r7, #32]
 800323a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	e0d3      	b.n	80033f6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800324e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003250:	2b08      	cmp	r3, #8
 8003252:	d02e      	beq.n	80032b2 <I2C_Master_ADDR+0x1b2>
 8003254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003256:	2b20      	cmp	r3, #32
 8003258:	d02b      	beq.n	80032b2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800325a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325c:	2b12      	cmp	r3, #18
 800325e:	d102      	bne.n	8003266 <I2C_Master_ADDR+0x166>
 8003260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003262:	2b01      	cmp	r3, #1
 8003264:	d125      	bne.n	80032b2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003268:	2b04      	cmp	r3, #4
 800326a:	d00e      	beq.n	800328a <I2C_Master_ADDR+0x18a>
 800326c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326e:	2b02      	cmp	r3, #2
 8003270:	d00b      	beq.n	800328a <I2C_Master_ADDR+0x18a>
 8003272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003274:	2b10      	cmp	r3, #16
 8003276:	d008      	beq.n	800328a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	e007      	b.n	800329a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003298:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800329a:	2300      	movs	r3, #0
 800329c:	61fb      	str	r3, [r7, #28]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	61fb      	str	r3, [r7, #28]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	e0a1      	b.n	80033f6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032c0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c2:	2300      	movs	r3, #0
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	61bb      	str	r3, [r7, #24]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	61bb      	str	r3, [r7, #24]
 80032d6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	e085      	b.n	80033f6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d14d      	bne.n	8003390 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80032f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d016      	beq.n	8003328 <I2C_Master_ADDR+0x228>
 80032fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d013      	beq.n	8003328 <I2C_Master_ADDR+0x228>
 8003300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003302:	2b10      	cmp	r3, #16
 8003304:	d010      	beq.n	8003328 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003314:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	e007      	b.n	8003338 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003336:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003346:	d117      	bne.n	8003378 <I2C_Master_ADDR+0x278>
 8003348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800334e:	d00b      	beq.n	8003368 <I2C_Master_ADDR+0x268>
 8003350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003352:	2b01      	cmp	r3, #1
 8003354:	d008      	beq.n	8003368 <I2C_Master_ADDR+0x268>
 8003356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003358:	2b08      	cmp	r3, #8
 800335a:	d005      	beq.n	8003368 <I2C_Master_ADDR+0x268>
 800335c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335e:	2b10      	cmp	r3, #16
 8003360:	d002      	beq.n	8003368 <I2C_Master_ADDR+0x268>
 8003362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003364:	2b20      	cmp	r3, #32
 8003366:	d107      	bne.n	8003378 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003376:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003378:	2300      	movs	r3, #0
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	e032      	b.n	80033f6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800339e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ae:	d117      	bne.n	80033e0 <I2C_Master_ADDR+0x2e0>
 80033b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033b6:	d00b      	beq.n	80033d0 <I2C_Master_ADDR+0x2d0>
 80033b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d008      	beq.n	80033d0 <I2C_Master_ADDR+0x2d0>
 80033be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d005      	beq.n	80033d0 <I2C_Master_ADDR+0x2d0>
 80033c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c6:	2b10      	cmp	r3, #16
 80033c8:	d002      	beq.n	80033d0 <I2C_Master_ADDR+0x2d0>
 80033ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033cc:	2b20      	cmp	r3, #32
 80033ce:	d107      	bne.n	80033e0 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033de:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e0:	2300      	movs	r3, #0
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80033fc:	e00b      	b.n	8003416 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]
}
 8003414:	e7ff      	b.n	8003416 <I2C_Master_ADDR+0x316>
 8003416:	bf00      	nop
 8003418:	3744      	adds	r7, #68	; 0x44
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b084      	sub	sp, #16
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003430:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d02b      	beq.n	8003494 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	781a      	ldrb	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003456:	b29b      	uxth	r3, r3
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d114      	bne.n	8003494 <I2C_SlaveTransmit_TXE+0x72>
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	2b29      	cmp	r3, #41	; 0x29
 800346e:	d111      	bne.n	8003494 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800347e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2221      	movs	r2, #33	; 0x21
 8003484:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2228      	movs	r2, #40	; 0x28
 800348a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff fa04 	bl	800289c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003494:	bf00      	nop
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d011      	beq.n	80034d2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	781a      	ldrb	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b084      	sub	sp, #16
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ec:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d02c      	beq.n	8003552 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003522:	b29b      	uxth	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d114      	bne.n	8003552 <I2C_SlaveReceive_RXNE+0x74>
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	2b2a      	cmp	r3, #42	; 0x2a
 800352c:	d111      	bne.n	8003552 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800353c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2222      	movs	r2, #34	; 0x22
 8003542:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2228      	movs	r2, #40	; 0x28
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7ff f9af 	bl	80028b0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003552:	bf00      	nop
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d012      	beq.n	8003592 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691a      	ldr	r2, [r3, #16]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
 80035a6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80035a8:	2300      	movs	r3, #0
 80035aa:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035b8:	2b28      	cmp	r3, #40	; 0x28
 80035ba:	d127      	bne.n	800360c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ca:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	089b      	lsrs	r3, r3, #2
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80035d8:	2301      	movs	r3, #1
 80035da:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	09db      	lsrs	r3, r3, #7
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d103      	bne.n	80035f0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	81bb      	strh	r3, [r7, #12]
 80035ee:	e002      	b.n	80035f6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80035fe:	89ba      	ldrh	r2, [r7, #12]
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	4619      	mov	r1, r3
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7ff f95d 	bl	80028c4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800360a:	e008      	b.n	800361e <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0202 	mvn.w	r2, #2
 8003614:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800361e:	bf00      	nop
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003636:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003646:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003648:	2300      	movs	r3, #0
 800364a:	60bb      	str	r3, [r7, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	60bb      	str	r3, [r7, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0201 	orr.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003674:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003684:	d172      	bne.n	800376c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	2b22      	cmp	r3, #34	; 0x22
 800368a:	d002      	beq.n	8003692 <I2C_Slave_STOPF+0x6a>
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	2b2a      	cmp	r3, #42	; 0x2a
 8003690:	d135      	bne.n	80036fe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	b29a      	uxth	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d005      	beq.n	80036b6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f043 0204 	orr.w	r2, r3, #4
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fe f931 	bl	8001932 <HAL_DMA_GetState>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d049      	beq.n	800376a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	4a69      	ldr	r2, [pc, #420]	; (8003880 <I2C_Slave_STOPF+0x258>)
 80036dc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fe f903 	bl	80018ee <HAL_DMA_Abort_IT>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d03d      	beq.n	800376a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036f8:	4610      	mov	r0, r2
 80036fa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036fc:	e035      	b.n	800376a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	b29a      	uxth	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	f043 0204 	orr.w	r2, r3, #4
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003730:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003736:	4618      	mov	r0, r3
 8003738:	f7fe f8fb 	bl	8001932 <HAL_DMA_GetState>
 800373c:	4603      	mov	r3, r0
 800373e:	2b01      	cmp	r3, #1
 8003740:	d014      	beq.n	800376c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003746:	4a4e      	ldr	r2, [pc, #312]	; (8003880 <I2C_Slave_STOPF+0x258>)
 8003748:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe f8cd 	bl	80018ee <HAL_DMA_Abort_IT>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d008      	beq.n	800376c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003764:	4610      	mov	r0, r2
 8003766:	4798      	blx	r3
 8003768:	e000      	b.n	800376c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800376a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d03e      	beq.n	80037f4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b04      	cmp	r3, #4
 8003782:	d112      	bne.n	80037aa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691a      	ldr	r2, [r3, #16]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b4:	2b40      	cmp	r3, #64	; 0x40
 80037b6:	d112      	bne.n	80037de <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691a      	ldr	r2, [r3, #16]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	f043 0204 	orr.w	r2, r3, #4
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f8b3 	bl	8003968 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003802:	e039      	b.n	8003878 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	2b2a      	cmp	r3, #42	; 0x2a
 8003808:	d109      	bne.n	800381e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2228      	movs	r2, #40	; 0x28
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff f849 	bl	80028b0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b28      	cmp	r3, #40	; 0x28
 8003828:	d111      	bne.n	800384e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a15      	ldr	r2, [pc, #84]	; (8003884 <I2C_Slave_STOPF+0x25c>)
 800382e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2220      	movs	r2, #32
 800383a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff f84a 	bl	80028e0 <HAL_I2C_ListenCpltCallback>
}
 800384c:	e014      	b.n	8003878 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	2b22      	cmp	r3, #34	; 0x22
 8003854:	d002      	beq.n	800385c <I2C_Slave_STOPF+0x234>
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	2b22      	cmp	r3, #34	; 0x22
 800385a:	d10d      	bne.n	8003878 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff f81c 	bl	80028b0 <HAL_I2C_SlaveRxCpltCallback>
}
 8003878:	bf00      	nop
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	08003bcd 	.word	0x08003bcd
 8003884:	ffff0000 	.word	0xffff0000

08003888 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003896:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d002      	beq.n	80038aa <I2C_Slave_AF+0x22>
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b20      	cmp	r3, #32
 80038a8:	d129      	bne.n	80038fe <I2C_Slave_AF+0x76>
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	2b28      	cmp	r3, #40	; 0x28
 80038ae:	d126      	bne.n	80038fe <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a2c      	ldr	r2, [pc, #176]	; (8003964 <I2C_Slave_AF+0xdc>)
 80038b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038c4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038ce:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038de:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7fe fff2 	bl	80028e0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80038fc:	e02e      	b.n	800395c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
 8003900:	2b21      	cmp	r3, #33	; 0x21
 8003902:	d126      	bne.n	8003952 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a17      	ldr	r2, [pc, #92]	; (8003964 <I2C_Slave_AF+0xdc>)
 8003908:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2221      	movs	r2, #33	; 0x21
 800390e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800392e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003938:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003948:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fe ffa6 	bl	800289c <HAL_I2C_SlaveTxCpltCallback>
}
 8003950:	e004      	b.n	800395c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800395a:	615a      	str	r2, [r3, #20]
}
 800395c:	bf00      	nop
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	ffff0000 	.word	0xffff0000

08003968 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003976:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800397e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003980:	7bbb      	ldrb	r3, [r7, #14]
 8003982:	2b10      	cmp	r3, #16
 8003984:	d002      	beq.n	800398c <I2C_ITError+0x24>
 8003986:	7bbb      	ldrb	r3, [r7, #14]
 8003988:	2b40      	cmp	r3, #64	; 0x40
 800398a:	d10a      	bne.n	80039a2 <I2C_ITError+0x3a>
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	2b22      	cmp	r3, #34	; 0x22
 8003990:	d107      	bne.n	80039a2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039a0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039a8:	2b28      	cmp	r3, #40	; 0x28
 80039aa:	d107      	bne.n	80039bc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2228      	movs	r2, #40	; 0x28
 80039b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80039ba:	e015      	b.n	80039e8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ca:	d00a      	beq.n	80039e2 <I2C_ITError+0x7a>
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	2b60      	cmp	r3, #96	; 0x60
 80039d0:	d007      	beq.n	80039e2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039f6:	d162      	bne.n	8003abe <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a06:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d020      	beq.n	8003a58 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1a:	4a6a      	ldr	r2, [pc, #424]	; (8003bc4 <I2C_ITError+0x25c>)
 8003a1c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fd ff63 	bl	80018ee <HAL_DMA_Abort_IT>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 8089 	beq.w	8003b42 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0201 	bic.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a52:	4610      	mov	r0, r2
 8003a54:	4798      	blx	r3
 8003a56:	e074      	b.n	8003b42 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5c:	4a59      	ldr	r2, [pc, #356]	; (8003bc4 <I2C_ITError+0x25c>)
 8003a5e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7fd ff42 	bl	80018ee <HAL_DMA_Abort_IT>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d068      	beq.n	8003b42 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7a:	2b40      	cmp	r3, #64	; 0x40
 8003a7c:	d10b      	bne.n	8003a96 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	691a      	ldr	r2, [r3, #16]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0201 	bic.w	r2, r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ab8:	4610      	mov	r0, r2
 8003aba:	4798      	blx	r3
 8003abc:	e041      	b.n	8003b42 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b60      	cmp	r3, #96	; 0x60
 8003ac8:	d125      	bne.n	8003b16 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2220      	movs	r2, #32
 8003ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae2:	2b40      	cmp	r3, #64	; 0x40
 8003ae4:	d10b      	bne.n	8003afe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0201 	bic.w	r2, r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7fe ff0e 	bl	8002930 <HAL_I2C_AbortCpltCallback>
 8003b14:	e015      	b.n	8003b42 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b20:	2b40      	cmp	r3, #64	; 0x40
 8003b22:	d10b      	bne.n	8003b3c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	691a      	ldr	r2, [r3, #16]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7fe feed 	bl	800291c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10e      	bne.n	8003b70 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d109      	bne.n	8003b70 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d104      	bne.n	8003b70 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d007      	beq.n	8003b80 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b7e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b86:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d113      	bne.n	8003bbc <I2C_ITError+0x254>
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	2b28      	cmp	r3, #40	; 0x28
 8003b98:	d110      	bne.n	8003bbc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a0a      	ldr	r2, [pc, #40]	; (8003bc8 <I2C_ITError+0x260>)
 8003b9e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fe fe92 	bl	80028e0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003bbc:	bf00      	nop
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	08003bcd 	.word	0x08003bcd
 8003bc8:	ffff0000 	.word	0xffff0000

08003bcc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bdc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003be6:	4b4b      	ldr	r3, [pc, #300]	; (8003d14 <I2C_DMAAbort+0x148>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	08db      	lsrs	r3, r3, #3
 8003bec:	4a4a      	ldr	r2, [pc, #296]	; (8003d18 <I2C_DMAAbort+0x14c>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	0a1a      	lsrs	r2, r3, #8
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	00da      	lsls	r2, r3, #3
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d106      	bne.n	8003c14 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f043 0220 	orr.w	r2, r3, #32
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003c12:	e00a      	b.n	8003c2a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c28:	d0ea      	beq.n	8003c00 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c36:	2200      	movs	r2, #0
 8003c38:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c46:	2200      	movs	r2, #0
 8003c48:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c58:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0201 	bic.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b60      	cmp	r3, #96	; 0x60
 8003c9a:	d10e      	bne.n	8003cba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003cb2:	6978      	ldr	r0, [r7, #20]
 8003cb4:	f7fe fe3c 	bl	8002930 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cb8:	e027      	b.n	8003d0a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cba:	7cfb      	ldrb	r3, [r7, #19]
 8003cbc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cc0:	2b28      	cmp	r3, #40	; 0x28
 8003cc2:	d117      	bne.n	8003cf4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ce2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2228      	movs	r2, #40	; 0x28
 8003cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003cf2:	e007      	b.n	8003d04 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003d04:	6978      	ldr	r0, [r7, #20]
 8003d06:	f7fe fe09 	bl	800291c <HAL_I2C_ErrorCallback>
}
 8003d0a:	bf00      	nop
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	20000000 	.word	0x20000000
 8003d18:	14f8b589 	.word	0x14f8b589

08003d1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d2c:	e025      	b.n	8003d7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d021      	beq.n	8003d7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d36:	f7fd fc99 	bl	800166c <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d302      	bcc.n	8003d4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d116      	bne.n	8003d7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	f043 0220 	orr.w	r2, r3, #32
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e023      	b.n	8003dc2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	0c1b      	lsrs	r3, r3, #16
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d10d      	bne.n	8003da0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	43da      	mvns	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	bf0c      	ite	eq
 8003d96:	2301      	moveq	r3, #1
 8003d98:	2300      	movne	r3, #0
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	e00c      	b.n	8003dba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	43da      	mvns	r2, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4013      	ands	r3, r2
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	bf0c      	ite	eq
 8003db2:	2301      	moveq	r3, #1
 8003db4:	2300      	movne	r3, #0
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	461a      	mov	r2, r3
 8003dba:	79fb      	ldrb	r3, [r7, #7]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d0b6      	beq.n	8003d2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003dd8:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	08db      	lsrs	r3, r3, #3
 8003dde:	4a13      	ldr	r2, [pc, #76]	; (8003e2c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003de0:	fba2 2303 	umull	r2, r3, r2, r3
 8003de4:	0a1a      	lsrs	r2, r3, #8
 8003de6:	4613      	mov	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	3b01      	subs	r3, #1
 8003df2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d107      	bne.n	8003e0a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f043 0220 	orr.w	r2, r3, #32
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e008      	b.n	8003e1c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e18:	d0e9      	beq.n	8003dee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	20000000 	.word	0x20000000
 8003e2c:	14f8b589 	.word	0x14f8b589

08003e30 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003e40:	d103      	bne.n	8003e4a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e48:	e007      	b.n	8003e5a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003e52:	d102      	bne.n	8003e5a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2208      	movs	r2, #8
 8003e58:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
	...

08003e68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e25b      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d075      	beq.n	8003f72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e86:	4ba3      	ldr	r3, [pc, #652]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d00c      	beq.n	8003eac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e92:	4ba0      	ldr	r3, [pc, #640]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d112      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e9e:	4b9d      	ldr	r3, [pc, #628]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eaa:	d10b      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eac:	4b99      	ldr	r3, [pc, #612]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d05b      	beq.n	8003f70 <HAL_RCC_OscConfig+0x108>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d157      	bne.n	8003f70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e236      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ecc:	d106      	bne.n	8003edc <HAL_RCC_OscConfig+0x74>
 8003ece:	4b91      	ldr	r3, [pc, #580]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a90      	ldr	r2, [pc, #576]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	e01d      	b.n	8003f18 <HAL_RCC_OscConfig+0xb0>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ee4:	d10c      	bne.n	8003f00 <HAL_RCC_OscConfig+0x98>
 8003ee6:	4b8b      	ldr	r3, [pc, #556]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a8a      	ldr	r2, [pc, #552]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	4b88      	ldr	r3, [pc, #544]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a87      	ldr	r2, [pc, #540]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	e00b      	b.n	8003f18 <HAL_RCC_OscConfig+0xb0>
 8003f00:	4b84      	ldr	r3, [pc, #528]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a83      	ldr	r2, [pc, #524]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	4b81      	ldr	r3, [pc, #516]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a80      	ldr	r2, [pc, #512]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d013      	beq.n	8003f48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f20:	f7fd fba4 	bl	800166c <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f28:	f7fd fba0 	bl	800166c <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b64      	cmp	r3, #100	; 0x64
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e1fb      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3a:	4b76      	ldr	r3, [pc, #472]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCC_OscConfig+0xc0>
 8003f46:	e014      	b.n	8003f72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f48:	f7fd fb90 	bl	800166c <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f50:	f7fd fb8c 	bl	800166c <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b64      	cmp	r3, #100	; 0x64
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e1e7      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f62:	4b6c      	ldr	r3, [pc, #432]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f0      	bne.n	8003f50 <HAL_RCC_OscConfig+0xe8>
 8003f6e:	e000      	b.n	8003f72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d063      	beq.n	8004046 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f7e:	4b65      	ldr	r3, [pc, #404]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00b      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f8a:	4b62      	ldr	r3, [pc, #392]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d11c      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f96:	4b5f      	ldr	r3, [pc, #380]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d116      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fa2:	4b5c      	ldr	r3, [pc, #368]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d005      	beq.n	8003fba <HAL_RCC_OscConfig+0x152>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d001      	beq.n	8003fba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e1bb      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fba:	4b56      	ldr	r3, [pc, #344]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	4952      	ldr	r1, [pc, #328]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fce:	e03a      	b.n	8004046 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d020      	beq.n	800401a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fd8:	4b4f      	ldr	r3, [pc, #316]	; (8004118 <HAL_RCC_OscConfig+0x2b0>)
 8003fda:	2201      	movs	r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fde:	f7fd fb45 	bl	800166c <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fe6:	f7fd fb41 	bl	800166c <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e19c      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff8:	4b46      	ldr	r3, [pc, #280]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0f0      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004004:	4b43      	ldr	r3, [pc, #268]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	4940      	ldr	r1, [pc, #256]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 8004014:	4313      	orrs	r3, r2
 8004016:	600b      	str	r3, [r1, #0]
 8004018:	e015      	b.n	8004046 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800401a:	4b3f      	ldr	r3, [pc, #252]	; (8004118 <HAL_RCC_OscConfig+0x2b0>)
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004020:	f7fd fb24 	bl	800166c <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004028:	f7fd fb20 	bl	800166c <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e17b      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800403a:	4b36      	ldr	r3, [pc, #216]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1f0      	bne.n	8004028 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	d030      	beq.n	80040b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d016      	beq.n	8004088 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800405a:	4b30      	ldr	r3, [pc, #192]	; (800411c <HAL_RCC_OscConfig+0x2b4>)
 800405c:	2201      	movs	r2, #1
 800405e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004060:	f7fd fb04 	bl	800166c <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004068:	f7fd fb00 	bl	800166c <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e15b      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800407a:	4b26      	ldr	r3, [pc, #152]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 800407c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0f0      	beq.n	8004068 <HAL_RCC_OscConfig+0x200>
 8004086:	e015      	b.n	80040b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004088:	4b24      	ldr	r3, [pc, #144]	; (800411c <HAL_RCC_OscConfig+0x2b4>)
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800408e:	f7fd faed 	bl	800166c <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004096:	f7fd fae9 	bl	800166c <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e144      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040a8:	4b1a      	ldr	r3, [pc, #104]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 80040aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1f0      	bne.n	8004096 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 80a0 	beq.w	8004202 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040c2:	2300      	movs	r3, #0
 80040c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040c6:	4b13      	ldr	r3, [pc, #76]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10f      	bne.n	80040f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040d2:	2300      	movs	r3, #0
 80040d4:	60bb      	str	r3, [r7, #8]
 80040d6:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	4a0e      	ldr	r2, [pc, #56]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 80040dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e0:	6413      	str	r3, [r2, #64]	; 0x40
 80040e2:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <HAL_RCC_OscConfig+0x2ac>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ee:	2301      	movs	r3, #1
 80040f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f2:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <HAL_RCC_OscConfig+0x2b8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d121      	bne.n	8004142 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040fe:	4b08      	ldr	r3, [pc, #32]	; (8004120 <HAL_RCC_OscConfig+0x2b8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a07      	ldr	r2, [pc, #28]	; (8004120 <HAL_RCC_OscConfig+0x2b8>)
 8004104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800410a:	f7fd faaf 	bl	800166c <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004110:	e011      	b.n	8004136 <HAL_RCC_OscConfig+0x2ce>
 8004112:	bf00      	nop
 8004114:	40023800 	.word	0x40023800
 8004118:	42470000 	.word	0x42470000
 800411c:	42470e80 	.word	0x42470e80
 8004120:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004124:	f7fd faa2 	bl	800166c <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e0fd      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004136:	4b81      	ldr	r3, [pc, #516]	; (800433c <HAL_RCC_OscConfig+0x4d4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0f0      	beq.n	8004124 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d106      	bne.n	8004158 <HAL_RCC_OscConfig+0x2f0>
 800414a:	4b7d      	ldr	r3, [pc, #500]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 800414c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414e:	4a7c      	ldr	r2, [pc, #496]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	6713      	str	r3, [r2, #112]	; 0x70
 8004156:	e01c      	b.n	8004192 <HAL_RCC_OscConfig+0x32a>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	2b05      	cmp	r3, #5
 800415e:	d10c      	bne.n	800417a <HAL_RCC_OscConfig+0x312>
 8004160:	4b77      	ldr	r3, [pc, #476]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 8004162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004164:	4a76      	ldr	r2, [pc, #472]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 8004166:	f043 0304 	orr.w	r3, r3, #4
 800416a:	6713      	str	r3, [r2, #112]	; 0x70
 800416c:	4b74      	ldr	r3, [pc, #464]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 800416e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004170:	4a73      	ldr	r2, [pc, #460]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 8004172:	f043 0301 	orr.w	r3, r3, #1
 8004176:	6713      	str	r3, [r2, #112]	; 0x70
 8004178:	e00b      	b.n	8004192 <HAL_RCC_OscConfig+0x32a>
 800417a:	4b71      	ldr	r3, [pc, #452]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 800417c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417e:	4a70      	ldr	r2, [pc, #448]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	6713      	str	r3, [r2, #112]	; 0x70
 8004186:	4b6e      	ldr	r3, [pc, #440]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 8004188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418a:	4a6d      	ldr	r2, [pc, #436]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 800418c:	f023 0304 	bic.w	r3, r3, #4
 8004190:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d015      	beq.n	80041c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419a:	f7fd fa67 	bl	800166c <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a0:	e00a      	b.n	80041b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041a2:	f7fd fa63 	bl	800166c <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e0bc      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b8:	4b61      	ldr	r3, [pc, #388]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 80041ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0ee      	beq.n	80041a2 <HAL_RCC_OscConfig+0x33a>
 80041c4:	e014      	b.n	80041f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041c6:	f7fd fa51 	bl	800166c <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041cc:	e00a      	b.n	80041e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ce:	f7fd fa4d 	bl	800166c <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041dc:	4293      	cmp	r3, r2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e0a6      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e4:	4b56      	ldr	r3, [pc, #344]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 80041e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1ee      	bne.n	80041ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041f0:	7dfb      	ldrb	r3, [r7, #23]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d105      	bne.n	8004202 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f6:	4b52      	ldr	r3, [pc, #328]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	4a51      	ldr	r2, [pc, #324]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 80041fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004200:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 8092 	beq.w	8004330 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800420c:	4b4c      	ldr	r3, [pc, #304]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f003 030c 	and.w	r3, r3, #12
 8004214:	2b08      	cmp	r3, #8
 8004216:	d05c      	beq.n	80042d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	2b02      	cmp	r3, #2
 800421e:	d141      	bne.n	80042a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004220:	4b48      	ldr	r3, [pc, #288]	; (8004344 <HAL_RCC_OscConfig+0x4dc>)
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004226:	f7fd fa21 	bl	800166c <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800422e:	f7fd fa1d 	bl	800166c <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e078      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004240:	4b3f      	ldr	r3, [pc, #252]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1f0      	bne.n	800422e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69da      	ldr	r2, [r3, #28]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	019b      	lsls	r3, r3, #6
 800425c:	431a      	orrs	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004262:	085b      	lsrs	r3, r3, #1
 8004264:	3b01      	subs	r3, #1
 8004266:	041b      	lsls	r3, r3, #16
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426e:	061b      	lsls	r3, r3, #24
 8004270:	4933      	ldr	r1, [pc, #204]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 8004272:	4313      	orrs	r3, r2
 8004274:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004276:	4b33      	ldr	r3, [pc, #204]	; (8004344 <HAL_RCC_OscConfig+0x4dc>)
 8004278:	2201      	movs	r2, #1
 800427a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427c:	f7fd f9f6 	bl	800166c <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004284:	f7fd f9f2 	bl	800166c <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e04d      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004296:	4b2a      	ldr	r3, [pc, #168]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0f0      	beq.n	8004284 <HAL_RCC_OscConfig+0x41c>
 80042a2:	e045      	b.n	8004330 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a4:	4b27      	ldr	r3, [pc, #156]	; (8004344 <HAL_RCC_OscConfig+0x4dc>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042aa:	f7fd f9df 	bl	800166c <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042b2:	f7fd f9db 	bl	800166c <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e036      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c4:	4b1e      	ldr	r3, [pc, #120]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1f0      	bne.n	80042b2 <HAL_RCC_OscConfig+0x44a>
 80042d0:	e02e      	b.n	8004330 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e029      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042de:	4b18      	ldr	r3, [pc, #96]	; (8004340 <HAL_RCC_OscConfig+0x4d8>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d11c      	bne.n	800432c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d115      	bne.n	800432c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004306:	4013      	ands	r3, r2
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800430c:	4293      	cmp	r3, r2
 800430e:	d10d      	bne.n	800432c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800431a:	429a      	cmp	r2, r3
 800431c:	d106      	bne.n	800432c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004328:	429a      	cmp	r2, r3
 800432a:	d001      	beq.n	8004330 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40007000 	.word	0x40007000
 8004340:	40023800 	.word	0x40023800
 8004344:	42470060 	.word	0x42470060

08004348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e0cc      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800435c:	4b68      	ldr	r3, [pc, #416]	; (8004500 <HAL_RCC_ClockConfig+0x1b8>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d90c      	bls.n	8004384 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436a:	4b65      	ldr	r3, [pc, #404]	; (8004500 <HAL_RCC_ClockConfig+0x1b8>)
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004372:	4b63      	ldr	r3, [pc, #396]	; (8004500 <HAL_RCC_ClockConfig+0x1b8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	429a      	cmp	r2, r3
 800437e:	d001      	beq.n	8004384 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e0b8      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d020      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d005      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800439c:	4b59      	ldr	r3, [pc, #356]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	4a58      	ldr	r2, [pc, #352]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043b4:	4b53      	ldr	r3, [pc, #332]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	4a52      	ldr	r2, [pc, #328]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c0:	4b50      	ldr	r3, [pc, #320]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	494d      	ldr	r1, [pc, #308]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d044      	beq.n	8004468 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d107      	bne.n	80043f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e6:	4b47      	ldr	r3, [pc, #284]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d119      	bne.n	8004426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e07f      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d003      	beq.n	8004406 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004402:	2b03      	cmp	r3, #3
 8004404:	d107      	bne.n	8004416 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004406:	4b3f      	ldr	r3, [pc, #252]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d109      	bne.n	8004426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e06f      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004416:	4b3b      	ldr	r3, [pc, #236]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e067      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004426:	4b37      	ldr	r3, [pc, #220]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f023 0203 	bic.w	r2, r3, #3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	4934      	ldr	r1, [pc, #208]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 8004434:	4313      	orrs	r3, r2
 8004436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004438:	f7fd f918 	bl	800166c <HAL_GetTick>
 800443c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800443e:	e00a      	b.n	8004456 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004440:	f7fd f914 	bl	800166c <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	f241 3288 	movw	r2, #5000	; 0x1388
 800444e:	4293      	cmp	r3, r2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e04f      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004456:	4b2b      	ldr	r3, [pc, #172]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 020c 	and.w	r2, r3, #12
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	429a      	cmp	r2, r3
 8004466:	d1eb      	bne.n	8004440 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004468:	4b25      	ldr	r3, [pc, #148]	; (8004500 <HAL_RCC_ClockConfig+0x1b8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 030f 	and.w	r3, r3, #15
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d20c      	bcs.n	8004490 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004476:	4b22      	ldr	r3, [pc, #136]	; (8004500 <HAL_RCC_ClockConfig+0x1b8>)
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	4b20      	ldr	r3, [pc, #128]	; (8004500 <HAL_RCC_ClockConfig+0x1b8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e032      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	d008      	beq.n	80044ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800449c:	4b19      	ldr	r3, [pc, #100]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	4916      	ldr	r1, [pc, #88]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d009      	beq.n	80044ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ba:	4b12      	ldr	r3, [pc, #72]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	490e      	ldr	r1, [pc, #56]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044ce:	f000 f821 	bl	8004514 <HAL_RCC_GetSysClockFreq>
 80044d2:	4602      	mov	r2, r0
 80044d4:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	091b      	lsrs	r3, r3, #4
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	490a      	ldr	r1, [pc, #40]	; (8004508 <HAL_RCC_ClockConfig+0x1c0>)
 80044e0:	5ccb      	ldrb	r3, [r1, r3]
 80044e2:	fa22 f303 	lsr.w	r3, r2, r3
 80044e6:	4a09      	ldr	r2, [pc, #36]	; (800450c <HAL_RCC_ClockConfig+0x1c4>)
 80044e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044ea:	4b09      	ldr	r3, [pc, #36]	; (8004510 <HAL_RCC_ClockConfig+0x1c8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fd f878 	bl	80015e4 <HAL_InitTick>

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	40023c00 	.word	0x40023c00
 8004504:	40023800 	.word	0x40023800
 8004508:	08007178 	.word	0x08007178
 800450c:	20000000 	.word	0x20000000
 8004510:	20000004 	.word	0x20000004

08004514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004514:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	607b      	str	r3, [r7, #4]
 8004520:	2300      	movs	r3, #0
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	2300      	movs	r3, #0
 8004526:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800452c:	4b67      	ldr	r3, [pc, #412]	; (80046cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 030c 	and.w	r3, r3, #12
 8004534:	2b08      	cmp	r3, #8
 8004536:	d00d      	beq.n	8004554 <HAL_RCC_GetSysClockFreq+0x40>
 8004538:	2b08      	cmp	r3, #8
 800453a:	f200 80bd 	bhi.w	80046b8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <HAL_RCC_GetSysClockFreq+0x34>
 8004542:	2b04      	cmp	r3, #4
 8004544:	d003      	beq.n	800454e <HAL_RCC_GetSysClockFreq+0x3a>
 8004546:	e0b7      	b.n	80046b8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004548:	4b61      	ldr	r3, [pc, #388]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800454a:	60bb      	str	r3, [r7, #8]
       break;
 800454c:	e0b7      	b.n	80046be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800454e:	4b61      	ldr	r3, [pc, #388]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004550:	60bb      	str	r3, [r7, #8]
      break;
 8004552:	e0b4      	b.n	80046be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004554:	4b5d      	ldr	r3, [pc, #372]	; (80046cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800455c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800455e:	4b5b      	ldr	r3, [pc, #364]	; (80046cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d04d      	beq.n	8004606 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800456a:	4b58      	ldr	r3, [pc, #352]	; (80046cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	099b      	lsrs	r3, r3, #6
 8004570:	461a      	mov	r2, r3
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	f240 10ff 	movw	r0, #511	; 0x1ff
 800457a:	f04f 0100 	mov.w	r1, #0
 800457e:	ea02 0800 	and.w	r8, r2, r0
 8004582:	ea03 0901 	and.w	r9, r3, r1
 8004586:	4640      	mov	r0, r8
 8004588:	4649      	mov	r1, r9
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	014b      	lsls	r3, r1, #5
 8004594:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004598:	0142      	lsls	r2, r0, #5
 800459a:	4610      	mov	r0, r2
 800459c:	4619      	mov	r1, r3
 800459e:	ebb0 0008 	subs.w	r0, r0, r8
 80045a2:	eb61 0109 	sbc.w	r1, r1, r9
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	f04f 0300 	mov.w	r3, #0
 80045ae:	018b      	lsls	r3, r1, #6
 80045b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045b4:	0182      	lsls	r2, r0, #6
 80045b6:	1a12      	subs	r2, r2, r0
 80045b8:	eb63 0301 	sbc.w	r3, r3, r1
 80045bc:	f04f 0000 	mov.w	r0, #0
 80045c0:	f04f 0100 	mov.w	r1, #0
 80045c4:	00d9      	lsls	r1, r3, #3
 80045c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045ca:	00d0      	lsls	r0, r2, #3
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	eb12 0208 	adds.w	r2, r2, r8
 80045d4:	eb43 0309 	adc.w	r3, r3, r9
 80045d8:	f04f 0000 	mov.w	r0, #0
 80045dc:	f04f 0100 	mov.w	r1, #0
 80045e0:	0259      	lsls	r1, r3, #9
 80045e2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80045e6:	0250      	lsls	r0, r2, #9
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4610      	mov	r0, r2
 80045ee:	4619      	mov	r1, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	461a      	mov	r2, r3
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	f7fc fad6 	bl	8000ba8 <__aeabi_uldivmod>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4613      	mov	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	e04a      	b.n	800469c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004606:	4b31      	ldr	r3, [pc, #196]	; (80046cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	099b      	lsrs	r3, r3, #6
 800460c:	461a      	mov	r2, r3
 800460e:	f04f 0300 	mov.w	r3, #0
 8004612:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004616:	f04f 0100 	mov.w	r1, #0
 800461a:	ea02 0400 	and.w	r4, r2, r0
 800461e:	ea03 0501 	and.w	r5, r3, r1
 8004622:	4620      	mov	r0, r4
 8004624:	4629      	mov	r1, r5
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	014b      	lsls	r3, r1, #5
 8004630:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004634:	0142      	lsls	r2, r0, #5
 8004636:	4610      	mov	r0, r2
 8004638:	4619      	mov	r1, r3
 800463a:	1b00      	subs	r0, r0, r4
 800463c:	eb61 0105 	sbc.w	r1, r1, r5
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	f04f 0300 	mov.w	r3, #0
 8004648:	018b      	lsls	r3, r1, #6
 800464a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800464e:	0182      	lsls	r2, r0, #6
 8004650:	1a12      	subs	r2, r2, r0
 8004652:	eb63 0301 	sbc.w	r3, r3, r1
 8004656:	f04f 0000 	mov.w	r0, #0
 800465a:	f04f 0100 	mov.w	r1, #0
 800465e:	00d9      	lsls	r1, r3, #3
 8004660:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004664:	00d0      	lsls	r0, r2, #3
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	1912      	adds	r2, r2, r4
 800466c:	eb45 0303 	adc.w	r3, r5, r3
 8004670:	f04f 0000 	mov.w	r0, #0
 8004674:	f04f 0100 	mov.w	r1, #0
 8004678:	0299      	lsls	r1, r3, #10
 800467a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800467e:	0290      	lsls	r0, r2, #10
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4610      	mov	r0, r2
 8004686:	4619      	mov	r1, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	461a      	mov	r2, r3
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	f7fc fa8a 	bl	8000ba8 <__aeabi_uldivmod>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4613      	mov	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800469c:	4b0b      	ldr	r3, [pc, #44]	; (80046cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	0c1b      	lsrs	r3, r3, #16
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	3301      	adds	r3, #1
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b4:	60bb      	str	r3, [r7, #8]
      break;
 80046b6:	e002      	b.n	80046be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046b8:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80046ba:	60bb      	str	r3, [r7, #8]
      break;
 80046bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046be:	68bb      	ldr	r3, [r7, #8]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80046ca:	bf00      	nop
 80046cc:	40023800 	.word	0x40023800
 80046d0:	00f42400 	.word	0x00f42400
 80046d4:	007a1200 	.word	0x007a1200

080046d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046dc:	4b03      	ldr	r3, [pc, #12]	; (80046ec <HAL_RCC_GetHCLKFreq+0x14>)
 80046de:	681b      	ldr	r3, [r3, #0]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	20000000 	.word	0x20000000

080046f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046f4:	f7ff fff0 	bl	80046d8 <HAL_RCC_GetHCLKFreq>
 80046f8:	4602      	mov	r2, r0
 80046fa:	4b05      	ldr	r3, [pc, #20]	; (8004710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	0a9b      	lsrs	r3, r3, #10
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	4903      	ldr	r1, [pc, #12]	; (8004714 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004706:	5ccb      	ldrb	r3, [r1, r3]
 8004708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800470c:	4618      	mov	r0, r3
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40023800 	.word	0x40023800
 8004714:	08007188 	.word	0x08007188

08004718 <__errno>:
 8004718:	4b01      	ldr	r3, [pc, #4]	; (8004720 <__errno+0x8>)
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	2000000c 	.word	0x2000000c

08004724 <__libc_init_array>:
 8004724:	b570      	push	{r4, r5, r6, lr}
 8004726:	4d0d      	ldr	r5, [pc, #52]	; (800475c <__libc_init_array+0x38>)
 8004728:	4c0d      	ldr	r4, [pc, #52]	; (8004760 <__libc_init_array+0x3c>)
 800472a:	1b64      	subs	r4, r4, r5
 800472c:	10a4      	asrs	r4, r4, #2
 800472e:	2600      	movs	r6, #0
 8004730:	42a6      	cmp	r6, r4
 8004732:	d109      	bne.n	8004748 <__libc_init_array+0x24>
 8004734:	4d0b      	ldr	r5, [pc, #44]	; (8004764 <__libc_init_array+0x40>)
 8004736:	4c0c      	ldr	r4, [pc, #48]	; (8004768 <__libc_init_array+0x44>)
 8004738:	f002 fd08 	bl	800714c <_init>
 800473c:	1b64      	subs	r4, r4, r5
 800473e:	10a4      	asrs	r4, r4, #2
 8004740:	2600      	movs	r6, #0
 8004742:	42a6      	cmp	r6, r4
 8004744:	d105      	bne.n	8004752 <__libc_init_array+0x2e>
 8004746:	bd70      	pop	{r4, r5, r6, pc}
 8004748:	f855 3b04 	ldr.w	r3, [r5], #4
 800474c:	4798      	blx	r3
 800474e:	3601      	adds	r6, #1
 8004750:	e7ee      	b.n	8004730 <__libc_init_array+0xc>
 8004752:	f855 3b04 	ldr.w	r3, [r5], #4
 8004756:	4798      	blx	r3
 8004758:	3601      	adds	r6, #1
 800475a:	e7f2      	b.n	8004742 <__libc_init_array+0x1e>
 800475c:	0800757c 	.word	0x0800757c
 8004760:	0800757c 	.word	0x0800757c
 8004764:	0800757c 	.word	0x0800757c
 8004768:	08007580 	.word	0x08007580

0800476c <memset>:
 800476c:	4402      	add	r2, r0
 800476e:	4603      	mov	r3, r0
 8004770:	4293      	cmp	r3, r2
 8004772:	d100      	bne.n	8004776 <memset+0xa>
 8004774:	4770      	bx	lr
 8004776:	f803 1b01 	strb.w	r1, [r3], #1
 800477a:	e7f9      	b.n	8004770 <memset+0x4>

0800477c <__cvt>:
 800477c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004780:	ec55 4b10 	vmov	r4, r5, d0
 8004784:	2d00      	cmp	r5, #0
 8004786:	460e      	mov	r6, r1
 8004788:	4619      	mov	r1, r3
 800478a:	462b      	mov	r3, r5
 800478c:	bfbb      	ittet	lt
 800478e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004792:	461d      	movlt	r5, r3
 8004794:	2300      	movge	r3, #0
 8004796:	232d      	movlt	r3, #45	; 0x2d
 8004798:	700b      	strb	r3, [r1, #0]
 800479a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800479c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80047a0:	4691      	mov	r9, r2
 80047a2:	f023 0820 	bic.w	r8, r3, #32
 80047a6:	bfbc      	itt	lt
 80047a8:	4622      	movlt	r2, r4
 80047aa:	4614      	movlt	r4, r2
 80047ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80047b0:	d005      	beq.n	80047be <__cvt+0x42>
 80047b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80047b6:	d100      	bne.n	80047ba <__cvt+0x3e>
 80047b8:	3601      	adds	r6, #1
 80047ba:	2102      	movs	r1, #2
 80047bc:	e000      	b.n	80047c0 <__cvt+0x44>
 80047be:	2103      	movs	r1, #3
 80047c0:	ab03      	add	r3, sp, #12
 80047c2:	9301      	str	r3, [sp, #4]
 80047c4:	ab02      	add	r3, sp, #8
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	ec45 4b10 	vmov	d0, r4, r5
 80047cc:	4653      	mov	r3, sl
 80047ce:	4632      	mov	r2, r6
 80047d0:	f000 fce2 	bl	8005198 <_dtoa_r>
 80047d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80047d8:	4607      	mov	r7, r0
 80047da:	d102      	bne.n	80047e2 <__cvt+0x66>
 80047dc:	f019 0f01 	tst.w	r9, #1
 80047e0:	d022      	beq.n	8004828 <__cvt+0xac>
 80047e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80047e6:	eb07 0906 	add.w	r9, r7, r6
 80047ea:	d110      	bne.n	800480e <__cvt+0x92>
 80047ec:	783b      	ldrb	r3, [r7, #0]
 80047ee:	2b30      	cmp	r3, #48	; 0x30
 80047f0:	d10a      	bne.n	8004808 <__cvt+0x8c>
 80047f2:	2200      	movs	r2, #0
 80047f4:	2300      	movs	r3, #0
 80047f6:	4620      	mov	r0, r4
 80047f8:	4629      	mov	r1, r5
 80047fa:	f7fc f965 	bl	8000ac8 <__aeabi_dcmpeq>
 80047fe:	b918      	cbnz	r0, 8004808 <__cvt+0x8c>
 8004800:	f1c6 0601 	rsb	r6, r6, #1
 8004804:	f8ca 6000 	str.w	r6, [sl]
 8004808:	f8da 3000 	ldr.w	r3, [sl]
 800480c:	4499      	add	r9, r3
 800480e:	2200      	movs	r2, #0
 8004810:	2300      	movs	r3, #0
 8004812:	4620      	mov	r0, r4
 8004814:	4629      	mov	r1, r5
 8004816:	f7fc f957 	bl	8000ac8 <__aeabi_dcmpeq>
 800481a:	b108      	cbz	r0, 8004820 <__cvt+0xa4>
 800481c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004820:	2230      	movs	r2, #48	; 0x30
 8004822:	9b03      	ldr	r3, [sp, #12]
 8004824:	454b      	cmp	r3, r9
 8004826:	d307      	bcc.n	8004838 <__cvt+0xbc>
 8004828:	9b03      	ldr	r3, [sp, #12]
 800482a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800482c:	1bdb      	subs	r3, r3, r7
 800482e:	4638      	mov	r0, r7
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	b004      	add	sp, #16
 8004834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004838:	1c59      	adds	r1, r3, #1
 800483a:	9103      	str	r1, [sp, #12]
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	e7f0      	b.n	8004822 <__cvt+0xa6>

08004840 <__exponent>:
 8004840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004842:	4603      	mov	r3, r0
 8004844:	2900      	cmp	r1, #0
 8004846:	bfb8      	it	lt
 8004848:	4249      	neglt	r1, r1
 800484a:	f803 2b02 	strb.w	r2, [r3], #2
 800484e:	bfb4      	ite	lt
 8004850:	222d      	movlt	r2, #45	; 0x2d
 8004852:	222b      	movge	r2, #43	; 0x2b
 8004854:	2909      	cmp	r1, #9
 8004856:	7042      	strb	r2, [r0, #1]
 8004858:	dd2a      	ble.n	80048b0 <__exponent+0x70>
 800485a:	f10d 0407 	add.w	r4, sp, #7
 800485e:	46a4      	mov	ip, r4
 8004860:	270a      	movs	r7, #10
 8004862:	46a6      	mov	lr, r4
 8004864:	460a      	mov	r2, r1
 8004866:	fb91 f6f7 	sdiv	r6, r1, r7
 800486a:	fb07 1516 	mls	r5, r7, r6, r1
 800486e:	3530      	adds	r5, #48	; 0x30
 8004870:	2a63      	cmp	r2, #99	; 0x63
 8004872:	f104 34ff 	add.w	r4, r4, #4294967295
 8004876:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800487a:	4631      	mov	r1, r6
 800487c:	dcf1      	bgt.n	8004862 <__exponent+0x22>
 800487e:	3130      	adds	r1, #48	; 0x30
 8004880:	f1ae 0502 	sub.w	r5, lr, #2
 8004884:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004888:	1c44      	adds	r4, r0, #1
 800488a:	4629      	mov	r1, r5
 800488c:	4561      	cmp	r1, ip
 800488e:	d30a      	bcc.n	80048a6 <__exponent+0x66>
 8004890:	f10d 0209 	add.w	r2, sp, #9
 8004894:	eba2 020e 	sub.w	r2, r2, lr
 8004898:	4565      	cmp	r5, ip
 800489a:	bf88      	it	hi
 800489c:	2200      	movhi	r2, #0
 800489e:	4413      	add	r3, r2
 80048a0:	1a18      	subs	r0, r3, r0
 80048a2:	b003      	add	sp, #12
 80048a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048aa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80048ae:	e7ed      	b.n	800488c <__exponent+0x4c>
 80048b0:	2330      	movs	r3, #48	; 0x30
 80048b2:	3130      	adds	r1, #48	; 0x30
 80048b4:	7083      	strb	r3, [r0, #2]
 80048b6:	70c1      	strb	r1, [r0, #3]
 80048b8:	1d03      	adds	r3, r0, #4
 80048ba:	e7f1      	b.n	80048a0 <__exponent+0x60>

080048bc <_printf_float>:
 80048bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c0:	ed2d 8b02 	vpush	{d8}
 80048c4:	b08d      	sub	sp, #52	; 0x34
 80048c6:	460c      	mov	r4, r1
 80048c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80048cc:	4616      	mov	r6, r2
 80048ce:	461f      	mov	r7, r3
 80048d0:	4605      	mov	r5, r0
 80048d2:	f001 fb43 	bl	8005f5c <_localeconv_r>
 80048d6:	f8d0 a000 	ldr.w	sl, [r0]
 80048da:	4650      	mov	r0, sl
 80048dc:	f7fb fc78 	bl	80001d0 <strlen>
 80048e0:	2300      	movs	r3, #0
 80048e2:	930a      	str	r3, [sp, #40]	; 0x28
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	9305      	str	r3, [sp, #20]
 80048e8:	f8d8 3000 	ldr.w	r3, [r8]
 80048ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80048f0:	3307      	adds	r3, #7
 80048f2:	f023 0307 	bic.w	r3, r3, #7
 80048f6:	f103 0208 	add.w	r2, r3, #8
 80048fa:	f8c8 2000 	str.w	r2, [r8]
 80048fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004902:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004906:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800490a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800490e:	9307      	str	r3, [sp, #28]
 8004910:	f8cd 8018 	str.w	r8, [sp, #24]
 8004914:	ee08 0a10 	vmov	s16, r0
 8004918:	4b9f      	ldr	r3, [pc, #636]	; (8004b98 <_printf_float+0x2dc>)
 800491a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800491e:	f04f 32ff 	mov.w	r2, #4294967295
 8004922:	f7fc f903 	bl	8000b2c <__aeabi_dcmpun>
 8004926:	bb88      	cbnz	r0, 800498c <_printf_float+0xd0>
 8004928:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800492c:	4b9a      	ldr	r3, [pc, #616]	; (8004b98 <_printf_float+0x2dc>)
 800492e:	f04f 32ff 	mov.w	r2, #4294967295
 8004932:	f7fc f8dd 	bl	8000af0 <__aeabi_dcmple>
 8004936:	bb48      	cbnz	r0, 800498c <_printf_float+0xd0>
 8004938:	2200      	movs	r2, #0
 800493a:	2300      	movs	r3, #0
 800493c:	4640      	mov	r0, r8
 800493e:	4649      	mov	r1, r9
 8004940:	f7fc f8cc 	bl	8000adc <__aeabi_dcmplt>
 8004944:	b110      	cbz	r0, 800494c <_printf_float+0x90>
 8004946:	232d      	movs	r3, #45	; 0x2d
 8004948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800494c:	4b93      	ldr	r3, [pc, #588]	; (8004b9c <_printf_float+0x2e0>)
 800494e:	4894      	ldr	r0, [pc, #592]	; (8004ba0 <_printf_float+0x2e4>)
 8004950:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004954:	bf94      	ite	ls
 8004956:	4698      	movls	r8, r3
 8004958:	4680      	movhi	r8, r0
 800495a:	2303      	movs	r3, #3
 800495c:	6123      	str	r3, [r4, #16]
 800495e:	9b05      	ldr	r3, [sp, #20]
 8004960:	f023 0204 	bic.w	r2, r3, #4
 8004964:	6022      	str	r2, [r4, #0]
 8004966:	f04f 0900 	mov.w	r9, #0
 800496a:	9700      	str	r7, [sp, #0]
 800496c:	4633      	mov	r3, r6
 800496e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004970:	4621      	mov	r1, r4
 8004972:	4628      	mov	r0, r5
 8004974:	f000 f9d8 	bl	8004d28 <_printf_common>
 8004978:	3001      	adds	r0, #1
 800497a:	f040 8090 	bne.w	8004a9e <_printf_float+0x1e2>
 800497e:	f04f 30ff 	mov.w	r0, #4294967295
 8004982:	b00d      	add	sp, #52	; 0x34
 8004984:	ecbd 8b02 	vpop	{d8}
 8004988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800498c:	4642      	mov	r2, r8
 800498e:	464b      	mov	r3, r9
 8004990:	4640      	mov	r0, r8
 8004992:	4649      	mov	r1, r9
 8004994:	f7fc f8ca 	bl	8000b2c <__aeabi_dcmpun>
 8004998:	b140      	cbz	r0, 80049ac <_printf_float+0xf0>
 800499a:	464b      	mov	r3, r9
 800499c:	2b00      	cmp	r3, #0
 800499e:	bfbc      	itt	lt
 80049a0:	232d      	movlt	r3, #45	; 0x2d
 80049a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80049a6:	487f      	ldr	r0, [pc, #508]	; (8004ba4 <_printf_float+0x2e8>)
 80049a8:	4b7f      	ldr	r3, [pc, #508]	; (8004ba8 <_printf_float+0x2ec>)
 80049aa:	e7d1      	b.n	8004950 <_printf_float+0x94>
 80049ac:	6863      	ldr	r3, [r4, #4]
 80049ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80049b2:	9206      	str	r2, [sp, #24]
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	d13f      	bne.n	8004a38 <_printf_float+0x17c>
 80049b8:	2306      	movs	r3, #6
 80049ba:	6063      	str	r3, [r4, #4]
 80049bc:	9b05      	ldr	r3, [sp, #20]
 80049be:	6861      	ldr	r1, [r4, #4]
 80049c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80049c4:	2300      	movs	r3, #0
 80049c6:	9303      	str	r3, [sp, #12]
 80049c8:	ab0a      	add	r3, sp, #40	; 0x28
 80049ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 80049ce:	ab09      	add	r3, sp, #36	; 0x24
 80049d0:	ec49 8b10 	vmov	d0, r8, r9
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	6022      	str	r2, [r4, #0]
 80049d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80049dc:	4628      	mov	r0, r5
 80049de:	f7ff fecd 	bl	800477c <__cvt>
 80049e2:	9b06      	ldr	r3, [sp, #24]
 80049e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049e6:	2b47      	cmp	r3, #71	; 0x47
 80049e8:	4680      	mov	r8, r0
 80049ea:	d108      	bne.n	80049fe <_printf_float+0x142>
 80049ec:	1cc8      	adds	r0, r1, #3
 80049ee:	db02      	blt.n	80049f6 <_printf_float+0x13a>
 80049f0:	6863      	ldr	r3, [r4, #4]
 80049f2:	4299      	cmp	r1, r3
 80049f4:	dd41      	ble.n	8004a7a <_printf_float+0x1be>
 80049f6:	f1ab 0b02 	sub.w	fp, fp, #2
 80049fa:	fa5f fb8b 	uxtb.w	fp, fp
 80049fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a02:	d820      	bhi.n	8004a46 <_printf_float+0x18a>
 8004a04:	3901      	subs	r1, #1
 8004a06:	465a      	mov	r2, fp
 8004a08:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a0c:	9109      	str	r1, [sp, #36]	; 0x24
 8004a0e:	f7ff ff17 	bl	8004840 <__exponent>
 8004a12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a14:	1813      	adds	r3, r2, r0
 8004a16:	2a01      	cmp	r2, #1
 8004a18:	4681      	mov	r9, r0
 8004a1a:	6123      	str	r3, [r4, #16]
 8004a1c:	dc02      	bgt.n	8004a24 <_printf_float+0x168>
 8004a1e:	6822      	ldr	r2, [r4, #0]
 8004a20:	07d2      	lsls	r2, r2, #31
 8004a22:	d501      	bpl.n	8004a28 <_printf_float+0x16c>
 8004a24:	3301      	adds	r3, #1
 8004a26:	6123      	str	r3, [r4, #16]
 8004a28:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d09c      	beq.n	800496a <_printf_float+0xae>
 8004a30:	232d      	movs	r3, #45	; 0x2d
 8004a32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a36:	e798      	b.n	800496a <_printf_float+0xae>
 8004a38:	9a06      	ldr	r2, [sp, #24]
 8004a3a:	2a47      	cmp	r2, #71	; 0x47
 8004a3c:	d1be      	bne.n	80049bc <_printf_float+0x100>
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1bc      	bne.n	80049bc <_printf_float+0x100>
 8004a42:	2301      	movs	r3, #1
 8004a44:	e7b9      	b.n	80049ba <_printf_float+0xfe>
 8004a46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004a4a:	d118      	bne.n	8004a7e <_printf_float+0x1c2>
 8004a4c:	2900      	cmp	r1, #0
 8004a4e:	6863      	ldr	r3, [r4, #4]
 8004a50:	dd0b      	ble.n	8004a6a <_printf_float+0x1ae>
 8004a52:	6121      	str	r1, [r4, #16]
 8004a54:	b913      	cbnz	r3, 8004a5c <_printf_float+0x1a0>
 8004a56:	6822      	ldr	r2, [r4, #0]
 8004a58:	07d0      	lsls	r0, r2, #31
 8004a5a:	d502      	bpl.n	8004a62 <_printf_float+0x1a6>
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	440b      	add	r3, r1
 8004a60:	6123      	str	r3, [r4, #16]
 8004a62:	65a1      	str	r1, [r4, #88]	; 0x58
 8004a64:	f04f 0900 	mov.w	r9, #0
 8004a68:	e7de      	b.n	8004a28 <_printf_float+0x16c>
 8004a6a:	b913      	cbnz	r3, 8004a72 <_printf_float+0x1b6>
 8004a6c:	6822      	ldr	r2, [r4, #0]
 8004a6e:	07d2      	lsls	r2, r2, #31
 8004a70:	d501      	bpl.n	8004a76 <_printf_float+0x1ba>
 8004a72:	3302      	adds	r3, #2
 8004a74:	e7f4      	b.n	8004a60 <_printf_float+0x1a4>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e7f2      	b.n	8004a60 <_printf_float+0x1a4>
 8004a7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a80:	4299      	cmp	r1, r3
 8004a82:	db05      	blt.n	8004a90 <_printf_float+0x1d4>
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	6121      	str	r1, [r4, #16]
 8004a88:	07d8      	lsls	r0, r3, #31
 8004a8a:	d5ea      	bpl.n	8004a62 <_printf_float+0x1a6>
 8004a8c:	1c4b      	adds	r3, r1, #1
 8004a8e:	e7e7      	b.n	8004a60 <_printf_float+0x1a4>
 8004a90:	2900      	cmp	r1, #0
 8004a92:	bfd4      	ite	le
 8004a94:	f1c1 0202 	rsble	r2, r1, #2
 8004a98:	2201      	movgt	r2, #1
 8004a9a:	4413      	add	r3, r2
 8004a9c:	e7e0      	b.n	8004a60 <_printf_float+0x1a4>
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	055a      	lsls	r2, r3, #21
 8004aa2:	d407      	bmi.n	8004ab4 <_printf_float+0x1f8>
 8004aa4:	6923      	ldr	r3, [r4, #16]
 8004aa6:	4642      	mov	r2, r8
 8004aa8:	4631      	mov	r1, r6
 8004aaa:	4628      	mov	r0, r5
 8004aac:	47b8      	blx	r7
 8004aae:	3001      	adds	r0, #1
 8004ab0:	d12c      	bne.n	8004b0c <_printf_float+0x250>
 8004ab2:	e764      	b.n	800497e <_printf_float+0xc2>
 8004ab4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004ab8:	f240 80e0 	bls.w	8004c7c <_printf_float+0x3c0>
 8004abc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f7fc f800 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	d034      	beq.n	8004b36 <_printf_float+0x27a>
 8004acc:	4a37      	ldr	r2, [pc, #220]	; (8004bac <_printf_float+0x2f0>)
 8004ace:	2301      	movs	r3, #1
 8004ad0:	4631      	mov	r1, r6
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	47b8      	blx	r7
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	f43f af51 	beq.w	800497e <_printf_float+0xc2>
 8004adc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	db02      	blt.n	8004aea <_printf_float+0x22e>
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	07d8      	lsls	r0, r3, #31
 8004ae8:	d510      	bpl.n	8004b0c <_printf_float+0x250>
 8004aea:	ee18 3a10 	vmov	r3, s16
 8004aee:	4652      	mov	r2, sl
 8004af0:	4631      	mov	r1, r6
 8004af2:	4628      	mov	r0, r5
 8004af4:	47b8      	blx	r7
 8004af6:	3001      	adds	r0, #1
 8004af8:	f43f af41 	beq.w	800497e <_printf_float+0xc2>
 8004afc:	f04f 0800 	mov.w	r8, #0
 8004b00:	f104 091a 	add.w	r9, r4, #26
 8004b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b06:	3b01      	subs	r3, #1
 8004b08:	4543      	cmp	r3, r8
 8004b0a:	dc09      	bgt.n	8004b20 <_printf_float+0x264>
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	079b      	lsls	r3, r3, #30
 8004b10:	f100 8105 	bmi.w	8004d1e <_printf_float+0x462>
 8004b14:	68e0      	ldr	r0, [r4, #12]
 8004b16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b18:	4298      	cmp	r0, r3
 8004b1a:	bfb8      	it	lt
 8004b1c:	4618      	movlt	r0, r3
 8004b1e:	e730      	b.n	8004982 <_printf_float+0xc6>
 8004b20:	2301      	movs	r3, #1
 8004b22:	464a      	mov	r2, r9
 8004b24:	4631      	mov	r1, r6
 8004b26:	4628      	mov	r0, r5
 8004b28:	47b8      	blx	r7
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	f43f af27 	beq.w	800497e <_printf_float+0xc2>
 8004b30:	f108 0801 	add.w	r8, r8, #1
 8004b34:	e7e6      	b.n	8004b04 <_printf_float+0x248>
 8004b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	dc39      	bgt.n	8004bb0 <_printf_float+0x2f4>
 8004b3c:	4a1b      	ldr	r2, [pc, #108]	; (8004bac <_printf_float+0x2f0>)
 8004b3e:	2301      	movs	r3, #1
 8004b40:	4631      	mov	r1, r6
 8004b42:	4628      	mov	r0, r5
 8004b44:	47b8      	blx	r7
 8004b46:	3001      	adds	r0, #1
 8004b48:	f43f af19 	beq.w	800497e <_printf_float+0xc2>
 8004b4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b50:	4313      	orrs	r3, r2
 8004b52:	d102      	bne.n	8004b5a <_printf_float+0x29e>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	07d9      	lsls	r1, r3, #31
 8004b58:	d5d8      	bpl.n	8004b0c <_printf_float+0x250>
 8004b5a:	ee18 3a10 	vmov	r3, s16
 8004b5e:	4652      	mov	r2, sl
 8004b60:	4631      	mov	r1, r6
 8004b62:	4628      	mov	r0, r5
 8004b64:	47b8      	blx	r7
 8004b66:	3001      	adds	r0, #1
 8004b68:	f43f af09 	beq.w	800497e <_printf_float+0xc2>
 8004b6c:	f04f 0900 	mov.w	r9, #0
 8004b70:	f104 0a1a 	add.w	sl, r4, #26
 8004b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b76:	425b      	negs	r3, r3
 8004b78:	454b      	cmp	r3, r9
 8004b7a:	dc01      	bgt.n	8004b80 <_printf_float+0x2c4>
 8004b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b7e:	e792      	b.n	8004aa6 <_printf_float+0x1ea>
 8004b80:	2301      	movs	r3, #1
 8004b82:	4652      	mov	r2, sl
 8004b84:	4631      	mov	r1, r6
 8004b86:	4628      	mov	r0, r5
 8004b88:	47b8      	blx	r7
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	f43f aef7 	beq.w	800497e <_printf_float+0xc2>
 8004b90:	f109 0901 	add.w	r9, r9, #1
 8004b94:	e7ee      	b.n	8004b74 <_printf_float+0x2b8>
 8004b96:	bf00      	nop
 8004b98:	7fefffff 	.word	0x7fefffff
 8004b9c:	08007194 	.word	0x08007194
 8004ba0:	08007198 	.word	0x08007198
 8004ba4:	080071a0 	.word	0x080071a0
 8004ba8:	0800719c 	.word	0x0800719c
 8004bac:	080071a4 	.word	0x080071a4
 8004bb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	bfa8      	it	ge
 8004bb8:	461a      	movge	r2, r3
 8004bba:	2a00      	cmp	r2, #0
 8004bbc:	4691      	mov	r9, r2
 8004bbe:	dc37      	bgt.n	8004c30 <_printf_float+0x374>
 8004bc0:	f04f 0b00 	mov.w	fp, #0
 8004bc4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bc8:	f104 021a 	add.w	r2, r4, #26
 8004bcc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bce:	9305      	str	r3, [sp, #20]
 8004bd0:	eba3 0309 	sub.w	r3, r3, r9
 8004bd4:	455b      	cmp	r3, fp
 8004bd6:	dc33      	bgt.n	8004c40 <_printf_float+0x384>
 8004bd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	db3b      	blt.n	8004c58 <_printf_float+0x39c>
 8004be0:	6823      	ldr	r3, [r4, #0]
 8004be2:	07da      	lsls	r2, r3, #31
 8004be4:	d438      	bmi.n	8004c58 <_printf_float+0x39c>
 8004be6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004be8:	9b05      	ldr	r3, [sp, #20]
 8004bea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	eba2 0901 	sub.w	r9, r2, r1
 8004bf2:	4599      	cmp	r9, r3
 8004bf4:	bfa8      	it	ge
 8004bf6:	4699      	movge	r9, r3
 8004bf8:	f1b9 0f00 	cmp.w	r9, #0
 8004bfc:	dc35      	bgt.n	8004c6a <_printf_float+0x3ae>
 8004bfe:	f04f 0800 	mov.w	r8, #0
 8004c02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c06:	f104 0a1a 	add.w	sl, r4, #26
 8004c0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c0e:	1a9b      	subs	r3, r3, r2
 8004c10:	eba3 0309 	sub.w	r3, r3, r9
 8004c14:	4543      	cmp	r3, r8
 8004c16:	f77f af79 	ble.w	8004b0c <_printf_float+0x250>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	4652      	mov	r2, sl
 8004c1e:	4631      	mov	r1, r6
 8004c20:	4628      	mov	r0, r5
 8004c22:	47b8      	blx	r7
 8004c24:	3001      	adds	r0, #1
 8004c26:	f43f aeaa 	beq.w	800497e <_printf_float+0xc2>
 8004c2a:	f108 0801 	add.w	r8, r8, #1
 8004c2e:	e7ec      	b.n	8004c0a <_printf_float+0x34e>
 8004c30:	4613      	mov	r3, r2
 8004c32:	4631      	mov	r1, r6
 8004c34:	4642      	mov	r2, r8
 8004c36:	4628      	mov	r0, r5
 8004c38:	47b8      	blx	r7
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	d1c0      	bne.n	8004bc0 <_printf_float+0x304>
 8004c3e:	e69e      	b.n	800497e <_printf_float+0xc2>
 8004c40:	2301      	movs	r3, #1
 8004c42:	4631      	mov	r1, r6
 8004c44:	4628      	mov	r0, r5
 8004c46:	9205      	str	r2, [sp, #20]
 8004c48:	47b8      	blx	r7
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	f43f ae97 	beq.w	800497e <_printf_float+0xc2>
 8004c50:	9a05      	ldr	r2, [sp, #20]
 8004c52:	f10b 0b01 	add.w	fp, fp, #1
 8004c56:	e7b9      	b.n	8004bcc <_printf_float+0x310>
 8004c58:	ee18 3a10 	vmov	r3, s16
 8004c5c:	4652      	mov	r2, sl
 8004c5e:	4631      	mov	r1, r6
 8004c60:	4628      	mov	r0, r5
 8004c62:	47b8      	blx	r7
 8004c64:	3001      	adds	r0, #1
 8004c66:	d1be      	bne.n	8004be6 <_printf_float+0x32a>
 8004c68:	e689      	b.n	800497e <_printf_float+0xc2>
 8004c6a:	9a05      	ldr	r2, [sp, #20]
 8004c6c:	464b      	mov	r3, r9
 8004c6e:	4442      	add	r2, r8
 8004c70:	4631      	mov	r1, r6
 8004c72:	4628      	mov	r0, r5
 8004c74:	47b8      	blx	r7
 8004c76:	3001      	adds	r0, #1
 8004c78:	d1c1      	bne.n	8004bfe <_printf_float+0x342>
 8004c7a:	e680      	b.n	800497e <_printf_float+0xc2>
 8004c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c7e:	2a01      	cmp	r2, #1
 8004c80:	dc01      	bgt.n	8004c86 <_printf_float+0x3ca>
 8004c82:	07db      	lsls	r3, r3, #31
 8004c84:	d538      	bpl.n	8004cf8 <_printf_float+0x43c>
 8004c86:	2301      	movs	r3, #1
 8004c88:	4642      	mov	r2, r8
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	47b8      	blx	r7
 8004c90:	3001      	adds	r0, #1
 8004c92:	f43f ae74 	beq.w	800497e <_printf_float+0xc2>
 8004c96:	ee18 3a10 	vmov	r3, s16
 8004c9a:	4652      	mov	r2, sl
 8004c9c:	4631      	mov	r1, r6
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	47b8      	blx	r7
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	f43f ae6b 	beq.w	800497e <_printf_float+0xc2>
 8004ca8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cac:	2200      	movs	r2, #0
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f7fb ff0a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cb4:	b9d8      	cbnz	r0, 8004cee <_printf_float+0x432>
 8004cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cb8:	f108 0201 	add.w	r2, r8, #1
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	4631      	mov	r1, r6
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	47b8      	blx	r7
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	d10e      	bne.n	8004ce6 <_printf_float+0x42a>
 8004cc8:	e659      	b.n	800497e <_printf_float+0xc2>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	4652      	mov	r2, sl
 8004cce:	4631      	mov	r1, r6
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	47b8      	blx	r7
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	f43f ae52 	beq.w	800497e <_printf_float+0xc2>
 8004cda:	f108 0801 	add.w	r8, r8, #1
 8004cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	4543      	cmp	r3, r8
 8004ce4:	dcf1      	bgt.n	8004cca <_printf_float+0x40e>
 8004ce6:	464b      	mov	r3, r9
 8004ce8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004cec:	e6dc      	b.n	8004aa8 <_printf_float+0x1ec>
 8004cee:	f04f 0800 	mov.w	r8, #0
 8004cf2:	f104 0a1a 	add.w	sl, r4, #26
 8004cf6:	e7f2      	b.n	8004cde <_printf_float+0x422>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	4642      	mov	r2, r8
 8004cfc:	e7df      	b.n	8004cbe <_printf_float+0x402>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	464a      	mov	r2, r9
 8004d02:	4631      	mov	r1, r6
 8004d04:	4628      	mov	r0, r5
 8004d06:	47b8      	blx	r7
 8004d08:	3001      	adds	r0, #1
 8004d0a:	f43f ae38 	beq.w	800497e <_printf_float+0xc2>
 8004d0e:	f108 0801 	add.w	r8, r8, #1
 8004d12:	68e3      	ldr	r3, [r4, #12]
 8004d14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d16:	1a5b      	subs	r3, r3, r1
 8004d18:	4543      	cmp	r3, r8
 8004d1a:	dcf0      	bgt.n	8004cfe <_printf_float+0x442>
 8004d1c:	e6fa      	b.n	8004b14 <_printf_float+0x258>
 8004d1e:	f04f 0800 	mov.w	r8, #0
 8004d22:	f104 0919 	add.w	r9, r4, #25
 8004d26:	e7f4      	b.n	8004d12 <_printf_float+0x456>

08004d28 <_printf_common>:
 8004d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d2c:	4616      	mov	r6, r2
 8004d2e:	4699      	mov	r9, r3
 8004d30:	688a      	ldr	r2, [r1, #8]
 8004d32:	690b      	ldr	r3, [r1, #16]
 8004d34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	bfb8      	it	lt
 8004d3c:	4613      	movlt	r3, r2
 8004d3e:	6033      	str	r3, [r6, #0]
 8004d40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d44:	4607      	mov	r7, r0
 8004d46:	460c      	mov	r4, r1
 8004d48:	b10a      	cbz	r2, 8004d4e <_printf_common+0x26>
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	6033      	str	r3, [r6, #0]
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	0699      	lsls	r1, r3, #26
 8004d52:	bf42      	ittt	mi
 8004d54:	6833      	ldrmi	r3, [r6, #0]
 8004d56:	3302      	addmi	r3, #2
 8004d58:	6033      	strmi	r3, [r6, #0]
 8004d5a:	6825      	ldr	r5, [r4, #0]
 8004d5c:	f015 0506 	ands.w	r5, r5, #6
 8004d60:	d106      	bne.n	8004d70 <_printf_common+0x48>
 8004d62:	f104 0a19 	add.w	sl, r4, #25
 8004d66:	68e3      	ldr	r3, [r4, #12]
 8004d68:	6832      	ldr	r2, [r6, #0]
 8004d6a:	1a9b      	subs	r3, r3, r2
 8004d6c:	42ab      	cmp	r3, r5
 8004d6e:	dc26      	bgt.n	8004dbe <_printf_common+0x96>
 8004d70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d74:	1e13      	subs	r3, r2, #0
 8004d76:	6822      	ldr	r2, [r4, #0]
 8004d78:	bf18      	it	ne
 8004d7a:	2301      	movne	r3, #1
 8004d7c:	0692      	lsls	r2, r2, #26
 8004d7e:	d42b      	bmi.n	8004dd8 <_printf_common+0xb0>
 8004d80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d84:	4649      	mov	r1, r9
 8004d86:	4638      	mov	r0, r7
 8004d88:	47c0      	blx	r8
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	d01e      	beq.n	8004dcc <_printf_common+0xa4>
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	68e5      	ldr	r5, [r4, #12]
 8004d92:	6832      	ldr	r2, [r6, #0]
 8004d94:	f003 0306 	and.w	r3, r3, #6
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	bf08      	it	eq
 8004d9c:	1aad      	subeq	r5, r5, r2
 8004d9e:	68a3      	ldr	r3, [r4, #8]
 8004da0:	6922      	ldr	r2, [r4, #16]
 8004da2:	bf0c      	ite	eq
 8004da4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004da8:	2500      	movne	r5, #0
 8004daa:	4293      	cmp	r3, r2
 8004dac:	bfc4      	itt	gt
 8004dae:	1a9b      	subgt	r3, r3, r2
 8004db0:	18ed      	addgt	r5, r5, r3
 8004db2:	2600      	movs	r6, #0
 8004db4:	341a      	adds	r4, #26
 8004db6:	42b5      	cmp	r5, r6
 8004db8:	d11a      	bne.n	8004df0 <_printf_common+0xc8>
 8004dba:	2000      	movs	r0, #0
 8004dbc:	e008      	b.n	8004dd0 <_printf_common+0xa8>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	4652      	mov	r2, sl
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	4638      	mov	r0, r7
 8004dc6:	47c0      	blx	r8
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d103      	bne.n	8004dd4 <_printf_common+0xac>
 8004dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd4:	3501      	adds	r5, #1
 8004dd6:	e7c6      	b.n	8004d66 <_printf_common+0x3e>
 8004dd8:	18e1      	adds	r1, r4, r3
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	2030      	movs	r0, #48	; 0x30
 8004dde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004de2:	4422      	add	r2, r4
 8004de4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004de8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004dec:	3302      	adds	r3, #2
 8004dee:	e7c7      	b.n	8004d80 <_printf_common+0x58>
 8004df0:	2301      	movs	r3, #1
 8004df2:	4622      	mov	r2, r4
 8004df4:	4649      	mov	r1, r9
 8004df6:	4638      	mov	r0, r7
 8004df8:	47c0      	blx	r8
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	d0e6      	beq.n	8004dcc <_printf_common+0xa4>
 8004dfe:	3601      	adds	r6, #1
 8004e00:	e7d9      	b.n	8004db6 <_printf_common+0x8e>
	...

08004e04 <_printf_i>:
 8004e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e08:	460c      	mov	r4, r1
 8004e0a:	4691      	mov	r9, r2
 8004e0c:	7e27      	ldrb	r7, [r4, #24]
 8004e0e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004e10:	2f78      	cmp	r7, #120	; 0x78
 8004e12:	4680      	mov	r8, r0
 8004e14:	469a      	mov	sl, r3
 8004e16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e1a:	d807      	bhi.n	8004e2c <_printf_i+0x28>
 8004e1c:	2f62      	cmp	r7, #98	; 0x62
 8004e1e:	d80a      	bhi.n	8004e36 <_printf_i+0x32>
 8004e20:	2f00      	cmp	r7, #0
 8004e22:	f000 80d8 	beq.w	8004fd6 <_printf_i+0x1d2>
 8004e26:	2f58      	cmp	r7, #88	; 0x58
 8004e28:	f000 80a3 	beq.w	8004f72 <_printf_i+0x16e>
 8004e2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e34:	e03a      	b.n	8004eac <_printf_i+0xa8>
 8004e36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e3a:	2b15      	cmp	r3, #21
 8004e3c:	d8f6      	bhi.n	8004e2c <_printf_i+0x28>
 8004e3e:	a001      	add	r0, pc, #4	; (adr r0, 8004e44 <_printf_i+0x40>)
 8004e40:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e44:	08004e9d 	.word	0x08004e9d
 8004e48:	08004eb1 	.word	0x08004eb1
 8004e4c:	08004e2d 	.word	0x08004e2d
 8004e50:	08004e2d 	.word	0x08004e2d
 8004e54:	08004e2d 	.word	0x08004e2d
 8004e58:	08004e2d 	.word	0x08004e2d
 8004e5c:	08004eb1 	.word	0x08004eb1
 8004e60:	08004e2d 	.word	0x08004e2d
 8004e64:	08004e2d 	.word	0x08004e2d
 8004e68:	08004e2d 	.word	0x08004e2d
 8004e6c:	08004e2d 	.word	0x08004e2d
 8004e70:	08004fbd 	.word	0x08004fbd
 8004e74:	08004ee1 	.word	0x08004ee1
 8004e78:	08004f9f 	.word	0x08004f9f
 8004e7c:	08004e2d 	.word	0x08004e2d
 8004e80:	08004e2d 	.word	0x08004e2d
 8004e84:	08004fdf 	.word	0x08004fdf
 8004e88:	08004e2d 	.word	0x08004e2d
 8004e8c:	08004ee1 	.word	0x08004ee1
 8004e90:	08004e2d 	.word	0x08004e2d
 8004e94:	08004e2d 	.word	0x08004e2d
 8004e98:	08004fa7 	.word	0x08004fa7
 8004e9c:	680b      	ldr	r3, [r1, #0]
 8004e9e:	1d1a      	adds	r2, r3, #4
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	600a      	str	r2, [r1, #0]
 8004ea4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004eac:	2301      	movs	r3, #1
 8004eae:	e0a3      	b.n	8004ff8 <_printf_i+0x1f4>
 8004eb0:	6825      	ldr	r5, [r4, #0]
 8004eb2:	6808      	ldr	r0, [r1, #0]
 8004eb4:	062e      	lsls	r6, r5, #24
 8004eb6:	f100 0304 	add.w	r3, r0, #4
 8004eba:	d50a      	bpl.n	8004ed2 <_printf_i+0xce>
 8004ebc:	6805      	ldr	r5, [r0, #0]
 8004ebe:	600b      	str	r3, [r1, #0]
 8004ec0:	2d00      	cmp	r5, #0
 8004ec2:	da03      	bge.n	8004ecc <_printf_i+0xc8>
 8004ec4:	232d      	movs	r3, #45	; 0x2d
 8004ec6:	426d      	negs	r5, r5
 8004ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ecc:	485e      	ldr	r0, [pc, #376]	; (8005048 <_printf_i+0x244>)
 8004ece:	230a      	movs	r3, #10
 8004ed0:	e019      	b.n	8004f06 <_printf_i+0x102>
 8004ed2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004ed6:	6805      	ldr	r5, [r0, #0]
 8004ed8:	600b      	str	r3, [r1, #0]
 8004eda:	bf18      	it	ne
 8004edc:	b22d      	sxthne	r5, r5
 8004ede:	e7ef      	b.n	8004ec0 <_printf_i+0xbc>
 8004ee0:	680b      	ldr	r3, [r1, #0]
 8004ee2:	6825      	ldr	r5, [r4, #0]
 8004ee4:	1d18      	adds	r0, r3, #4
 8004ee6:	6008      	str	r0, [r1, #0]
 8004ee8:	0628      	lsls	r0, r5, #24
 8004eea:	d501      	bpl.n	8004ef0 <_printf_i+0xec>
 8004eec:	681d      	ldr	r5, [r3, #0]
 8004eee:	e002      	b.n	8004ef6 <_printf_i+0xf2>
 8004ef0:	0669      	lsls	r1, r5, #25
 8004ef2:	d5fb      	bpl.n	8004eec <_printf_i+0xe8>
 8004ef4:	881d      	ldrh	r5, [r3, #0]
 8004ef6:	4854      	ldr	r0, [pc, #336]	; (8005048 <_printf_i+0x244>)
 8004ef8:	2f6f      	cmp	r7, #111	; 0x6f
 8004efa:	bf0c      	ite	eq
 8004efc:	2308      	moveq	r3, #8
 8004efe:	230a      	movne	r3, #10
 8004f00:	2100      	movs	r1, #0
 8004f02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f06:	6866      	ldr	r6, [r4, #4]
 8004f08:	60a6      	str	r6, [r4, #8]
 8004f0a:	2e00      	cmp	r6, #0
 8004f0c:	bfa2      	ittt	ge
 8004f0e:	6821      	ldrge	r1, [r4, #0]
 8004f10:	f021 0104 	bicge.w	r1, r1, #4
 8004f14:	6021      	strge	r1, [r4, #0]
 8004f16:	b90d      	cbnz	r5, 8004f1c <_printf_i+0x118>
 8004f18:	2e00      	cmp	r6, #0
 8004f1a:	d04d      	beq.n	8004fb8 <_printf_i+0x1b4>
 8004f1c:	4616      	mov	r6, r2
 8004f1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f22:	fb03 5711 	mls	r7, r3, r1, r5
 8004f26:	5dc7      	ldrb	r7, [r0, r7]
 8004f28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f2c:	462f      	mov	r7, r5
 8004f2e:	42bb      	cmp	r3, r7
 8004f30:	460d      	mov	r5, r1
 8004f32:	d9f4      	bls.n	8004f1e <_printf_i+0x11a>
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d10b      	bne.n	8004f50 <_printf_i+0x14c>
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	07df      	lsls	r7, r3, #31
 8004f3c:	d508      	bpl.n	8004f50 <_printf_i+0x14c>
 8004f3e:	6923      	ldr	r3, [r4, #16]
 8004f40:	6861      	ldr	r1, [r4, #4]
 8004f42:	4299      	cmp	r1, r3
 8004f44:	bfde      	ittt	le
 8004f46:	2330      	movle	r3, #48	; 0x30
 8004f48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f50:	1b92      	subs	r2, r2, r6
 8004f52:	6122      	str	r2, [r4, #16]
 8004f54:	f8cd a000 	str.w	sl, [sp]
 8004f58:	464b      	mov	r3, r9
 8004f5a:	aa03      	add	r2, sp, #12
 8004f5c:	4621      	mov	r1, r4
 8004f5e:	4640      	mov	r0, r8
 8004f60:	f7ff fee2 	bl	8004d28 <_printf_common>
 8004f64:	3001      	adds	r0, #1
 8004f66:	d14c      	bne.n	8005002 <_printf_i+0x1fe>
 8004f68:	f04f 30ff 	mov.w	r0, #4294967295
 8004f6c:	b004      	add	sp, #16
 8004f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f72:	4835      	ldr	r0, [pc, #212]	; (8005048 <_printf_i+0x244>)
 8004f74:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	680e      	ldr	r6, [r1, #0]
 8004f7c:	061f      	lsls	r7, r3, #24
 8004f7e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004f82:	600e      	str	r6, [r1, #0]
 8004f84:	d514      	bpl.n	8004fb0 <_printf_i+0x1ac>
 8004f86:	07d9      	lsls	r1, r3, #31
 8004f88:	bf44      	itt	mi
 8004f8a:	f043 0320 	orrmi.w	r3, r3, #32
 8004f8e:	6023      	strmi	r3, [r4, #0]
 8004f90:	b91d      	cbnz	r5, 8004f9a <_printf_i+0x196>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	f023 0320 	bic.w	r3, r3, #32
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	2310      	movs	r3, #16
 8004f9c:	e7b0      	b.n	8004f00 <_printf_i+0xfc>
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	f043 0320 	orr.w	r3, r3, #32
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	2378      	movs	r3, #120	; 0x78
 8004fa8:	4828      	ldr	r0, [pc, #160]	; (800504c <_printf_i+0x248>)
 8004faa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fae:	e7e3      	b.n	8004f78 <_printf_i+0x174>
 8004fb0:	065e      	lsls	r6, r3, #25
 8004fb2:	bf48      	it	mi
 8004fb4:	b2ad      	uxthmi	r5, r5
 8004fb6:	e7e6      	b.n	8004f86 <_printf_i+0x182>
 8004fb8:	4616      	mov	r6, r2
 8004fba:	e7bb      	b.n	8004f34 <_printf_i+0x130>
 8004fbc:	680b      	ldr	r3, [r1, #0]
 8004fbe:	6826      	ldr	r6, [r4, #0]
 8004fc0:	6960      	ldr	r0, [r4, #20]
 8004fc2:	1d1d      	adds	r5, r3, #4
 8004fc4:	600d      	str	r5, [r1, #0]
 8004fc6:	0635      	lsls	r5, r6, #24
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	d501      	bpl.n	8004fd0 <_printf_i+0x1cc>
 8004fcc:	6018      	str	r0, [r3, #0]
 8004fce:	e002      	b.n	8004fd6 <_printf_i+0x1d2>
 8004fd0:	0671      	lsls	r1, r6, #25
 8004fd2:	d5fb      	bpl.n	8004fcc <_printf_i+0x1c8>
 8004fd4:	8018      	strh	r0, [r3, #0]
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	6123      	str	r3, [r4, #16]
 8004fda:	4616      	mov	r6, r2
 8004fdc:	e7ba      	b.n	8004f54 <_printf_i+0x150>
 8004fde:	680b      	ldr	r3, [r1, #0]
 8004fe0:	1d1a      	adds	r2, r3, #4
 8004fe2:	600a      	str	r2, [r1, #0]
 8004fe4:	681e      	ldr	r6, [r3, #0]
 8004fe6:	6862      	ldr	r2, [r4, #4]
 8004fe8:	2100      	movs	r1, #0
 8004fea:	4630      	mov	r0, r6
 8004fec:	f7fb f8f8 	bl	80001e0 <memchr>
 8004ff0:	b108      	cbz	r0, 8004ff6 <_printf_i+0x1f2>
 8004ff2:	1b80      	subs	r0, r0, r6
 8004ff4:	6060      	str	r0, [r4, #4]
 8004ff6:	6863      	ldr	r3, [r4, #4]
 8004ff8:	6123      	str	r3, [r4, #16]
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005000:	e7a8      	b.n	8004f54 <_printf_i+0x150>
 8005002:	6923      	ldr	r3, [r4, #16]
 8005004:	4632      	mov	r2, r6
 8005006:	4649      	mov	r1, r9
 8005008:	4640      	mov	r0, r8
 800500a:	47d0      	blx	sl
 800500c:	3001      	adds	r0, #1
 800500e:	d0ab      	beq.n	8004f68 <_printf_i+0x164>
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	079b      	lsls	r3, r3, #30
 8005014:	d413      	bmi.n	800503e <_printf_i+0x23a>
 8005016:	68e0      	ldr	r0, [r4, #12]
 8005018:	9b03      	ldr	r3, [sp, #12]
 800501a:	4298      	cmp	r0, r3
 800501c:	bfb8      	it	lt
 800501e:	4618      	movlt	r0, r3
 8005020:	e7a4      	b.n	8004f6c <_printf_i+0x168>
 8005022:	2301      	movs	r3, #1
 8005024:	4632      	mov	r2, r6
 8005026:	4649      	mov	r1, r9
 8005028:	4640      	mov	r0, r8
 800502a:	47d0      	blx	sl
 800502c:	3001      	adds	r0, #1
 800502e:	d09b      	beq.n	8004f68 <_printf_i+0x164>
 8005030:	3501      	adds	r5, #1
 8005032:	68e3      	ldr	r3, [r4, #12]
 8005034:	9903      	ldr	r1, [sp, #12]
 8005036:	1a5b      	subs	r3, r3, r1
 8005038:	42ab      	cmp	r3, r5
 800503a:	dcf2      	bgt.n	8005022 <_printf_i+0x21e>
 800503c:	e7eb      	b.n	8005016 <_printf_i+0x212>
 800503e:	2500      	movs	r5, #0
 8005040:	f104 0619 	add.w	r6, r4, #25
 8005044:	e7f5      	b.n	8005032 <_printf_i+0x22e>
 8005046:	bf00      	nop
 8005048:	080071a6 	.word	0x080071a6
 800504c:	080071b7 	.word	0x080071b7

08005050 <iprintf>:
 8005050:	b40f      	push	{r0, r1, r2, r3}
 8005052:	4b0a      	ldr	r3, [pc, #40]	; (800507c <iprintf+0x2c>)
 8005054:	b513      	push	{r0, r1, r4, lr}
 8005056:	681c      	ldr	r4, [r3, #0]
 8005058:	b124      	cbz	r4, 8005064 <iprintf+0x14>
 800505a:	69a3      	ldr	r3, [r4, #24]
 800505c:	b913      	cbnz	r3, 8005064 <iprintf+0x14>
 800505e:	4620      	mov	r0, r4
 8005060:	f000 fede 	bl	8005e20 <__sinit>
 8005064:	ab05      	add	r3, sp, #20
 8005066:	9a04      	ldr	r2, [sp, #16]
 8005068:	68a1      	ldr	r1, [r4, #8]
 800506a:	9301      	str	r3, [sp, #4]
 800506c:	4620      	mov	r0, r4
 800506e:	f001 fbf5 	bl	800685c <_vfiprintf_r>
 8005072:	b002      	add	sp, #8
 8005074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005078:	b004      	add	sp, #16
 800507a:	4770      	bx	lr
 800507c:	2000000c 	.word	0x2000000c

08005080 <quorem>:
 8005080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005084:	6903      	ldr	r3, [r0, #16]
 8005086:	690c      	ldr	r4, [r1, #16]
 8005088:	42a3      	cmp	r3, r4
 800508a:	4607      	mov	r7, r0
 800508c:	f2c0 8081 	blt.w	8005192 <quorem+0x112>
 8005090:	3c01      	subs	r4, #1
 8005092:	f101 0814 	add.w	r8, r1, #20
 8005096:	f100 0514 	add.w	r5, r0, #20
 800509a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800509e:	9301      	str	r3, [sp, #4]
 80050a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80050a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80050a8:	3301      	adds	r3, #1
 80050aa:	429a      	cmp	r2, r3
 80050ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80050b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80050b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80050b8:	d331      	bcc.n	800511e <quorem+0x9e>
 80050ba:	f04f 0e00 	mov.w	lr, #0
 80050be:	4640      	mov	r0, r8
 80050c0:	46ac      	mov	ip, r5
 80050c2:	46f2      	mov	sl, lr
 80050c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80050c8:	b293      	uxth	r3, r2
 80050ca:	fb06 e303 	mla	r3, r6, r3, lr
 80050ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	ebaa 0303 	sub.w	r3, sl, r3
 80050d8:	0c12      	lsrs	r2, r2, #16
 80050da:	f8dc a000 	ldr.w	sl, [ip]
 80050de:	fb06 e202 	mla	r2, r6, r2, lr
 80050e2:	fa13 f38a 	uxtah	r3, r3, sl
 80050e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80050ea:	fa1f fa82 	uxth.w	sl, r2
 80050ee:	f8dc 2000 	ldr.w	r2, [ip]
 80050f2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80050f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005100:	4581      	cmp	r9, r0
 8005102:	f84c 3b04 	str.w	r3, [ip], #4
 8005106:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800510a:	d2db      	bcs.n	80050c4 <quorem+0x44>
 800510c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005110:	b92b      	cbnz	r3, 800511e <quorem+0x9e>
 8005112:	9b01      	ldr	r3, [sp, #4]
 8005114:	3b04      	subs	r3, #4
 8005116:	429d      	cmp	r5, r3
 8005118:	461a      	mov	r2, r3
 800511a:	d32e      	bcc.n	800517a <quorem+0xfa>
 800511c:	613c      	str	r4, [r7, #16]
 800511e:	4638      	mov	r0, r7
 8005120:	f001 f9b8 	bl	8006494 <__mcmp>
 8005124:	2800      	cmp	r0, #0
 8005126:	db24      	blt.n	8005172 <quorem+0xf2>
 8005128:	3601      	adds	r6, #1
 800512a:	4628      	mov	r0, r5
 800512c:	f04f 0c00 	mov.w	ip, #0
 8005130:	f858 2b04 	ldr.w	r2, [r8], #4
 8005134:	f8d0 e000 	ldr.w	lr, [r0]
 8005138:	b293      	uxth	r3, r2
 800513a:	ebac 0303 	sub.w	r3, ip, r3
 800513e:	0c12      	lsrs	r2, r2, #16
 8005140:	fa13 f38e 	uxtah	r3, r3, lr
 8005144:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005148:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800514c:	b29b      	uxth	r3, r3
 800514e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005152:	45c1      	cmp	r9, r8
 8005154:	f840 3b04 	str.w	r3, [r0], #4
 8005158:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800515c:	d2e8      	bcs.n	8005130 <quorem+0xb0>
 800515e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005162:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005166:	b922      	cbnz	r2, 8005172 <quorem+0xf2>
 8005168:	3b04      	subs	r3, #4
 800516a:	429d      	cmp	r5, r3
 800516c:	461a      	mov	r2, r3
 800516e:	d30a      	bcc.n	8005186 <quorem+0x106>
 8005170:	613c      	str	r4, [r7, #16]
 8005172:	4630      	mov	r0, r6
 8005174:	b003      	add	sp, #12
 8005176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800517a:	6812      	ldr	r2, [r2, #0]
 800517c:	3b04      	subs	r3, #4
 800517e:	2a00      	cmp	r2, #0
 8005180:	d1cc      	bne.n	800511c <quorem+0x9c>
 8005182:	3c01      	subs	r4, #1
 8005184:	e7c7      	b.n	8005116 <quorem+0x96>
 8005186:	6812      	ldr	r2, [r2, #0]
 8005188:	3b04      	subs	r3, #4
 800518a:	2a00      	cmp	r2, #0
 800518c:	d1f0      	bne.n	8005170 <quorem+0xf0>
 800518e:	3c01      	subs	r4, #1
 8005190:	e7eb      	b.n	800516a <quorem+0xea>
 8005192:	2000      	movs	r0, #0
 8005194:	e7ee      	b.n	8005174 <quorem+0xf4>
	...

08005198 <_dtoa_r>:
 8005198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519c:	ed2d 8b02 	vpush	{d8}
 80051a0:	ec57 6b10 	vmov	r6, r7, d0
 80051a4:	b095      	sub	sp, #84	; 0x54
 80051a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80051a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80051ac:	9105      	str	r1, [sp, #20]
 80051ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80051b2:	4604      	mov	r4, r0
 80051b4:	9209      	str	r2, [sp, #36]	; 0x24
 80051b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80051b8:	b975      	cbnz	r5, 80051d8 <_dtoa_r+0x40>
 80051ba:	2010      	movs	r0, #16
 80051bc:	f000 fed6 	bl	8005f6c <malloc>
 80051c0:	4602      	mov	r2, r0
 80051c2:	6260      	str	r0, [r4, #36]	; 0x24
 80051c4:	b920      	cbnz	r0, 80051d0 <_dtoa_r+0x38>
 80051c6:	4bb2      	ldr	r3, [pc, #712]	; (8005490 <_dtoa_r+0x2f8>)
 80051c8:	21ea      	movs	r1, #234	; 0xea
 80051ca:	48b2      	ldr	r0, [pc, #712]	; (8005494 <_dtoa_r+0x2fc>)
 80051cc:	f001 fd9c 	bl	8006d08 <__assert_func>
 80051d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80051d4:	6005      	str	r5, [r0, #0]
 80051d6:	60c5      	str	r5, [r0, #12]
 80051d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051da:	6819      	ldr	r1, [r3, #0]
 80051dc:	b151      	cbz	r1, 80051f4 <_dtoa_r+0x5c>
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	604a      	str	r2, [r1, #4]
 80051e2:	2301      	movs	r3, #1
 80051e4:	4093      	lsls	r3, r2
 80051e6:	608b      	str	r3, [r1, #8]
 80051e8:	4620      	mov	r0, r4
 80051ea:	f000 ff15 	bl	8006018 <_Bfree>
 80051ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	1e3b      	subs	r3, r7, #0
 80051f6:	bfb9      	ittee	lt
 80051f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80051fc:	9303      	strlt	r3, [sp, #12]
 80051fe:	2300      	movge	r3, #0
 8005200:	f8c8 3000 	strge.w	r3, [r8]
 8005204:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005208:	4ba3      	ldr	r3, [pc, #652]	; (8005498 <_dtoa_r+0x300>)
 800520a:	bfbc      	itt	lt
 800520c:	2201      	movlt	r2, #1
 800520e:	f8c8 2000 	strlt.w	r2, [r8]
 8005212:	ea33 0309 	bics.w	r3, r3, r9
 8005216:	d11b      	bne.n	8005250 <_dtoa_r+0xb8>
 8005218:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800521a:	f242 730f 	movw	r3, #9999	; 0x270f
 800521e:	6013      	str	r3, [r2, #0]
 8005220:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005224:	4333      	orrs	r3, r6
 8005226:	f000 857a 	beq.w	8005d1e <_dtoa_r+0xb86>
 800522a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800522c:	b963      	cbnz	r3, 8005248 <_dtoa_r+0xb0>
 800522e:	4b9b      	ldr	r3, [pc, #620]	; (800549c <_dtoa_r+0x304>)
 8005230:	e024      	b.n	800527c <_dtoa_r+0xe4>
 8005232:	4b9b      	ldr	r3, [pc, #620]	; (80054a0 <_dtoa_r+0x308>)
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	3308      	adds	r3, #8
 8005238:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800523a:	6013      	str	r3, [r2, #0]
 800523c:	9800      	ldr	r0, [sp, #0]
 800523e:	b015      	add	sp, #84	; 0x54
 8005240:	ecbd 8b02 	vpop	{d8}
 8005244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005248:	4b94      	ldr	r3, [pc, #592]	; (800549c <_dtoa_r+0x304>)
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	3303      	adds	r3, #3
 800524e:	e7f3      	b.n	8005238 <_dtoa_r+0xa0>
 8005250:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005254:	2200      	movs	r2, #0
 8005256:	ec51 0b17 	vmov	r0, r1, d7
 800525a:	2300      	movs	r3, #0
 800525c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005260:	f7fb fc32 	bl	8000ac8 <__aeabi_dcmpeq>
 8005264:	4680      	mov	r8, r0
 8005266:	b158      	cbz	r0, 8005280 <_dtoa_r+0xe8>
 8005268:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800526a:	2301      	movs	r3, #1
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 8551 	beq.w	8005d18 <_dtoa_r+0xb80>
 8005276:	488b      	ldr	r0, [pc, #556]	; (80054a4 <_dtoa_r+0x30c>)
 8005278:	6018      	str	r0, [r3, #0]
 800527a:	1e43      	subs	r3, r0, #1
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	e7dd      	b.n	800523c <_dtoa_r+0xa4>
 8005280:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005284:	aa12      	add	r2, sp, #72	; 0x48
 8005286:	a913      	add	r1, sp, #76	; 0x4c
 8005288:	4620      	mov	r0, r4
 800528a:	f001 f9a7 	bl	80065dc <__d2b>
 800528e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005292:	4683      	mov	fp, r0
 8005294:	2d00      	cmp	r5, #0
 8005296:	d07c      	beq.n	8005392 <_dtoa_r+0x1fa>
 8005298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800529a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800529e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052a2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80052a6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80052aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80052ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80052b2:	4b7d      	ldr	r3, [pc, #500]	; (80054a8 <_dtoa_r+0x310>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	4630      	mov	r0, r6
 80052b8:	4639      	mov	r1, r7
 80052ba:	f7fa ffe5 	bl	8000288 <__aeabi_dsub>
 80052be:	a36e      	add	r3, pc, #440	; (adr r3, 8005478 <_dtoa_r+0x2e0>)
 80052c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c4:	f7fb f998 	bl	80005f8 <__aeabi_dmul>
 80052c8:	a36d      	add	r3, pc, #436	; (adr r3, 8005480 <_dtoa_r+0x2e8>)
 80052ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ce:	f7fa ffdd 	bl	800028c <__adddf3>
 80052d2:	4606      	mov	r6, r0
 80052d4:	4628      	mov	r0, r5
 80052d6:	460f      	mov	r7, r1
 80052d8:	f7fb f924 	bl	8000524 <__aeabi_i2d>
 80052dc:	a36a      	add	r3, pc, #424	; (adr r3, 8005488 <_dtoa_r+0x2f0>)
 80052de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e2:	f7fb f989 	bl	80005f8 <__aeabi_dmul>
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4630      	mov	r0, r6
 80052ec:	4639      	mov	r1, r7
 80052ee:	f7fa ffcd 	bl	800028c <__adddf3>
 80052f2:	4606      	mov	r6, r0
 80052f4:	460f      	mov	r7, r1
 80052f6:	f7fb fc2f 	bl	8000b58 <__aeabi_d2iz>
 80052fa:	2200      	movs	r2, #0
 80052fc:	4682      	mov	sl, r0
 80052fe:	2300      	movs	r3, #0
 8005300:	4630      	mov	r0, r6
 8005302:	4639      	mov	r1, r7
 8005304:	f7fb fbea 	bl	8000adc <__aeabi_dcmplt>
 8005308:	b148      	cbz	r0, 800531e <_dtoa_r+0x186>
 800530a:	4650      	mov	r0, sl
 800530c:	f7fb f90a 	bl	8000524 <__aeabi_i2d>
 8005310:	4632      	mov	r2, r6
 8005312:	463b      	mov	r3, r7
 8005314:	f7fb fbd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005318:	b908      	cbnz	r0, 800531e <_dtoa_r+0x186>
 800531a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800531e:	f1ba 0f16 	cmp.w	sl, #22
 8005322:	d854      	bhi.n	80053ce <_dtoa_r+0x236>
 8005324:	4b61      	ldr	r3, [pc, #388]	; (80054ac <_dtoa_r+0x314>)
 8005326:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800532a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005332:	f7fb fbd3 	bl	8000adc <__aeabi_dcmplt>
 8005336:	2800      	cmp	r0, #0
 8005338:	d04b      	beq.n	80053d2 <_dtoa_r+0x23a>
 800533a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800533e:	2300      	movs	r3, #0
 8005340:	930e      	str	r3, [sp, #56]	; 0x38
 8005342:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005344:	1b5d      	subs	r5, r3, r5
 8005346:	1e6b      	subs	r3, r5, #1
 8005348:	9304      	str	r3, [sp, #16]
 800534a:	bf43      	ittte	mi
 800534c:	2300      	movmi	r3, #0
 800534e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005352:	9304      	strmi	r3, [sp, #16]
 8005354:	f04f 0800 	movpl.w	r8, #0
 8005358:	f1ba 0f00 	cmp.w	sl, #0
 800535c:	db3b      	blt.n	80053d6 <_dtoa_r+0x23e>
 800535e:	9b04      	ldr	r3, [sp, #16]
 8005360:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005364:	4453      	add	r3, sl
 8005366:	9304      	str	r3, [sp, #16]
 8005368:	2300      	movs	r3, #0
 800536a:	9306      	str	r3, [sp, #24]
 800536c:	9b05      	ldr	r3, [sp, #20]
 800536e:	2b09      	cmp	r3, #9
 8005370:	d869      	bhi.n	8005446 <_dtoa_r+0x2ae>
 8005372:	2b05      	cmp	r3, #5
 8005374:	bfc4      	itt	gt
 8005376:	3b04      	subgt	r3, #4
 8005378:	9305      	strgt	r3, [sp, #20]
 800537a:	9b05      	ldr	r3, [sp, #20]
 800537c:	f1a3 0302 	sub.w	r3, r3, #2
 8005380:	bfcc      	ite	gt
 8005382:	2500      	movgt	r5, #0
 8005384:	2501      	movle	r5, #1
 8005386:	2b03      	cmp	r3, #3
 8005388:	d869      	bhi.n	800545e <_dtoa_r+0x2c6>
 800538a:	e8df f003 	tbb	[pc, r3]
 800538e:	4e2c      	.short	0x4e2c
 8005390:	5a4c      	.short	0x5a4c
 8005392:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005396:	441d      	add	r5, r3
 8005398:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800539c:	2b20      	cmp	r3, #32
 800539e:	bfc1      	itttt	gt
 80053a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80053a4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80053a8:	fa09 f303 	lslgt.w	r3, r9, r3
 80053ac:	fa26 f000 	lsrgt.w	r0, r6, r0
 80053b0:	bfda      	itte	le
 80053b2:	f1c3 0320 	rsble	r3, r3, #32
 80053b6:	fa06 f003 	lslle.w	r0, r6, r3
 80053ba:	4318      	orrgt	r0, r3
 80053bc:	f7fb f8a2 	bl	8000504 <__aeabi_ui2d>
 80053c0:	2301      	movs	r3, #1
 80053c2:	4606      	mov	r6, r0
 80053c4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80053c8:	3d01      	subs	r5, #1
 80053ca:	9310      	str	r3, [sp, #64]	; 0x40
 80053cc:	e771      	b.n	80052b2 <_dtoa_r+0x11a>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e7b6      	b.n	8005340 <_dtoa_r+0x1a8>
 80053d2:	900e      	str	r0, [sp, #56]	; 0x38
 80053d4:	e7b5      	b.n	8005342 <_dtoa_r+0x1aa>
 80053d6:	f1ca 0300 	rsb	r3, sl, #0
 80053da:	9306      	str	r3, [sp, #24]
 80053dc:	2300      	movs	r3, #0
 80053de:	eba8 080a 	sub.w	r8, r8, sl
 80053e2:	930d      	str	r3, [sp, #52]	; 0x34
 80053e4:	e7c2      	b.n	800536c <_dtoa_r+0x1d4>
 80053e6:	2300      	movs	r3, #0
 80053e8:	9308      	str	r3, [sp, #32]
 80053ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	dc39      	bgt.n	8005464 <_dtoa_r+0x2cc>
 80053f0:	f04f 0901 	mov.w	r9, #1
 80053f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80053f8:	464b      	mov	r3, r9
 80053fa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80053fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005400:	2200      	movs	r2, #0
 8005402:	6042      	str	r2, [r0, #4]
 8005404:	2204      	movs	r2, #4
 8005406:	f102 0614 	add.w	r6, r2, #20
 800540a:	429e      	cmp	r6, r3
 800540c:	6841      	ldr	r1, [r0, #4]
 800540e:	d92f      	bls.n	8005470 <_dtoa_r+0x2d8>
 8005410:	4620      	mov	r0, r4
 8005412:	f000 fdc1 	bl	8005f98 <_Balloc>
 8005416:	9000      	str	r0, [sp, #0]
 8005418:	2800      	cmp	r0, #0
 800541a:	d14b      	bne.n	80054b4 <_dtoa_r+0x31c>
 800541c:	4b24      	ldr	r3, [pc, #144]	; (80054b0 <_dtoa_r+0x318>)
 800541e:	4602      	mov	r2, r0
 8005420:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005424:	e6d1      	b.n	80051ca <_dtoa_r+0x32>
 8005426:	2301      	movs	r3, #1
 8005428:	e7de      	b.n	80053e8 <_dtoa_r+0x250>
 800542a:	2300      	movs	r3, #0
 800542c:	9308      	str	r3, [sp, #32]
 800542e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005430:	eb0a 0903 	add.w	r9, sl, r3
 8005434:	f109 0301 	add.w	r3, r9, #1
 8005438:	2b01      	cmp	r3, #1
 800543a:	9301      	str	r3, [sp, #4]
 800543c:	bfb8      	it	lt
 800543e:	2301      	movlt	r3, #1
 8005440:	e7dd      	b.n	80053fe <_dtoa_r+0x266>
 8005442:	2301      	movs	r3, #1
 8005444:	e7f2      	b.n	800542c <_dtoa_r+0x294>
 8005446:	2501      	movs	r5, #1
 8005448:	2300      	movs	r3, #0
 800544a:	9305      	str	r3, [sp, #20]
 800544c:	9508      	str	r5, [sp, #32]
 800544e:	f04f 39ff 	mov.w	r9, #4294967295
 8005452:	2200      	movs	r2, #0
 8005454:	f8cd 9004 	str.w	r9, [sp, #4]
 8005458:	2312      	movs	r3, #18
 800545a:	9209      	str	r2, [sp, #36]	; 0x24
 800545c:	e7cf      	b.n	80053fe <_dtoa_r+0x266>
 800545e:	2301      	movs	r3, #1
 8005460:	9308      	str	r3, [sp, #32]
 8005462:	e7f4      	b.n	800544e <_dtoa_r+0x2b6>
 8005464:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005468:	f8cd 9004 	str.w	r9, [sp, #4]
 800546c:	464b      	mov	r3, r9
 800546e:	e7c6      	b.n	80053fe <_dtoa_r+0x266>
 8005470:	3101      	adds	r1, #1
 8005472:	6041      	str	r1, [r0, #4]
 8005474:	0052      	lsls	r2, r2, #1
 8005476:	e7c6      	b.n	8005406 <_dtoa_r+0x26e>
 8005478:	636f4361 	.word	0x636f4361
 800547c:	3fd287a7 	.word	0x3fd287a7
 8005480:	8b60c8b3 	.word	0x8b60c8b3
 8005484:	3fc68a28 	.word	0x3fc68a28
 8005488:	509f79fb 	.word	0x509f79fb
 800548c:	3fd34413 	.word	0x3fd34413
 8005490:	080071d5 	.word	0x080071d5
 8005494:	080071ec 	.word	0x080071ec
 8005498:	7ff00000 	.word	0x7ff00000
 800549c:	080071d1 	.word	0x080071d1
 80054a0:	080071c8 	.word	0x080071c8
 80054a4:	080071a5 	.word	0x080071a5
 80054a8:	3ff80000 	.word	0x3ff80000
 80054ac:	08007348 	.word	0x08007348
 80054b0:	0800724b 	.word	0x0800724b
 80054b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054b6:	9a00      	ldr	r2, [sp, #0]
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	9b01      	ldr	r3, [sp, #4]
 80054bc:	2b0e      	cmp	r3, #14
 80054be:	f200 80ad 	bhi.w	800561c <_dtoa_r+0x484>
 80054c2:	2d00      	cmp	r5, #0
 80054c4:	f000 80aa 	beq.w	800561c <_dtoa_r+0x484>
 80054c8:	f1ba 0f00 	cmp.w	sl, #0
 80054cc:	dd36      	ble.n	800553c <_dtoa_r+0x3a4>
 80054ce:	4ac3      	ldr	r2, [pc, #780]	; (80057dc <_dtoa_r+0x644>)
 80054d0:	f00a 030f 	and.w	r3, sl, #15
 80054d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80054d8:	ed93 7b00 	vldr	d7, [r3]
 80054dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80054e0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80054e4:	eeb0 8a47 	vmov.f32	s16, s14
 80054e8:	eef0 8a67 	vmov.f32	s17, s15
 80054ec:	d016      	beq.n	800551c <_dtoa_r+0x384>
 80054ee:	4bbc      	ldr	r3, [pc, #752]	; (80057e0 <_dtoa_r+0x648>)
 80054f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80054f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054f8:	f7fb f9a8 	bl	800084c <__aeabi_ddiv>
 80054fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005500:	f007 070f 	and.w	r7, r7, #15
 8005504:	2503      	movs	r5, #3
 8005506:	4eb6      	ldr	r6, [pc, #728]	; (80057e0 <_dtoa_r+0x648>)
 8005508:	b957      	cbnz	r7, 8005520 <_dtoa_r+0x388>
 800550a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800550e:	ec53 2b18 	vmov	r2, r3, d8
 8005512:	f7fb f99b 	bl	800084c <__aeabi_ddiv>
 8005516:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800551a:	e029      	b.n	8005570 <_dtoa_r+0x3d8>
 800551c:	2502      	movs	r5, #2
 800551e:	e7f2      	b.n	8005506 <_dtoa_r+0x36e>
 8005520:	07f9      	lsls	r1, r7, #31
 8005522:	d508      	bpl.n	8005536 <_dtoa_r+0x39e>
 8005524:	ec51 0b18 	vmov	r0, r1, d8
 8005528:	e9d6 2300 	ldrd	r2, r3, [r6]
 800552c:	f7fb f864 	bl	80005f8 <__aeabi_dmul>
 8005530:	ec41 0b18 	vmov	d8, r0, r1
 8005534:	3501      	adds	r5, #1
 8005536:	107f      	asrs	r7, r7, #1
 8005538:	3608      	adds	r6, #8
 800553a:	e7e5      	b.n	8005508 <_dtoa_r+0x370>
 800553c:	f000 80a6 	beq.w	800568c <_dtoa_r+0x4f4>
 8005540:	f1ca 0600 	rsb	r6, sl, #0
 8005544:	4ba5      	ldr	r3, [pc, #660]	; (80057dc <_dtoa_r+0x644>)
 8005546:	4fa6      	ldr	r7, [pc, #664]	; (80057e0 <_dtoa_r+0x648>)
 8005548:	f006 020f 	and.w	r2, r6, #15
 800554c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005554:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005558:	f7fb f84e 	bl	80005f8 <__aeabi_dmul>
 800555c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005560:	1136      	asrs	r6, r6, #4
 8005562:	2300      	movs	r3, #0
 8005564:	2502      	movs	r5, #2
 8005566:	2e00      	cmp	r6, #0
 8005568:	f040 8085 	bne.w	8005676 <_dtoa_r+0x4de>
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1d2      	bne.n	8005516 <_dtoa_r+0x37e>
 8005570:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 808c 	beq.w	8005690 <_dtoa_r+0x4f8>
 8005578:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800557c:	4b99      	ldr	r3, [pc, #612]	; (80057e4 <_dtoa_r+0x64c>)
 800557e:	2200      	movs	r2, #0
 8005580:	4630      	mov	r0, r6
 8005582:	4639      	mov	r1, r7
 8005584:	f7fb faaa 	bl	8000adc <__aeabi_dcmplt>
 8005588:	2800      	cmp	r0, #0
 800558a:	f000 8081 	beq.w	8005690 <_dtoa_r+0x4f8>
 800558e:	9b01      	ldr	r3, [sp, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d07d      	beq.n	8005690 <_dtoa_r+0x4f8>
 8005594:	f1b9 0f00 	cmp.w	r9, #0
 8005598:	dd3c      	ble.n	8005614 <_dtoa_r+0x47c>
 800559a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800559e:	9307      	str	r3, [sp, #28]
 80055a0:	2200      	movs	r2, #0
 80055a2:	4b91      	ldr	r3, [pc, #580]	; (80057e8 <_dtoa_r+0x650>)
 80055a4:	4630      	mov	r0, r6
 80055a6:	4639      	mov	r1, r7
 80055a8:	f7fb f826 	bl	80005f8 <__aeabi_dmul>
 80055ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055b0:	3501      	adds	r5, #1
 80055b2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80055b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80055ba:	4628      	mov	r0, r5
 80055bc:	f7fa ffb2 	bl	8000524 <__aeabi_i2d>
 80055c0:	4632      	mov	r2, r6
 80055c2:	463b      	mov	r3, r7
 80055c4:	f7fb f818 	bl	80005f8 <__aeabi_dmul>
 80055c8:	4b88      	ldr	r3, [pc, #544]	; (80057ec <_dtoa_r+0x654>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	f7fa fe5e 	bl	800028c <__adddf3>
 80055d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80055d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055d8:	9303      	str	r3, [sp, #12]
 80055da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d15c      	bne.n	800569a <_dtoa_r+0x502>
 80055e0:	4b83      	ldr	r3, [pc, #524]	; (80057f0 <_dtoa_r+0x658>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	4630      	mov	r0, r6
 80055e6:	4639      	mov	r1, r7
 80055e8:	f7fa fe4e 	bl	8000288 <__aeabi_dsub>
 80055ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055f0:	4606      	mov	r6, r0
 80055f2:	460f      	mov	r7, r1
 80055f4:	f7fb fa90 	bl	8000b18 <__aeabi_dcmpgt>
 80055f8:	2800      	cmp	r0, #0
 80055fa:	f040 8296 	bne.w	8005b2a <_dtoa_r+0x992>
 80055fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005602:	4630      	mov	r0, r6
 8005604:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005608:	4639      	mov	r1, r7
 800560a:	f7fb fa67 	bl	8000adc <__aeabi_dcmplt>
 800560e:	2800      	cmp	r0, #0
 8005610:	f040 8288 	bne.w	8005b24 <_dtoa_r+0x98c>
 8005614:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005618:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800561c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800561e:	2b00      	cmp	r3, #0
 8005620:	f2c0 8158 	blt.w	80058d4 <_dtoa_r+0x73c>
 8005624:	f1ba 0f0e 	cmp.w	sl, #14
 8005628:	f300 8154 	bgt.w	80058d4 <_dtoa_r+0x73c>
 800562c:	4b6b      	ldr	r3, [pc, #428]	; (80057dc <_dtoa_r+0x644>)
 800562e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005632:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005638:	2b00      	cmp	r3, #0
 800563a:	f280 80e3 	bge.w	8005804 <_dtoa_r+0x66c>
 800563e:	9b01      	ldr	r3, [sp, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	f300 80df 	bgt.w	8005804 <_dtoa_r+0x66c>
 8005646:	f040 826d 	bne.w	8005b24 <_dtoa_r+0x98c>
 800564a:	4b69      	ldr	r3, [pc, #420]	; (80057f0 <_dtoa_r+0x658>)
 800564c:	2200      	movs	r2, #0
 800564e:	4640      	mov	r0, r8
 8005650:	4649      	mov	r1, r9
 8005652:	f7fa ffd1 	bl	80005f8 <__aeabi_dmul>
 8005656:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800565a:	f7fb fa53 	bl	8000b04 <__aeabi_dcmpge>
 800565e:	9e01      	ldr	r6, [sp, #4]
 8005660:	4637      	mov	r7, r6
 8005662:	2800      	cmp	r0, #0
 8005664:	f040 8243 	bne.w	8005aee <_dtoa_r+0x956>
 8005668:	9d00      	ldr	r5, [sp, #0]
 800566a:	2331      	movs	r3, #49	; 0x31
 800566c:	f805 3b01 	strb.w	r3, [r5], #1
 8005670:	f10a 0a01 	add.w	sl, sl, #1
 8005674:	e23f      	b.n	8005af6 <_dtoa_r+0x95e>
 8005676:	07f2      	lsls	r2, r6, #31
 8005678:	d505      	bpl.n	8005686 <_dtoa_r+0x4ee>
 800567a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800567e:	f7fa ffbb 	bl	80005f8 <__aeabi_dmul>
 8005682:	3501      	adds	r5, #1
 8005684:	2301      	movs	r3, #1
 8005686:	1076      	asrs	r6, r6, #1
 8005688:	3708      	adds	r7, #8
 800568a:	e76c      	b.n	8005566 <_dtoa_r+0x3ce>
 800568c:	2502      	movs	r5, #2
 800568e:	e76f      	b.n	8005570 <_dtoa_r+0x3d8>
 8005690:	9b01      	ldr	r3, [sp, #4]
 8005692:	f8cd a01c 	str.w	sl, [sp, #28]
 8005696:	930c      	str	r3, [sp, #48]	; 0x30
 8005698:	e78d      	b.n	80055b6 <_dtoa_r+0x41e>
 800569a:	9900      	ldr	r1, [sp, #0]
 800569c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800569e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056a0:	4b4e      	ldr	r3, [pc, #312]	; (80057dc <_dtoa_r+0x644>)
 80056a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80056a6:	4401      	add	r1, r0
 80056a8:	9102      	str	r1, [sp, #8]
 80056aa:	9908      	ldr	r1, [sp, #32]
 80056ac:	eeb0 8a47 	vmov.f32	s16, s14
 80056b0:	eef0 8a67 	vmov.f32	s17, s15
 80056b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80056bc:	2900      	cmp	r1, #0
 80056be:	d045      	beq.n	800574c <_dtoa_r+0x5b4>
 80056c0:	494c      	ldr	r1, [pc, #304]	; (80057f4 <_dtoa_r+0x65c>)
 80056c2:	2000      	movs	r0, #0
 80056c4:	f7fb f8c2 	bl	800084c <__aeabi_ddiv>
 80056c8:	ec53 2b18 	vmov	r2, r3, d8
 80056cc:	f7fa fddc 	bl	8000288 <__aeabi_dsub>
 80056d0:	9d00      	ldr	r5, [sp, #0]
 80056d2:	ec41 0b18 	vmov	d8, r0, r1
 80056d6:	4639      	mov	r1, r7
 80056d8:	4630      	mov	r0, r6
 80056da:	f7fb fa3d 	bl	8000b58 <__aeabi_d2iz>
 80056de:	900c      	str	r0, [sp, #48]	; 0x30
 80056e0:	f7fa ff20 	bl	8000524 <__aeabi_i2d>
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4630      	mov	r0, r6
 80056ea:	4639      	mov	r1, r7
 80056ec:	f7fa fdcc 	bl	8000288 <__aeabi_dsub>
 80056f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056f2:	3330      	adds	r3, #48	; 0x30
 80056f4:	f805 3b01 	strb.w	r3, [r5], #1
 80056f8:	ec53 2b18 	vmov	r2, r3, d8
 80056fc:	4606      	mov	r6, r0
 80056fe:	460f      	mov	r7, r1
 8005700:	f7fb f9ec 	bl	8000adc <__aeabi_dcmplt>
 8005704:	2800      	cmp	r0, #0
 8005706:	d165      	bne.n	80057d4 <_dtoa_r+0x63c>
 8005708:	4632      	mov	r2, r6
 800570a:	463b      	mov	r3, r7
 800570c:	4935      	ldr	r1, [pc, #212]	; (80057e4 <_dtoa_r+0x64c>)
 800570e:	2000      	movs	r0, #0
 8005710:	f7fa fdba 	bl	8000288 <__aeabi_dsub>
 8005714:	ec53 2b18 	vmov	r2, r3, d8
 8005718:	f7fb f9e0 	bl	8000adc <__aeabi_dcmplt>
 800571c:	2800      	cmp	r0, #0
 800571e:	f040 80b9 	bne.w	8005894 <_dtoa_r+0x6fc>
 8005722:	9b02      	ldr	r3, [sp, #8]
 8005724:	429d      	cmp	r5, r3
 8005726:	f43f af75 	beq.w	8005614 <_dtoa_r+0x47c>
 800572a:	4b2f      	ldr	r3, [pc, #188]	; (80057e8 <_dtoa_r+0x650>)
 800572c:	ec51 0b18 	vmov	r0, r1, d8
 8005730:	2200      	movs	r2, #0
 8005732:	f7fa ff61 	bl	80005f8 <__aeabi_dmul>
 8005736:	4b2c      	ldr	r3, [pc, #176]	; (80057e8 <_dtoa_r+0x650>)
 8005738:	ec41 0b18 	vmov	d8, r0, r1
 800573c:	2200      	movs	r2, #0
 800573e:	4630      	mov	r0, r6
 8005740:	4639      	mov	r1, r7
 8005742:	f7fa ff59 	bl	80005f8 <__aeabi_dmul>
 8005746:	4606      	mov	r6, r0
 8005748:	460f      	mov	r7, r1
 800574a:	e7c4      	b.n	80056d6 <_dtoa_r+0x53e>
 800574c:	ec51 0b17 	vmov	r0, r1, d7
 8005750:	f7fa ff52 	bl	80005f8 <__aeabi_dmul>
 8005754:	9b02      	ldr	r3, [sp, #8]
 8005756:	9d00      	ldr	r5, [sp, #0]
 8005758:	930c      	str	r3, [sp, #48]	; 0x30
 800575a:	ec41 0b18 	vmov	d8, r0, r1
 800575e:	4639      	mov	r1, r7
 8005760:	4630      	mov	r0, r6
 8005762:	f7fb f9f9 	bl	8000b58 <__aeabi_d2iz>
 8005766:	9011      	str	r0, [sp, #68]	; 0x44
 8005768:	f7fa fedc 	bl	8000524 <__aeabi_i2d>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4630      	mov	r0, r6
 8005772:	4639      	mov	r1, r7
 8005774:	f7fa fd88 	bl	8000288 <__aeabi_dsub>
 8005778:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800577a:	3330      	adds	r3, #48	; 0x30
 800577c:	f805 3b01 	strb.w	r3, [r5], #1
 8005780:	9b02      	ldr	r3, [sp, #8]
 8005782:	429d      	cmp	r5, r3
 8005784:	4606      	mov	r6, r0
 8005786:	460f      	mov	r7, r1
 8005788:	f04f 0200 	mov.w	r2, #0
 800578c:	d134      	bne.n	80057f8 <_dtoa_r+0x660>
 800578e:	4b19      	ldr	r3, [pc, #100]	; (80057f4 <_dtoa_r+0x65c>)
 8005790:	ec51 0b18 	vmov	r0, r1, d8
 8005794:	f7fa fd7a 	bl	800028c <__adddf3>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	4630      	mov	r0, r6
 800579e:	4639      	mov	r1, r7
 80057a0:	f7fb f9ba 	bl	8000b18 <__aeabi_dcmpgt>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	d175      	bne.n	8005894 <_dtoa_r+0x6fc>
 80057a8:	ec53 2b18 	vmov	r2, r3, d8
 80057ac:	4911      	ldr	r1, [pc, #68]	; (80057f4 <_dtoa_r+0x65c>)
 80057ae:	2000      	movs	r0, #0
 80057b0:	f7fa fd6a 	bl	8000288 <__aeabi_dsub>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4630      	mov	r0, r6
 80057ba:	4639      	mov	r1, r7
 80057bc:	f7fb f98e 	bl	8000adc <__aeabi_dcmplt>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	f43f af27 	beq.w	8005614 <_dtoa_r+0x47c>
 80057c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057c8:	1e6b      	subs	r3, r5, #1
 80057ca:	930c      	str	r3, [sp, #48]	; 0x30
 80057cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80057d0:	2b30      	cmp	r3, #48	; 0x30
 80057d2:	d0f8      	beq.n	80057c6 <_dtoa_r+0x62e>
 80057d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80057d8:	e04a      	b.n	8005870 <_dtoa_r+0x6d8>
 80057da:	bf00      	nop
 80057dc:	08007348 	.word	0x08007348
 80057e0:	08007320 	.word	0x08007320
 80057e4:	3ff00000 	.word	0x3ff00000
 80057e8:	40240000 	.word	0x40240000
 80057ec:	401c0000 	.word	0x401c0000
 80057f0:	40140000 	.word	0x40140000
 80057f4:	3fe00000 	.word	0x3fe00000
 80057f8:	4baf      	ldr	r3, [pc, #700]	; (8005ab8 <_dtoa_r+0x920>)
 80057fa:	f7fa fefd 	bl	80005f8 <__aeabi_dmul>
 80057fe:	4606      	mov	r6, r0
 8005800:	460f      	mov	r7, r1
 8005802:	e7ac      	b.n	800575e <_dtoa_r+0x5c6>
 8005804:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005808:	9d00      	ldr	r5, [sp, #0]
 800580a:	4642      	mov	r2, r8
 800580c:	464b      	mov	r3, r9
 800580e:	4630      	mov	r0, r6
 8005810:	4639      	mov	r1, r7
 8005812:	f7fb f81b 	bl	800084c <__aeabi_ddiv>
 8005816:	f7fb f99f 	bl	8000b58 <__aeabi_d2iz>
 800581a:	9002      	str	r0, [sp, #8]
 800581c:	f7fa fe82 	bl	8000524 <__aeabi_i2d>
 8005820:	4642      	mov	r2, r8
 8005822:	464b      	mov	r3, r9
 8005824:	f7fa fee8 	bl	80005f8 <__aeabi_dmul>
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	4630      	mov	r0, r6
 800582e:	4639      	mov	r1, r7
 8005830:	f7fa fd2a 	bl	8000288 <__aeabi_dsub>
 8005834:	9e02      	ldr	r6, [sp, #8]
 8005836:	9f01      	ldr	r7, [sp, #4]
 8005838:	3630      	adds	r6, #48	; 0x30
 800583a:	f805 6b01 	strb.w	r6, [r5], #1
 800583e:	9e00      	ldr	r6, [sp, #0]
 8005840:	1bae      	subs	r6, r5, r6
 8005842:	42b7      	cmp	r7, r6
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	d137      	bne.n	80058ba <_dtoa_r+0x722>
 800584a:	f7fa fd1f 	bl	800028c <__adddf3>
 800584e:	4642      	mov	r2, r8
 8005850:	464b      	mov	r3, r9
 8005852:	4606      	mov	r6, r0
 8005854:	460f      	mov	r7, r1
 8005856:	f7fb f95f 	bl	8000b18 <__aeabi_dcmpgt>
 800585a:	b9c8      	cbnz	r0, 8005890 <_dtoa_r+0x6f8>
 800585c:	4642      	mov	r2, r8
 800585e:	464b      	mov	r3, r9
 8005860:	4630      	mov	r0, r6
 8005862:	4639      	mov	r1, r7
 8005864:	f7fb f930 	bl	8000ac8 <__aeabi_dcmpeq>
 8005868:	b110      	cbz	r0, 8005870 <_dtoa_r+0x6d8>
 800586a:	9b02      	ldr	r3, [sp, #8]
 800586c:	07d9      	lsls	r1, r3, #31
 800586e:	d40f      	bmi.n	8005890 <_dtoa_r+0x6f8>
 8005870:	4620      	mov	r0, r4
 8005872:	4659      	mov	r1, fp
 8005874:	f000 fbd0 	bl	8006018 <_Bfree>
 8005878:	2300      	movs	r3, #0
 800587a:	702b      	strb	r3, [r5, #0]
 800587c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800587e:	f10a 0001 	add.w	r0, sl, #1
 8005882:	6018      	str	r0, [r3, #0]
 8005884:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005886:	2b00      	cmp	r3, #0
 8005888:	f43f acd8 	beq.w	800523c <_dtoa_r+0xa4>
 800588c:	601d      	str	r5, [r3, #0]
 800588e:	e4d5      	b.n	800523c <_dtoa_r+0xa4>
 8005890:	f8cd a01c 	str.w	sl, [sp, #28]
 8005894:	462b      	mov	r3, r5
 8005896:	461d      	mov	r5, r3
 8005898:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800589c:	2a39      	cmp	r2, #57	; 0x39
 800589e:	d108      	bne.n	80058b2 <_dtoa_r+0x71a>
 80058a0:	9a00      	ldr	r2, [sp, #0]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d1f7      	bne.n	8005896 <_dtoa_r+0x6fe>
 80058a6:	9a07      	ldr	r2, [sp, #28]
 80058a8:	9900      	ldr	r1, [sp, #0]
 80058aa:	3201      	adds	r2, #1
 80058ac:	9207      	str	r2, [sp, #28]
 80058ae:	2230      	movs	r2, #48	; 0x30
 80058b0:	700a      	strb	r2, [r1, #0]
 80058b2:	781a      	ldrb	r2, [r3, #0]
 80058b4:	3201      	adds	r2, #1
 80058b6:	701a      	strb	r2, [r3, #0]
 80058b8:	e78c      	b.n	80057d4 <_dtoa_r+0x63c>
 80058ba:	4b7f      	ldr	r3, [pc, #508]	; (8005ab8 <_dtoa_r+0x920>)
 80058bc:	2200      	movs	r2, #0
 80058be:	f7fa fe9b 	bl	80005f8 <__aeabi_dmul>
 80058c2:	2200      	movs	r2, #0
 80058c4:	2300      	movs	r3, #0
 80058c6:	4606      	mov	r6, r0
 80058c8:	460f      	mov	r7, r1
 80058ca:	f7fb f8fd 	bl	8000ac8 <__aeabi_dcmpeq>
 80058ce:	2800      	cmp	r0, #0
 80058d0:	d09b      	beq.n	800580a <_dtoa_r+0x672>
 80058d2:	e7cd      	b.n	8005870 <_dtoa_r+0x6d8>
 80058d4:	9a08      	ldr	r2, [sp, #32]
 80058d6:	2a00      	cmp	r2, #0
 80058d8:	f000 80c4 	beq.w	8005a64 <_dtoa_r+0x8cc>
 80058dc:	9a05      	ldr	r2, [sp, #20]
 80058de:	2a01      	cmp	r2, #1
 80058e0:	f300 80a8 	bgt.w	8005a34 <_dtoa_r+0x89c>
 80058e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80058e6:	2a00      	cmp	r2, #0
 80058e8:	f000 80a0 	beq.w	8005a2c <_dtoa_r+0x894>
 80058ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80058f0:	9e06      	ldr	r6, [sp, #24]
 80058f2:	4645      	mov	r5, r8
 80058f4:	9a04      	ldr	r2, [sp, #16]
 80058f6:	2101      	movs	r1, #1
 80058f8:	441a      	add	r2, r3
 80058fa:	4620      	mov	r0, r4
 80058fc:	4498      	add	r8, r3
 80058fe:	9204      	str	r2, [sp, #16]
 8005900:	f000 fc46 	bl	8006190 <__i2b>
 8005904:	4607      	mov	r7, r0
 8005906:	2d00      	cmp	r5, #0
 8005908:	dd0b      	ble.n	8005922 <_dtoa_r+0x78a>
 800590a:	9b04      	ldr	r3, [sp, #16]
 800590c:	2b00      	cmp	r3, #0
 800590e:	dd08      	ble.n	8005922 <_dtoa_r+0x78a>
 8005910:	42ab      	cmp	r3, r5
 8005912:	9a04      	ldr	r2, [sp, #16]
 8005914:	bfa8      	it	ge
 8005916:	462b      	movge	r3, r5
 8005918:	eba8 0803 	sub.w	r8, r8, r3
 800591c:	1aed      	subs	r5, r5, r3
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	9304      	str	r3, [sp, #16]
 8005922:	9b06      	ldr	r3, [sp, #24]
 8005924:	b1fb      	cbz	r3, 8005966 <_dtoa_r+0x7ce>
 8005926:	9b08      	ldr	r3, [sp, #32]
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 809f 	beq.w	8005a6c <_dtoa_r+0x8d4>
 800592e:	2e00      	cmp	r6, #0
 8005930:	dd11      	ble.n	8005956 <_dtoa_r+0x7be>
 8005932:	4639      	mov	r1, r7
 8005934:	4632      	mov	r2, r6
 8005936:	4620      	mov	r0, r4
 8005938:	f000 fce6 	bl	8006308 <__pow5mult>
 800593c:	465a      	mov	r2, fp
 800593e:	4601      	mov	r1, r0
 8005940:	4607      	mov	r7, r0
 8005942:	4620      	mov	r0, r4
 8005944:	f000 fc3a 	bl	80061bc <__multiply>
 8005948:	4659      	mov	r1, fp
 800594a:	9007      	str	r0, [sp, #28]
 800594c:	4620      	mov	r0, r4
 800594e:	f000 fb63 	bl	8006018 <_Bfree>
 8005952:	9b07      	ldr	r3, [sp, #28]
 8005954:	469b      	mov	fp, r3
 8005956:	9b06      	ldr	r3, [sp, #24]
 8005958:	1b9a      	subs	r2, r3, r6
 800595a:	d004      	beq.n	8005966 <_dtoa_r+0x7ce>
 800595c:	4659      	mov	r1, fp
 800595e:	4620      	mov	r0, r4
 8005960:	f000 fcd2 	bl	8006308 <__pow5mult>
 8005964:	4683      	mov	fp, r0
 8005966:	2101      	movs	r1, #1
 8005968:	4620      	mov	r0, r4
 800596a:	f000 fc11 	bl	8006190 <__i2b>
 800596e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005970:	2b00      	cmp	r3, #0
 8005972:	4606      	mov	r6, r0
 8005974:	dd7c      	ble.n	8005a70 <_dtoa_r+0x8d8>
 8005976:	461a      	mov	r2, r3
 8005978:	4601      	mov	r1, r0
 800597a:	4620      	mov	r0, r4
 800597c:	f000 fcc4 	bl	8006308 <__pow5mult>
 8005980:	9b05      	ldr	r3, [sp, #20]
 8005982:	2b01      	cmp	r3, #1
 8005984:	4606      	mov	r6, r0
 8005986:	dd76      	ble.n	8005a76 <_dtoa_r+0x8de>
 8005988:	2300      	movs	r3, #0
 800598a:	9306      	str	r3, [sp, #24]
 800598c:	6933      	ldr	r3, [r6, #16]
 800598e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005992:	6918      	ldr	r0, [r3, #16]
 8005994:	f000 fbac 	bl	80060f0 <__hi0bits>
 8005998:	f1c0 0020 	rsb	r0, r0, #32
 800599c:	9b04      	ldr	r3, [sp, #16]
 800599e:	4418      	add	r0, r3
 80059a0:	f010 001f 	ands.w	r0, r0, #31
 80059a4:	f000 8086 	beq.w	8005ab4 <_dtoa_r+0x91c>
 80059a8:	f1c0 0320 	rsb	r3, r0, #32
 80059ac:	2b04      	cmp	r3, #4
 80059ae:	dd7f      	ble.n	8005ab0 <_dtoa_r+0x918>
 80059b0:	f1c0 001c 	rsb	r0, r0, #28
 80059b4:	9b04      	ldr	r3, [sp, #16]
 80059b6:	4403      	add	r3, r0
 80059b8:	4480      	add	r8, r0
 80059ba:	4405      	add	r5, r0
 80059bc:	9304      	str	r3, [sp, #16]
 80059be:	f1b8 0f00 	cmp.w	r8, #0
 80059c2:	dd05      	ble.n	80059d0 <_dtoa_r+0x838>
 80059c4:	4659      	mov	r1, fp
 80059c6:	4642      	mov	r2, r8
 80059c8:	4620      	mov	r0, r4
 80059ca:	f000 fcf7 	bl	80063bc <__lshift>
 80059ce:	4683      	mov	fp, r0
 80059d0:	9b04      	ldr	r3, [sp, #16]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	dd05      	ble.n	80059e2 <_dtoa_r+0x84a>
 80059d6:	4631      	mov	r1, r6
 80059d8:	461a      	mov	r2, r3
 80059da:	4620      	mov	r0, r4
 80059dc:	f000 fcee 	bl	80063bc <__lshift>
 80059e0:	4606      	mov	r6, r0
 80059e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d069      	beq.n	8005abc <_dtoa_r+0x924>
 80059e8:	4631      	mov	r1, r6
 80059ea:	4658      	mov	r0, fp
 80059ec:	f000 fd52 	bl	8006494 <__mcmp>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	da63      	bge.n	8005abc <_dtoa_r+0x924>
 80059f4:	2300      	movs	r3, #0
 80059f6:	4659      	mov	r1, fp
 80059f8:	220a      	movs	r2, #10
 80059fa:	4620      	mov	r0, r4
 80059fc:	f000 fb2e 	bl	800605c <__multadd>
 8005a00:	9b08      	ldr	r3, [sp, #32]
 8005a02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a06:	4683      	mov	fp, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 818f 	beq.w	8005d2c <_dtoa_r+0xb94>
 8005a0e:	4639      	mov	r1, r7
 8005a10:	2300      	movs	r3, #0
 8005a12:	220a      	movs	r2, #10
 8005a14:	4620      	mov	r0, r4
 8005a16:	f000 fb21 	bl	800605c <__multadd>
 8005a1a:	f1b9 0f00 	cmp.w	r9, #0
 8005a1e:	4607      	mov	r7, r0
 8005a20:	f300 808e 	bgt.w	8005b40 <_dtoa_r+0x9a8>
 8005a24:	9b05      	ldr	r3, [sp, #20]
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	dc50      	bgt.n	8005acc <_dtoa_r+0x934>
 8005a2a:	e089      	b.n	8005b40 <_dtoa_r+0x9a8>
 8005a2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005a32:	e75d      	b.n	80058f0 <_dtoa_r+0x758>
 8005a34:	9b01      	ldr	r3, [sp, #4]
 8005a36:	1e5e      	subs	r6, r3, #1
 8005a38:	9b06      	ldr	r3, [sp, #24]
 8005a3a:	42b3      	cmp	r3, r6
 8005a3c:	bfbf      	itttt	lt
 8005a3e:	9b06      	ldrlt	r3, [sp, #24]
 8005a40:	9606      	strlt	r6, [sp, #24]
 8005a42:	1af2      	sublt	r2, r6, r3
 8005a44:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005a46:	bfb6      	itet	lt
 8005a48:	189b      	addlt	r3, r3, r2
 8005a4a:	1b9e      	subge	r6, r3, r6
 8005a4c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005a4e:	9b01      	ldr	r3, [sp, #4]
 8005a50:	bfb8      	it	lt
 8005a52:	2600      	movlt	r6, #0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	bfb5      	itete	lt
 8005a58:	eba8 0503 	sublt.w	r5, r8, r3
 8005a5c:	9b01      	ldrge	r3, [sp, #4]
 8005a5e:	2300      	movlt	r3, #0
 8005a60:	4645      	movge	r5, r8
 8005a62:	e747      	b.n	80058f4 <_dtoa_r+0x75c>
 8005a64:	9e06      	ldr	r6, [sp, #24]
 8005a66:	9f08      	ldr	r7, [sp, #32]
 8005a68:	4645      	mov	r5, r8
 8005a6a:	e74c      	b.n	8005906 <_dtoa_r+0x76e>
 8005a6c:	9a06      	ldr	r2, [sp, #24]
 8005a6e:	e775      	b.n	800595c <_dtoa_r+0x7c4>
 8005a70:	9b05      	ldr	r3, [sp, #20]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	dc18      	bgt.n	8005aa8 <_dtoa_r+0x910>
 8005a76:	9b02      	ldr	r3, [sp, #8]
 8005a78:	b9b3      	cbnz	r3, 8005aa8 <_dtoa_r+0x910>
 8005a7a:	9b03      	ldr	r3, [sp, #12]
 8005a7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a80:	b9a3      	cbnz	r3, 8005aac <_dtoa_r+0x914>
 8005a82:	9b03      	ldr	r3, [sp, #12]
 8005a84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a88:	0d1b      	lsrs	r3, r3, #20
 8005a8a:	051b      	lsls	r3, r3, #20
 8005a8c:	b12b      	cbz	r3, 8005a9a <_dtoa_r+0x902>
 8005a8e:	9b04      	ldr	r3, [sp, #16]
 8005a90:	3301      	adds	r3, #1
 8005a92:	9304      	str	r3, [sp, #16]
 8005a94:	f108 0801 	add.w	r8, r8, #1
 8005a98:	2301      	movs	r3, #1
 8005a9a:	9306      	str	r3, [sp, #24]
 8005a9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f47f af74 	bne.w	800598c <_dtoa_r+0x7f4>
 8005aa4:	2001      	movs	r0, #1
 8005aa6:	e779      	b.n	800599c <_dtoa_r+0x804>
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	e7f6      	b.n	8005a9a <_dtoa_r+0x902>
 8005aac:	9b02      	ldr	r3, [sp, #8]
 8005aae:	e7f4      	b.n	8005a9a <_dtoa_r+0x902>
 8005ab0:	d085      	beq.n	80059be <_dtoa_r+0x826>
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	301c      	adds	r0, #28
 8005ab6:	e77d      	b.n	80059b4 <_dtoa_r+0x81c>
 8005ab8:	40240000 	.word	0x40240000
 8005abc:	9b01      	ldr	r3, [sp, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	dc38      	bgt.n	8005b34 <_dtoa_r+0x99c>
 8005ac2:	9b05      	ldr	r3, [sp, #20]
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	dd35      	ble.n	8005b34 <_dtoa_r+0x99c>
 8005ac8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005acc:	f1b9 0f00 	cmp.w	r9, #0
 8005ad0:	d10d      	bne.n	8005aee <_dtoa_r+0x956>
 8005ad2:	4631      	mov	r1, r6
 8005ad4:	464b      	mov	r3, r9
 8005ad6:	2205      	movs	r2, #5
 8005ad8:	4620      	mov	r0, r4
 8005ada:	f000 fabf 	bl	800605c <__multadd>
 8005ade:	4601      	mov	r1, r0
 8005ae0:	4606      	mov	r6, r0
 8005ae2:	4658      	mov	r0, fp
 8005ae4:	f000 fcd6 	bl	8006494 <__mcmp>
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	f73f adbd 	bgt.w	8005668 <_dtoa_r+0x4d0>
 8005aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005af0:	9d00      	ldr	r5, [sp, #0]
 8005af2:	ea6f 0a03 	mvn.w	sl, r3
 8005af6:	f04f 0800 	mov.w	r8, #0
 8005afa:	4631      	mov	r1, r6
 8005afc:	4620      	mov	r0, r4
 8005afe:	f000 fa8b 	bl	8006018 <_Bfree>
 8005b02:	2f00      	cmp	r7, #0
 8005b04:	f43f aeb4 	beq.w	8005870 <_dtoa_r+0x6d8>
 8005b08:	f1b8 0f00 	cmp.w	r8, #0
 8005b0c:	d005      	beq.n	8005b1a <_dtoa_r+0x982>
 8005b0e:	45b8      	cmp	r8, r7
 8005b10:	d003      	beq.n	8005b1a <_dtoa_r+0x982>
 8005b12:	4641      	mov	r1, r8
 8005b14:	4620      	mov	r0, r4
 8005b16:	f000 fa7f 	bl	8006018 <_Bfree>
 8005b1a:	4639      	mov	r1, r7
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f000 fa7b 	bl	8006018 <_Bfree>
 8005b22:	e6a5      	b.n	8005870 <_dtoa_r+0x6d8>
 8005b24:	2600      	movs	r6, #0
 8005b26:	4637      	mov	r7, r6
 8005b28:	e7e1      	b.n	8005aee <_dtoa_r+0x956>
 8005b2a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005b2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005b30:	4637      	mov	r7, r6
 8005b32:	e599      	b.n	8005668 <_dtoa_r+0x4d0>
 8005b34:	9b08      	ldr	r3, [sp, #32]
 8005b36:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f000 80fd 	beq.w	8005d3a <_dtoa_r+0xba2>
 8005b40:	2d00      	cmp	r5, #0
 8005b42:	dd05      	ble.n	8005b50 <_dtoa_r+0x9b8>
 8005b44:	4639      	mov	r1, r7
 8005b46:	462a      	mov	r2, r5
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f000 fc37 	bl	80063bc <__lshift>
 8005b4e:	4607      	mov	r7, r0
 8005b50:	9b06      	ldr	r3, [sp, #24]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d05c      	beq.n	8005c10 <_dtoa_r+0xa78>
 8005b56:	6879      	ldr	r1, [r7, #4]
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f000 fa1d 	bl	8005f98 <_Balloc>
 8005b5e:	4605      	mov	r5, r0
 8005b60:	b928      	cbnz	r0, 8005b6e <_dtoa_r+0x9d6>
 8005b62:	4b80      	ldr	r3, [pc, #512]	; (8005d64 <_dtoa_r+0xbcc>)
 8005b64:	4602      	mov	r2, r0
 8005b66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005b6a:	f7ff bb2e 	b.w	80051ca <_dtoa_r+0x32>
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	3202      	adds	r2, #2
 8005b72:	0092      	lsls	r2, r2, #2
 8005b74:	f107 010c 	add.w	r1, r7, #12
 8005b78:	300c      	adds	r0, #12
 8005b7a:	f000 f9ff 	bl	8005f7c <memcpy>
 8005b7e:	2201      	movs	r2, #1
 8005b80:	4629      	mov	r1, r5
 8005b82:	4620      	mov	r0, r4
 8005b84:	f000 fc1a 	bl	80063bc <__lshift>
 8005b88:	9b00      	ldr	r3, [sp, #0]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	9301      	str	r3, [sp, #4]
 8005b8e:	9b00      	ldr	r3, [sp, #0]
 8005b90:	444b      	add	r3, r9
 8005b92:	9307      	str	r3, [sp, #28]
 8005b94:	9b02      	ldr	r3, [sp, #8]
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	46b8      	mov	r8, r7
 8005b9c:	9306      	str	r3, [sp, #24]
 8005b9e:	4607      	mov	r7, r0
 8005ba0:	9b01      	ldr	r3, [sp, #4]
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	4658      	mov	r0, fp
 8005ba8:	9302      	str	r3, [sp, #8]
 8005baa:	f7ff fa69 	bl	8005080 <quorem>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	3330      	adds	r3, #48	; 0x30
 8005bb2:	9004      	str	r0, [sp, #16]
 8005bb4:	4641      	mov	r1, r8
 8005bb6:	4658      	mov	r0, fp
 8005bb8:	9308      	str	r3, [sp, #32]
 8005bba:	f000 fc6b 	bl	8006494 <__mcmp>
 8005bbe:	463a      	mov	r2, r7
 8005bc0:	4681      	mov	r9, r0
 8005bc2:	4631      	mov	r1, r6
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f000 fc81 	bl	80064cc <__mdiff>
 8005bca:	68c2      	ldr	r2, [r0, #12]
 8005bcc:	9b08      	ldr	r3, [sp, #32]
 8005bce:	4605      	mov	r5, r0
 8005bd0:	bb02      	cbnz	r2, 8005c14 <_dtoa_r+0xa7c>
 8005bd2:	4601      	mov	r1, r0
 8005bd4:	4658      	mov	r0, fp
 8005bd6:	f000 fc5d 	bl	8006494 <__mcmp>
 8005bda:	9b08      	ldr	r3, [sp, #32]
 8005bdc:	4602      	mov	r2, r0
 8005bde:	4629      	mov	r1, r5
 8005be0:	4620      	mov	r0, r4
 8005be2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005be6:	f000 fa17 	bl	8006018 <_Bfree>
 8005bea:	9b05      	ldr	r3, [sp, #20]
 8005bec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bee:	9d01      	ldr	r5, [sp, #4]
 8005bf0:	ea43 0102 	orr.w	r1, r3, r2
 8005bf4:	9b06      	ldr	r3, [sp, #24]
 8005bf6:	430b      	orrs	r3, r1
 8005bf8:	9b08      	ldr	r3, [sp, #32]
 8005bfa:	d10d      	bne.n	8005c18 <_dtoa_r+0xa80>
 8005bfc:	2b39      	cmp	r3, #57	; 0x39
 8005bfe:	d029      	beq.n	8005c54 <_dtoa_r+0xabc>
 8005c00:	f1b9 0f00 	cmp.w	r9, #0
 8005c04:	dd01      	ble.n	8005c0a <_dtoa_r+0xa72>
 8005c06:	9b04      	ldr	r3, [sp, #16]
 8005c08:	3331      	adds	r3, #49	; 0x31
 8005c0a:	9a02      	ldr	r2, [sp, #8]
 8005c0c:	7013      	strb	r3, [r2, #0]
 8005c0e:	e774      	b.n	8005afa <_dtoa_r+0x962>
 8005c10:	4638      	mov	r0, r7
 8005c12:	e7b9      	b.n	8005b88 <_dtoa_r+0x9f0>
 8005c14:	2201      	movs	r2, #1
 8005c16:	e7e2      	b.n	8005bde <_dtoa_r+0xa46>
 8005c18:	f1b9 0f00 	cmp.w	r9, #0
 8005c1c:	db06      	blt.n	8005c2c <_dtoa_r+0xa94>
 8005c1e:	9905      	ldr	r1, [sp, #20]
 8005c20:	ea41 0909 	orr.w	r9, r1, r9
 8005c24:	9906      	ldr	r1, [sp, #24]
 8005c26:	ea59 0101 	orrs.w	r1, r9, r1
 8005c2a:	d120      	bne.n	8005c6e <_dtoa_r+0xad6>
 8005c2c:	2a00      	cmp	r2, #0
 8005c2e:	ddec      	ble.n	8005c0a <_dtoa_r+0xa72>
 8005c30:	4659      	mov	r1, fp
 8005c32:	2201      	movs	r2, #1
 8005c34:	4620      	mov	r0, r4
 8005c36:	9301      	str	r3, [sp, #4]
 8005c38:	f000 fbc0 	bl	80063bc <__lshift>
 8005c3c:	4631      	mov	r1, r6
 8005c3e:	4683      	mov	fp, r0
 8005c40:	f000 fc28 	bl	8006494 <__mcmp>
 8005c44:	2800      	cmp	r0, #0
 8005c46:	9b01      	ldr	r3, [sp, #4]
 8005c48:	dc02      	bgt.n	8005c50 <_dtoa_r+0xab8>
 8005c4a:	d1de      	bne.n	8005c0a <_dtoa_r+0xa72>
 8005c4c:	07da      	lsls	r2, r3, #31
 8005c4e:	d5dc      	bpl.n	8005c0a <_dtoa_r+0xa72>
 8005c50:	2b39      	cmp	r3, #57	; 0x39
 8005c52:	d1d8      	bne.n	8005c06 <_dtoa_r+0xa6e>
 8005c54:	9a02      	ldr	r2, [sp, #8]
 8005c56:	2339      	movs	r3, #57	; 0x39
 8005c58:	7013      	strb	r3, [r2, #0]
 8005c5a:	462b      	mov	r3, r5
 8005c5c:	461d      	mov	r5, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005c64:	2a39      	cmp	r2, #57	; 0x39
 8005c66:	d050      	beq.n	8005d0a <_dtoa_r+0xb72>
 8005c68:	3201      	adds	r2, #1
 8005c6a:	701a      	strb	r2, [r3, #0]
 8005c6c:	e745      	b.n	8005afa <_dtoa_r+0x962>
 8005c6e:	2a00      	cmp	r2, #0
 8005c70:	dd03      	ble.n	8005c7a <_dtoa_r+0xae2>
 8005c72:	2b39      	cmp	r3, #57	; 0x39
 8005c74:	d0ee      	beq.n	8005c54 <_dtoa_r+0xabc>
 8005c76:	3301      	adds	r3, #1
 8005c78:	e7c7      	b.n	8005c0a <_dtoa_r+0xa72>
 8005c7a:	9a01      	ldr	r2, [sp, #4]
 8005c7c:	9907      	ldr	r1, [sp, #28]
 8005c7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005c82:	428a      	cmp	r2, r1
 8005c84:	d02a      	beq.n	8005cdc <_dtoa_r+0xb44>
 8005c86:	4659      	mov	r1, fp
 8005c88:	2300      	movs	r3, #0
 8005c8a:	220a      	movs	r2, #10
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	f000 f9e5 	bl	800605c <__multadd>
 8005c92:	45b8      	cmp	r8, r7
 8005c94:	4683      	mov	fp, r0
 8005c96:	f04f 0300 	mov.w	r3, #0
 8005c9a:	f04f 020a 	mov.w	r2, #10
 8005c9e:	4641      	mov	r1, r8
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	d107      	bne.n	8005cb4 <_dtoa_r+0xb1c>
 8005ca4:	f000 f9da 	bl	800605c <__multadd>
 8005ca8:	4680      	mov	r8, r0
 8005caa:	4607      	mov	r7, r0
 8005cac:	9b01      	ldr	r3, [sp, #4]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	9301      	str	r3, [sp, #4]
 8005cb2:	e775      	b.n	8005ba0 <_dtoa_r+0xa08>
 8005cb4:	f000 f9d2 	bl	800605c <__multadd>
 8005cb8:	4639      	mov	r1, r7
 8005cba:	4680      	mov	r8, r0
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	220a      	movs	r2, #10
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	f000 f9cb 	bl	800605c <__multadd>
 8005cc6:	4607      	mov	r7, r0
 8005cc8:	e7f0      	b.n	8005cac <_dtoa_r+0xb14>
 8005cca:	f1b9 0f00 	cmp.w	r9, #0
 8005cce:	9a00      	ldr	r2, [sp, #0]
 8005cd0:	bfcc      	ite	gt
 8005cd2:	464d      	movgt	r5, r9
 8005cd4:	2501      	movle	r5, #1
 8005cd6:	4415      	add	r5, r2
 8005cd8:	f04f 0800 	mov.w	r8, #0
 8005cdc:	4659      	mov	r1, fp
 8005cde:	2201      	movs	r2, #1
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	9301      	str	r3, [sp, #4]
 8005ce4:	f000 fb6a 	bl	80063bc <__lshift>
 8005ce8:	4631      	mov	r1, r6
 8005cea:	4683      	mov	fp, r0
 8005cec:	f000 fbd2 	bl	8006494 <__mcmp>
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	dcb2      	bgt.n	8005c5a <_dtoa_r+0xac2>
 8005cf4:	d102      	bne.n	8005cfc <_dtoa_r+0xb64>
 8005cf6:	9b01      	ldr	r3, [sp, #4]
 8005cf8:	07db      	lsls	r3, r3, #31
 8005cfa:	d4ae      	bmi.n	8005c5a <_dtoa_r+0xac2>
 8005cfc:	462b      	mov	r3, r5
 8005cfe:	461d      	mov	r5, r3
 8005d00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d04:	2a30      	cmp	r2, #48	; 0x30
 8005d06:	d0fa      	beq.n	8005cfe <_dtoa_r+0xb66>
 8005d08:	e6f7      	b.n	8005afa <_dtoa_r+0x962>
 8005d0a:	9a00      	ldr	r2, [sp, #0]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d1a5      	bne.n	8005c5c <_dtoa_r+0xac4>
 8005d10:	f10a 0a01 	add.w	sl, sl, #1
 8005d14:	2331      	movs	r3, #49	; 0x31
 8005d16:	e779      	b.n	8005c0c <_dtoa_r+0xa74>
 8005d18:	4b13      	ldr	r3, [pc, #76]	; (8005d68 <_dtoa_r+0xbd0>)
 8005d1a:	f7ff baaf 	b.w	800527c <_dtoa_r+0xe4>
 8005d1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f47f aa86 	bne.w	8005232 <_dtoa_r+0x9a>
 8005d26:	4b11      	ldr	r3, [pc, #68]	; (8005d6c <_dtoa_r+0xbd4>)
 8005d28:	f7ff baa8 	b.w	800527c <_dtoa_r+0xe4>
 8005d2c:	f1b9 0f00 	cmp.w	r9, #0
 8005d30:	dc03      	bgt.n	8005d3a <_dtoa_r+0xba2>
 8005d32:	9b05      	ldr	r3, [sp, #20]
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	f73f aec9 	bgt.w	8005acc <_dtoa_r+0x934>
 8005d3a:	9d00      	ldr	r5, [sp, #0]
 8005d3c:	4631      	mov	r1, r6
 8005d3e:	4658      	mov	r0, fp
 8005d40:	f7ff f99e 	bl	8005080 <quorem>
 8005d44:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005d48:	f805 3b01 	strb.w	r3, [r5], #1
 8005d4c:	9a00      	ldr	r2, [sp, #0]
 8005d4e:	1aaa      	subs	r2, r5, r2
 8005d50:	4591      	cmp	r9, r2
 8005d52:	ddba      	ble.n	8005cca <_dtoa_r+0xb32>
 8005d54:	4659      	mov	r1, fp
 8005d56:	2300      	movs	r3, #0
 8005d58:	220a      	movs	r2, #10
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	f000 f97e 	bl	800605c <__multadd>
 8005d60:	4683      	mov	fp, r0
 8005d62:	e7eb      	b.n	8005d3c <_dtoa_r+0xba4>
 8005d64:	0800724b 	.word	0x0800724b
 8005d68:	080071a4 	.word	0x080071a4
 8005d6c:	080071c8 	.word	0x080071c8

08005d70 <std>:
 8005d70:	2300      	movs	r3, #0
 8005d72:	b510      	push	{r4, lr}
 8005d74:	4604      	mov	r4, r0
 8005d76:	e9c0 3300 	strd	r3, r3, [r0]
 8005d7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d7e:	6083      	str	r3, [r0, #8]
 8005d80:	8181      	strh	r1, [r0, #12]
 8005d82:	6643      	str	r3, [r0, #100]	; 0x64
 8005d84:	81c2      	strh	r2, [r0, #14]
 8005d86:	6183      	str	r3, [r0, #24]
 8005d88:	4619      	mov	r1, r3
 8005d8a:	2208      	movs	r2, #8
 8005d8c:	305c      	adds	r0, #92	; 0x5c
 8005d8e:	f7fe fced 	bl	800476c <memset>
 8005d92:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <std+0x38>)
 8005d94:	6263      	str	r3, [r4, #36]	; 0x24
 8005d96:	4b05      	ldr	r3, [pc, #20]	; (8005dac <std+0x3c>)
 8005d98:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d9a:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <std+0x40>)
 8005d9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d9e:	4b05      	ldr	r3, [pc, #20]	; (8005db4 <std+0x44>)
 8005da0:	6224      	str	r4, [r4, #32]
 8005da2:	6323      	str	r3, [r4, #48]	; 0x30
 8005da4:	bd10      	pop	{r4, pc}
 8005da6:	bf00      	nop
 8005da8:	08006add 	.word	0x08006add
 8005dac:	08006aff 	.word	0x08006aff
 8005db0:	08006b37 	.word	0x08006b37
 8005db4:	08006b5b 	.word	0x08006b5b

08005db8 <_cleanup_r>:
 8005db8:	4901      	ldr	r1, [pc, #4]	; (8005dc0 <_cleanup_r+0x8>)
 8005dba:	f000 b8af 	b.w	8005f1c <_fwalk_reent>
 8005dbe:	bf00      	nop
 8005dc0:	08006e71 	.word	0x08006e71

08005dc4 <__sfmoreglue>:
 8005dc4:	b570      	push	{r4, r5, r6, lr}
 8005dc6:	1e4a      	subs	r2, r1, #1
 8005dc8:	2568      	movs	r5, #104	; 0x68
 8005dca:	4355      	muls	r5, r2
 8005dcc:	460e      	mov	r6, r1
 8005dce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005dd2:	f000 fcbf 	bl	8006754 <_malloc_r>
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	b140      	cbz	r0, 8005dec <__sfmoreglue+0x28>
 8005dda:	2100      	movs	r1, #0
 8005ddc:	e9c0 1600 	strd	r1, r6, [r0]
 8005de0:	300c      	adds	r0, #12
 8005de2:	60a0      	str	r0, [r4, #8]
 8005de4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005de8:	f7fe fcc0 	bl	800476c <memset>
 8005dec:	4620      	mov	r0, r4
 8005dee:	bd70      	pop	{r4, r5, r6, pc}

08005df0 <__sfp_lock_acquire>:
 8005df0:	4801      	ldr	r0, [pc, #4]	; (8005df8 <__sfp_lock_acquire+0x8>)
 8005df2:	f000 b8b8 	b.w	8005f66 <__retarget_lock_acquire_recursive>
 8005df6:	bf00      	nop
 8005df8:	2000027c 	.word	0x2000027c

08005dfc <__sfp_lock_release>:
 8005dfc:	4801      	ldr	r0, [pc, #4]	; (8005e04 <__sfp_lock_release+0x8>)
 8005dfe:	f000 b8b3 	b.w	8005f68 <__retarget_lock_release_recursive>
 8005e02:	bf00      	nop
 8005e04:	2000027c 	.word	0x2000027c

08005e08 <__sinit_lock_acquire>:
 8005e08:	4801      	ldr	r0, [pc, #4]	; (8005e10 <__sinit_lock_acquire+0x8>)
 8005e0a:	f000 b8ac 	b.w	8005f66 <__retarget_lock_acquire_recursive>
 8005e0e:	bf00      	nop
 8005e10:	20000277 	.word	0x20000277

08005e14 <__sinit_lock_release>:
 8005e14:	4801      	ldr	r0, [pc, #4]	; (8005e1c <__sinit_lock_release+0x8>)
 8005e16:	f000 b8a7 	b.w	8005f68 <__retarget_lock_release_recursive>
 8005e1a:	bf00      	nop
 8005e1c:	20000277 	.word	0x20000277

08005e20 <__sinit>:
 8005e20:	b510      	push	{r4, lr}
 8005e22:	4604      	mov	r4, r0
 8005e24:	f7ff fff0 	bl	8005e08 <__sinit_lock_acquire>
 8005e28:	69a3      	ldr	r3, [r4, #24]
 8005e2a:	b11b      	cbz	r3, 8005e34 <__sinit+0x14>
 8005e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e30:	f7ff bff0 	b.w	8005e14 <__sinit_lock_release>
 8005e34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e38:	6523      	str	r3, [r4, #80]	; 0x50
 8005e3a:	4b13      	ldr	r3, [pc, #76]	; (8005e88 <__sinit+0x68>)
 8005e3c:	4a13      	ldr	r2, [pc, #76]	; (8005e8c <__sinit+0x6c>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e42:	42a3      	cmp	r3, r4
 8005e44:	bf04      	itt	eq
 8005e46:	2301      	moveq	r3, #1
 8005e48:	61a3      	streq	r3, [r4, #24]
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	f000 f820 	bl	8005e90 <__sfp>
 8005e50:	6060      	str	r0, [r4, #4]
 8005e52:	4620      	mov	r0, r4
 8005e54:	f000 f81c 	bl	8005e90 <__sfp>
 8005e58:	60a0      	str	r0, [r4, #8]
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	f000 f818 	bl	8005e90 <__sfp>
 8005e60:	2200      	movs	r2, #0
 8005e62:	60e0      	str	r0, [r4, #12]
 8005e64:	2104      	movs	r1, #4
 8005e66:	6860      	ldr	r0, [r4, #4]
 8005e68:	f7ff ff82 	bl	8005d70 <std>
 8005e6c:	68a0      	ldr	r0, [r4, #8]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	2109      	movs	r1, #9
 8005e72:	f7ff ff7d 	bl	8005d70 <std>
 8005e76:	68e0      	ldr	r0, [r4, #12]
 8005e78:	2202      	movs	r2, #2
 8005e7a:	2112      	movs	r1, #18
 8005e7c:	f7ff ff78 	bl	8005d70 <std>
 8005e80:	2301      	movs	r3, #1
 8005e82:	61a3      	str	r3, [r4, #24]
 8005e84:	e7d2      	b.n	8005e2c <__sinit+0xc>
 8005e86:	bf00      	nop
 8005e88:	08007190 	.word	0x08007190
 8005e8c:	08005db9 	.word	0x08005db9

08005e90 <__sfp>:
 8005e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e92:	4607      	mov	r7, r0
 8005e94:	f7ff ffac 	bl	8005df0 <__sfp_lock_acquire>
 8005e98:	4b1e      	ldr	r3, [pc, #120]	; (8005f14 <__sfp+0x84>)
 8005e9a:	681e      	ldr	r6, [r3, #0]
 8005e9c:	69b3      	ldr	r3, [r6, #24]
 8005e9e:	b913      	cbnz	r3, 8005ea6 <__sfp+0x16>
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	f7ff ffbd 	bl	8005e20 <__sinit>
 8005ea6:	3648      	adds	r6, #72	; 0x48
 8005ea8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005eac:	3b01      	subs	r3, #1
 8005eae:	d503      	bpl.n	8005eb8 <__sfp+0x28>
 8005eb0:	6833      	ldr	r3, [r6, #0]
 8005eb2:	b30b      	cbz	r3, 8005ef8 <__sfp+0x68>
 8005eb4:	6836      	ldr	r6, [r6, #0]
 8005eb6:	e7f7      	b.n	8005ea8 <__sfp+0x18>
 8005eb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ebc:	b9d5      	cbnz	r5, 8005ef4 <__sfp+0x64>
 8005ebe:	4b16      	ldr	r3, [pc, #88]	; (8005f18 <__sfp+0x88>)
 8005ec0:	60e3      	str	r3, [r4, #12]
 8005ec2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ec6:	6665      	str	r5, [r4, #100]	; 0x64
 8005ec8:	f000 f84c 	bl	8005f64 <__retarget_lock_init_recursive>
 8005ecc:	f7ff ff96 	bl	8005dfc <__sfp_lock_release>
 8005ed0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ed4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ed8:	6025      	str	r5, [r4, #0]
 8005eda:	61a5      	str	r5, [r4, #24]
 8005edc:	2208      	movs	r2, #8
 8005ede:	4629      	mov	r1, r5
 8005ee0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ee4:	f7fe fc42 	bl	800476c <memset>
 8005ee8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005eec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ef4:	3468      	adds	r4, #104	; 0x68
 8005ef6:	e7d9      	b.n	8005eac <__sfp+0x1c>
 8005ef8:	2104      	movs	r1, #4
 8005efa:	4638      	mov	r0, r7
 8005efc:	f7ff ff62 	bl	8005dc4 <__sfmoreglue>
 8005f00:	4604      	mov	r4, r0
 8005f02:	6030      	str	r0, [r6, #0]
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d1d5      	bne.n	8005eb4 <__sfp+0x24>
 8005f08:	f7ff ff78 	bl	8005dfc <__sfp_lock_release>
 8005f0c:	230c      	movs	r3, #12
 8005f0e:	603b      	str	r3, [r7, #0]
 8005f10:	e7ee      	b.n	8005ef0 <__sfp+0x60>
 8005f12:	bf00      	nop
 8005f14:	08007190 	.word	0x08007190
 8005f18:	ffff0001 	.word	0xffff0001

08005f1c <_fwalk_reent>:
 8005f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f20:	4606      	mov	r6, r0
 8005f22:	4688      	mov	r8, r1
 8005f24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f28:	2700      	movs	r7, #0
 8005f2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f2e:	f1b9 0901 	subs.w	r9, r9, #1
 8005f32:	d505      	bpl.n	8005f40 <_fwalk_reent+0x24>
 8005f34:	6824      	ldr	r4, [r4, #0]
 8005f36:	2c00      	cmp	r4, #0
 8005f38:	d1f7      	bne.n	8005f2a <_fwalk_reent+0xe>
 8005f3a:	4638      	mov	r0, r7
 8005f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f40:	89ab      	ldrh	r3, [r5, #12]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d907      	bls.n	8005f56 <_fwalk_reent+0x3a>
 8005f46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	d003      	beq.n	8005f56 <_fwalk_reent+0x3a>
 8005f4e:	4629      	mov	r1, r5
 8005f50:	4630      	mov	r0, r6
 8005f52:	47c0      	blx	r8
 8005f54:	4307      	orrs	r7, r0
 8005f56:	3568      	adds	r5, #104	; 0x68
 8005f58:	e7e9      	b.n	8005f2e <_fwalk_reent+0x12>
	...

08005f5c <_localeconv_r>:
 8005f5c:	4800      	ldr	r0, [pc, #0]	; (8005f60 <_localeconv_r+0x4>)
 8005f5e:	4770      	bx	lr
 8005f60:	20000160 	.word	0x20000160

08005f64 <__retarget_lock_init_recursive>:
 8005f64:	4770      	bx	lr

08005f66 <__retarget_lock_acquire_recursive>:
 8005f66:	4770      	bx	lr

08005f68 <__retarget_lock_release_recursive>:
 8005f68:	4770      	bx	lr
	...

08005f6c <malloc>:
 8005f6c:	4b02      	ldr	r3, [pc, #8]	; (8005f78 <malloc+0xc>)
 8005f6e:	4601      	mov	r1, r0
 8005f70:	6818      	ldr	r0, [r3, #0]
 8005f72:	f000 bbef 	b.w	8006754 <_malloc_r>
 8005f76:	bf00      	nop
 8005f78:	2000000c 	.word	0x2000000c

08005f7c <memcpy>:
 8005f7c:	440a      	add	r2, r1
 8005f7e:	4291      	cmp	r1, r2
 8005f80:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f84:	d100      	bne.n	8005f88 <memcpy+0xc>
 8005f86:	4770      	bx	lr
 8005f88:	b510      	push	{r4, lr}
 8005f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f92:	4291      	cmp	r1, r2
 8005f94:	d1f9      	bne.n	8005f8a <memcpy+0xe>
 8005f96:	bd10      	pop	{r4, pc}

08005f98 <_Balloc>:
 8005f98:	b570      	push	{r4, r5, r6, lr}
 8005f9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f9c:	4604      	mov	r4, r0
 8005f9e:	460d      	mov	r5, r1
 8005fa0:	b976      	cbnz	r6, 8005fc0 <_Balloc+0x28>
 8005fa2:	2010      	movs	r0, #16
 8005fa4:	f7ff ffe2 	bl	8005f6c <malloc>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	6260      	str	r0, [r4, #36]	; 0x24
 8005fac:	b920      	cbnz	r0, 8005fb8 <_Balloc+0x20>
 8005fae:	4b18      	ldr	r3, [pc, #96]	; (8006010 <_Balloc+0x78>)
 8005fb0:	4818      	ldr	r0, [pc, #96]	; (8006014 <_Balloc+0x7c>)
 8005fb2:	2166      	movs	r1, #102	; 0x66
 8005fb4:	f000 fea8 	bl	8006d08 <__assert_func>
 8005fb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fbc:	6006      	str	r6, [r0, #0]
 8005fbe:	60c6      	str	r6, [r0, #12]
 8005fc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005fc2:	68f3      	ldr	r3, [r6, #12]
 8005fc4:	b183      	cbz	r3, 8005fe8 <_Balloc+0x50>
 8005fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005fce:	b9b8      	cbnz	r0, 8006000 <_Balloc+0x68>
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	fa01 f605 	lsl.w	r6, r1, r5
 8005fd6:	1d72      	adds	r2, r6, #5
 8005fd8:	0092      	lsls	r2, r2, #2
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f000 fb5a 	bl	8006694 <_calloc_r>
 8005fe0:	b160      	cbz	r0, 8005ffc <_Balloc+0x64>
 8005fe2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005fe6:	e00e      	b.n	8006006 <_Balloc+0x6e>
 8005fe8:	2221      	movs	r2, #33	; 0x21
 8005fea:	2104      	movs	r1, #4
 8005fec:	4620      	mov	r0, r4
 8005fee:	f000 fb51 	bl	8006694 <_calloc_r>
 8005ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ff4:	60f0      	str	r0, [r6, #12]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1e4      	bne.n	8005fc6 <_Balloc+0x2e>
 8005ffc:	2000      	movs	r0, #0
 8005ffe:	bd70      	pop	{r4, r5, r6, pc}
 8006000:	6802      	ldr	r2, [r0, #0]
 8006002:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006006:	2300      	movs	r3, #0
 8006008:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800600c:	e7f7      	b.n	8005ffe <_Balloc+0x66>
 800600e:	bf00      	nop
 8006010:	080071d5 	.word	0x080071d5
 8006014:	080072bc 	.word	0x080072bc

08006018 <_Bfree>:
 8006018:	b570      	push	{r4, r5, r6, lr}
 800601a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800601c:	4605      	mov	r5, r0
 800601e:	460c      	mov	r4, r1
 8006020:	b976      	cbnz	r6, 8006040 <_Bfree+0x28>
 8006022:	2010      	movs	r0, #16
 8006024:	f7ff ffa2 	bl	8005f6c <malloc>
 8006028:	4602      	mov	r2, r0
 800602a:	6268      	str	r0, [r5, #36]	; 0x24
 800602c:	b920      	cbnz	r0, 8006038 <_Bfree+0x20>
 800602e:	4b09      	ldr	r3, [pc, #36]	; (8006054 <_Bfree+0x3c>)
 8006030:	4809      	ldr	r0, [pc, #36]	; (8006058 <_Bfree+0x40>)
 8006032:	218a      	movs	r1, #138	; 0x8a
 8006034:	f000 fe68 	bl	8006d08 <__assert_func>
 8006038:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800603c:	6006      	str	r6, [r0, #0]
 800603e:	60c6      	str	r6, [r0, #12]
 8006040:	b13c      	cbz	r4, 8006052 <_Bfree+0x3a>
 8006042:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006044:	6862      	ldr	r2, [r4, #4]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800604c:	6021      	str	r1, [r4, #0]
 800604e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006052:	bd70      	pop	{r4, r5, r6, pc}
 8006054:	080071d5 	.word	0x080071d5
 8006058:	080072bc 	.word	0x080072bc

0800605c <__multadd>:
 800605c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006060:	690e      	ldr	r6, [r1, #16]
 8006062:	4607      	mov	r7, r0
 8006064:	4698      	mov	r8, r3
 8006066:	460c      	mov	r4, r1
 8006068:	f101 0014 	add.w	r0, r1, #20
 800606c:	2300      	movs	r3, #0
 800606e:	6805      	ldr	r5, [r0, #0]
 8006070:	b2a9      	uxth	r1, r5
 8006072:	fb02 8101 	mla	r1, r2, r1, r8
 8006076:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800607a:	0c2d      	lsrs	r5, r5, #16
 800607c:	fb02 c505 	mla	r5, r2, r5, ip
 8006080:	b289      	uxth	r1, r1
 8006082:	3301      	adds	r3, #1
 8006084:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006088:	429e      	cmp	r6, r3
 800608a:	f840 1b04 	str.w	r1, [r0], #4
 800608e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006092:	dcec      	bgt.n	800606e <__multadd+0x12>
 8006094:	f1b8 0f00 	cmp.w	r8, #0
 8006098:	d022      	beq.n	80060e0 <__multadd+0x84>
 800609a:	68a3      	ldr	r3, [r4, #8]
 800609c:	42b3      	cmp	r3, r6
 800609e:	dc19      	bgt.n	80060d4 <__multadd+0x78>
 80060a0:	6861      	ldr	r1, [r4, #4]
 80060a2:	4638      	mov	r0, r7
 80060a4:	3101      	adds	r1, #1
 80060a6:	f7ff ff77 	bl	8005f98 <_Balloc>
 80060aa:	4605      	mov	r5, r0
 80060ac:	b928      	cbnz	r0, 80060ba <__multadd+0x5e>
 80060ae:	4602      	mov	r2, r0
 80060b0:	4b0d      	ldr	r3, [pc, #52]	; (80060e8 <__multadd+0x8c>)
 80060b2:	480e      	ldr	r0, [pc, #56]	; (80060ec <__multadd+0x90>)
 80060b4:	21b5      	movs	r1, #181	; 0xb5
 80060b6:	f000 fe27 	bl	8006d08 <__assert_func>
 80060ba:	6922      	ldr	r2, [r4, #16]
 80060bc:	3202      	adds	r2, #2
 80060be:	f104 010c 	add.w	r1, r4, #12
 80060c2:	0092      	lsls	r2, r2, #2
 80060c4:	300c      	adds	r0, #12
 80060c6:	f7ff ff59 	bl	8005f7c <memcpy>
 80060ca:	4621      	mov	r1, r4
 80060cc:	4638      	mov	r0, r7
 80060ce:	f7ff ffa3 	bl	8006018 <_Bfree>
 80060d2:	462c      	mov	r4, r5
 80060d4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80060d8:	3601      	adds	r6, #1
 80060da:	f8c3 8014 	str.w	r8, [r3, #20]
 80060de:	6126      	str	r6, [r4, #16]
 80060e0:	4620      	mov	r0, r4
 80060e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060e6:	bf00      	nop
 80060e8:	0800724b 	.word	0x0800724b
 80060ec:	080072bc 	.word	0x080072bc

080060f0 <__hi0bits>:
 80060f0:	0c03      	lsrs	r3, r0, #16
 80060f2:	041b      	lsls	r3, r3, #16
 80060f4:	b9d3      	cbnz	r3, 800612c <__hi0bits+0x3c>
 80060f6:	0400      	lsls	r0, r0, #16
 80060f8:	2310      	movs	r3, #16
 80060fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80060fe:	bf04      	itt	eq
 8006100:	0200      	lsleq	r0, r0, #8
 8006102:	3308      	addeq	r3, #8
 8006104:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006108:	bf04      	itt	eq
 800610a:	0100      	lsleq	r0, r0, #4
 800610c:	3304      	addeq	r3, #4
 800610e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006112:	bf04      	itt	eq
 8006114:	0080      	lsleq	r0, r0, #2
 8006116:	3302      	addeq	r3, #2
 8006118:	2800      	cmp	r0, #0
 800611a:	db05      	blt.n	8006128 <__hi0bits+0x38>
 800611c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006120:	f103 0301 	add.w	r3, r3, #1
 8006124:	bf08      	it	eq
 8006126:	2320      	moveq	r3, #32
 8006128:	4618      	mov	r0, r3
 800612a:	4770      	bx	lr
 800612c:	2300      	movs	r3, #0
 800612e:	e7e4      	b.n	80060fa <__hi0bits+0xa>

08006130 <__lo0bits>:
 8006130:	6803      	ldr	r3, [r0, #0]
 8006132:	f013 0207 	ands.w	r2, r3, #7
 8006136:	4601      	mov	r1, r0
 8006138:	d00b      	beq.n	8006152 <__lo0bits+0x22>
 800613a:	07da      	lsls	r2, r3, #31
 800613c:	d424      	bmi.n	8006188 <__lo0bits+0x58>
 800613e:	0798      	lsls	r0, r3, #30
 8006140:	bf49      	itett	mi
 8006142:	085b      	lsrmi	r3, r3, #1
 8006144:	089b      	lsrpl	r3, r3, #2
 8006146:	2001      	movmi	r0, #1
 8006148:	600b      	strmi	r3, [r1, #0]
 800614a:	bf5c      	itt	pl
 800614c:	600b      	strpl	r3, [r1, #0]
 800614e:	2002      	movpl	r0, #2
 8006150:	4770      	bx	lr
 8006152:	b298      	uxth	r0, r3
 8006154:	b9b0      	cbnz	r0, 8006184 <__lo0bits+0x54>
 8006156:	0c1b      	lsrs	r3, r3, #16
 8006158:	2010      	movs	r0, #16
 800615a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800615e:	bf04      	itt	eq
 8006160:	0a1b      	lsreq	r3, r3, #8
 8006162:	3008      	addeq	r0, #8
 8006164:	071a      	lsls	r2, r3, #28
 8006166:	bf04      	itt	eq
 8006168:	091b      	lsreq	r3, r3, #4
 800616a:	3004      	addeq	r0, #4
 800616c:	079a      	lsls	r2, r3, #30
 800616e:	bf04      	itt	eq
 8006170:	089b      	lsreq	r3, r3, #2
 8006172:	3002      	addeq	r0, #2
 8006174:	07da      	lsls	r2, r3, #31
 8006176:	d403      	bmi.n	8006180 <__lo0bits+0x50>
 8006178:	085b      	lsrs	r3, r3, #1
 800617a:	f100 0001 	add.w	r0, r0, #1
 800617e:	d005      	beq.n	800618c <__lo0bits+0x5c>
 8006180:	600b      	str	r3, [r1, #0]
 8006182:	4770      	bx	lr
 8006184:	4610      	mov	r0, r2
 8006186:	e7e8      	b.n	800615a <__lo0bits+0x2a>
 8006188:	2000      	movs	r0, #0
 800618a:	4770      	bx	lr
 800618c:	2020      	movs	r0, #32
 800618e:	4770      	bx	lr

08006190 <__i2b>:
 8006190:	b510      	push	{r4, lr}
 8006192:	460c      	mov	r4, r1
 8006194:	2101      	movs	r1, #1
 8006196:	f7ff feff 	bl	8005f98 <_Balloc>
 800619a:	4602      	mov	r2, r0
 800619c:	b928      	cbnz	r0, 80061aa <__i2b+0x1a>
 800619e:	4b05      	ldr	r3, [pc, #20]	; (80061b4 <__i2b+0x24>)
 80061a0:	4805      	ldr	r0, [pc, #20]	; (80061b8 <__i2b+0x28>)
 80061a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80061a6:	f000 fdaf 	bl	8006d08 <__assert_func>
 80061aa:	2301      	movs	r3, #1
 80061ac:	6144      	str	r4, [r0, #20]
 80061ae:	6103      	str	r3, [r0, #16]
 80061b0:	bd10      	pop	{r4, pc}
 80061b2:	bf00      	nop
 80061b4:	0800724b 	.word	0x0800724b
 80061b8:	080072bc 	.word	0x080072bc

080061bc <__multiply>:
 80061bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c0:	4614      	mov	r4, r2
 80061c2:	690a      	ldr	r2, [r1, #16]
 80061c4:	6923      	ldr	r3, [r4, #16]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	bfb8      	it	lt
 80061ca:	460b      	movlt	r3, r1
 80061cc:	460d      	mov	r5, r1
 80061ce:	bfbc      	itt	lt
 80061d0:	4625      	movlt	r5, r4
 80061d2:	461c      	movlt	r4, r3
 80061d4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80061d8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80061dc:	68ab      	ldr	r3, [r5, #8]
 80061de:	6869      	ldr	r1, [r5, #4]
 80061e0:	eb0a 0709 	add.w	r7, sl, r9
 80061e4:	42bb      	cmp	r3, r7
 80061e6:	b085      	sub	sp, #20
 80061e8:	bfb8      	it	lt
 80061ea:	3101      	addlt	r1, #1
 80061ec:	f7ff fed4 	bl	8005f98 <_Balloc>
 80061f0:	b930      	cbnz	r0, 8006200 <__multiply+0x44>
 80061f2:	4602      	mov	r2, r0
 80061f4:	4b42      	ldr	r3, [pc, #264]	; (8006300 <__multiply+0x144>)
 80061f6:	4843      	ldr	r0, [pc, #268]	; (8006304 <__multiply+0x148>)
 80061f8:	f240 115d 	movw	r1, #349	; 0x15d
 80061fc:	f000 fd84 	bl	8006d08 <__assert_func>
 8006200:	f100 0614 	add.w	r6, r0, #20
 8006204:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006208:	4633      	mov	r3, r6
 800620a:	2200      	movs	r2, #0
 800620c:	4543      	cmp	r3, r8
 800620e:	d31e      	bcc.n	800624e <__multiply+0x92>
 8006210:	f105 0c14 	add.w	ip, r5, #20
 8006214:	f104 0314 	add.w	r3, r4, #20
 8006218:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800621c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006220:	9202      	str	r2, [sp, #8]
 8006222:	ebac 0205 	sub.w	r2, ip, r5
 8006226:	3a15      	subs	r2, #21
 8006228:	f022 0203 	bic.w	r2, r2, #3
 800622c:	3204      	adds	r2, #4
 800622e:	f105 0115 	add.w	r1, r5, #21
 8006232:	458c      	cmp	ip, r1
 8006234:	bf38      	it	cc
 8006236:	2204      	movcc	r2, #4
 8006238:	9201      	str	r2, [sp, #4]
 800623a:	9a02      	ldr	r2, [sp, #8]
 800623c:	9303      	str	r3, [sp, #12]
 800623e:	429a      	cmp	r2, r3
 8006240:	d808      	bhi.n	8006254 <__multiply+0x98>
 8006242:	2f00      	cmp	r7, #0
 8006244:	dc55      	bgt.n	80062f2 <__multiply+0x136>
 8006246:	6107      	str	r7, [r0, #16]
 8006248:	b005      	add	sp, #20
 800624a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800624e:	f843 2b04 	str.w	r2, [r3], #4
 8006252:	e7db      	b.n	800620c <__multiply+0x50>
 8006254:	f8b3 a000 	ldrh.w	sl, [r3]
 8006258:	f1ba 0f00 	cmp.w	sl, #0
 800625c:	d020      	beq.n	80062a0 <__multiply+0xe4>
 800625e:	f105 0e14 	add.w	lr, r5, #20
 8006262:	46b1      	mov	r9, r6
 8006264:	2200      	movs	r2, #0
 8006266:	f85e 4b04 	ldr.w	r4, [lr], #4
 800626a:	f8d9 b000 	ldr.w	fp, [r9]
 800626e:	b2a1      	uxth	r1, r4
 8006270:	fa1f fb8b 	uxth.w	fp, fp
 8006274:	fb0a b101 	mla	r1, sl, r1, fp
 8006278:	4411      	add	r1, r2
 800627a:	f8d9 2000 	ldr.w	r2, [r9]
 800627e:	0c24      	lsrs	r4, r4, #16
 8006280:	0c12      	lsrs	r2, r2, #16
 8006282:	fb0a 2404 	mla	r4, sl, r4, r2
 8006286:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800628a:	b289      	uxth	r1, r1
 800628c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006290:	45f4      	cmp	ip, lr
 8006292:	f849 1b04 	str.w	r1, [r9], #4
 8006296:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800629a:	d8e4      	bhi.n	8006266 <__multiply+0xaa>
 800629c:	9901      	ldr	r1, [sp, #4]
 800629e:	5072      	str	r2, [r6, r1]
 80062a0:	9a03      	ldr	r2, [sp, #12]
 80062a2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80062a6:	3304      	adds	r3, #4
 80062a8:	f1b9 0f00 	cmp.w	r9, #0
 80062ac:	d01f      	beq.n	80062ee <__multiply+0x132>
 80062ae:	6834      	ldr	r4, [r6, #0]
 80062b0:	f105 0114 	add.w	r1, r5, #20
 80062b4:	46b6      	mov	lr, r6
 80062b6:	f04f 0a00 	mov.w	sl, #0
 80062ba:	880a      	ldrh	r2, [r1, #0]
 80062bc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80062c0:	fb09 b202 	mla	r2, r9, r2, fp
 80062c4:	4492      	add	sl, r2
 80062c6:	b2a4      	uxth	r4, r4
 80062c8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80062cc:	f84e 4b04 	str.w	r4, [lr], #4
 80062d0:	f851 4b04 	ldr.w	r4, [r1], #4
 80062d4:	f8be 2000 	ldrh.w	r2, [lr]
 80062d8:	0c24      	lsrs	r4, r4, #16
 80062da:	fb09 2404 	mla	r4, r9, r4, r2
 80062de:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80062e2:	458c      	cmp	ip, r1
 80062e4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80062e8:	d8e7      	bhi.n	80062ba <__multiply+0xfe>
 80062ea:	9a01      	ldr	r2, [sp, #4]
 80062ec:	50b4      	str	r4, [r6, r2]
 80062ee:	3604      	adds	r6, #4
 80062f0:	e7a3      	b.n	800623a <__multiply+0x7e>
 80062f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1a5      	bne.n	8006246 <__multiply+0x8a>
 80062fa:	3f01      	subs	r7, #1
 80062fc:	e7a1      	b.n	8006242 <__multiply+0x86>
 80062fe:	bf00      	nop
 8006300:	0800724b 	.word	0x0800724b
 8006304:	080072bc 	.word	0x080072bc

08006308 <__pow5mult>:
 8006308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800630c:	4615      	mov	r5, r2
 800630e:	f012 0203 	ands.w	r2, r2, #3
 8006312:	4606      	mov	r6, r0
 8006314:	460f      	mov	r7, r1
 8006316:	d007      	beq.n	8006328 <__pow5mult+0x20>
 8006318:	4c25      	ldr	r4, [pc, #148]	; (80063b0 <__pow5mult+0xa8>)
 800631a:	3a01      	subs	r2, #1
 800631c:	2300      	movs	r3, #0
 800631e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006322:	f7ff fe9b 	bl	800605c <__multadd>
 8006326:	4607      	mov	r7, r0
 8006328:	10ad      	asrs	r5, r5, #2
 800632a:	d03d      	beq.n	80063a8 <__pow5mult+0xa0>
 800632c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800632e:	b97c      	cbnz	r4, 8006350 <__pow5mult+0x48>
 8006330:	2010      	movs	r0, #16
 8006332:	f7ff fe1b 	bl	8005f6c <malloc>
 8006336:	4602      	mov	r2, r0
 8006338:	6270      	str	r0, [r6, #36]	; 0x24
 800633a:	b928      	cbnz	r0, 8006348 <__pow5mult+0x40>
 800633c:	4b1d      	ldr	r3, [pc, #116]	; (80063b4 <__pow5mult+0xac>)
 800633e:	481e      	ldr	r0, [pc, #120]	; (80063b8 <__pow5mult+0xb0>)
 8006340:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006344:	f000 fce0 	bl	8006d08 <__assert_func>
 8006348:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800634c:	6004      	str	r4, [r0, #0]
 800634e:	60c4      	str	r4, [r0, #12]
 8006350:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006354:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006358:	b94c      	cbnz	r4, 800636e <__pow5mult+0x66>
 800635a:	f240 2171 	movw	r1, #625	; 0x271
 800635e:	4630      	mov	r0, r6
 8006360:	f7ff ff16 	bl	8006190 <__i2b>
 8006364:	2300      	movs	r3, #0
 8006366:	f8c8 0008 	str.w	r0, [r8, #8]
 800636a:	4604      	mov	r4, r0
 800636c:	6003      	str	r3, [r0, #0]
 800636e:	f04f 0900 	mov.w	r9, #0
 8006372:	07eb      	lsls	r3, r5, #31
 8006374:	d50a      	bpl.n	800638c <__pow5mult+0x84>
 8006376:	4639      	mov	r1, r7
 8006378:	4622      	mov	r2, r4
 800637a:	4630      	mov	r0, r6
 800637c:	f7ff ff1e 	bl	80061bc <__multiply>
 8006380:	4639      	mov	r1, r7
 8006382:	4680      	mov	r8, r0
 8006384:	4630      	mov	r0, r6
 8006386:	f7ff fe47 	bl	8006018 <_Bfree>
 800638a:	4647      	mov	r7, r8
 800638c:	106d      	asrs	r5, r5, #1
 800638e:	d00b      	beq.n	80063a8 <__pow5mult+0xa0>
 8006390:	6820      	ldr	r0, [r4, #0]
 8006392:	b938      	cbnz	r0, 80063a4 <__pow5mult+0x9c>
 8006394:	4622      	mov	r2, r4
 8006396:	4621      	mov	r1, r4
 8006398:	4630      	mov	r0, r6
 800639a:	f7ff ff0f 	bl	80061bc <__multiply>
 800639e:	6020      	str	r0, [r4, #0]
 80063a0:	f8c0 9000 	str.w	r9, [r0]
 80063a4:	4604      	mov	r4, r0
 80063a6:	e7e4      	b.n	8006372 <__pow5mult+0x6a>
 80063a8:	4638      	mov	r0, r7
 80063aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ae:	bf00      	nop
 80063b0:	08007410 	.word	0x08007410
 80063b4:	080071d5 	.word	0x080071d5
 80063b8:	080072bc 	.word	0x080072bc

080063bc <__lshift>:
 80063bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063c0:	460c      	mov	r4, r1
 80063c2:	6849      	ldr	r1, [r1, #4]
 80063c4:	6923      	ldr	r3, [r4, #16]
 80063c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80063ca:	68a3      	ldr	r3, [r4, #8]
 80063cc:	4607      	mov	r7, r0
 80063ce:	4691      	mov	r9, r2
 80063d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80063d4:	f108 0601 	add.w	r6, r8, #1
 80063d8:	42b3      	cmp	r3, r6
 80063da:	db0b      	blt.n	80063f4 <__lshift+0x38>
 80063dc:	4638      	mov	r0, r7
 80063de:	f7ff fddb 	bl	8005f98 <_Balloc>
 80063e2:	4605      	mov	r5, r0
 80063e4:	b948      	cbnz	r0, 80063fa <__lshift+0x3e>
 80063e6:	4602      	mov	r2, r0
 80063e8:	4b28      	ldr	r3, [pc, #160]	; (800648c <__lshift+0xd0>)
 80063ea:	4829      	ldr	r0, [pc, #164]	; (8006490 <__lshift+0xd4>)
 80063ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80063f0:	f000 fc8a 	bl	8006d08 <__assert_func>
 80063f4:	3101      	adds	r1, #1
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	e7ee      	b.n	80063d8 <__lshift+0x1c>
 80063fa:	2300      	movs	r3, #0
 80063fc:	f100 0114 	add.w	r1, r0, #20
 8006400:	f100 0210 	add.w	r2, r0, #16
 8006404:	4618      	mov	r0, r3
 8006406:	4553      	cmp	r3, sl
 8006408:	db33      	blt.n	8006472 <__lshift+0xb6>
 800640a:	6920      	ldr	r0, [r4, #16]
 800640c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006410:	f104 0314 	add.w	r3, r4, #20
 8006414:	f019 091f 	ands.w	r9, r9, #31
 8006418:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800641c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006420:	d02b      	beq.n	800647a <__lshift+0xbe>
 8006422:	f1c9 0e20 	rsb	lr, r9, #32
 8006426:	468a      	mov	sl, r1
 8006428:	2200      	movs	r2, #0
 800642a:	6818      	ldr	r0, [r3, #0]
 800642c:	fa00 f009 	lsl.w	r0, r0, r9
 8006430:	4302      	orrs	r2, r0
 8006432:	f84a 2b04 	str.w	r2, [sl], #4
 8006436:	f853 2b04 	ldr.w	r2, [r3], #4
 800643a:	459c      	cmp	ip, r3
 800643c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006440:	d8f3      	bhi.n	800642a <__lshift+0x6e>
 8006442:	ebac 0304 	sub.w	r3, ip, r4
 8006446:	3b15      	subs	r3, #21
 8006448:	f023 0303 	bic.w	r3, r3, #3
 800644c:	3304      	adds	r3, #4
 800644e:	f104 0015 	add.w	r0, r4, #21
 8006452:	4584      	cmp	ip, r0
 8006454:	bf38      	it	cc
 8006456:	2304      	movcc	r3, #4
 8006458:	50ca      	str	r2, [r1, r3]
 800645a:	b10a      	cbz	r2, 8006460 <__lshift+0xa4>
 800645c:	f108 0602 	add.w	r6, r8, #2
 8006460:	3e01      	subs	r6, #1
 8006462:	4638      	mov	r0, r7
 8006464:	612e      	str	r6, [r5, #16]
 8006466:	4621      	mov	r1, r4
 8006468:	f7ff fdd6 	bl	8006018 <_Bfree>
 800646c:	4628      	mov	r0, r5
 800646e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006472:	f842 0f04 	str.w	r0, [r2, #4]!
 8006476:	3301      	adds	r3, #1
 8006478:	e7c5      	b.n	8006406 <__lshift+0x4a>
 800647a:	3904      	subs	r1, #4
 800647c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006480:	f841 2f04 	str.w	r2, [r1, #4]!
 8006484:	459c      	cmp	ip, r3
 8006486:	d8f9      	bhi.n	800647c <__lshift+0xc0>
 8006488:	e7ea      	b.n	8006460 <__lshift+0xa4>
 800648a:	bf00      	nop
 800648c:	0800724b 	.word	0x0800724b
 8006490:	080072bc 	.word	0x080072bc

08006494 <__mcmp>:
 8006494:	b530      	push	{r4, r5, lr}
 8006496:	6902      	ldr	r2, [r0, #16]
 8006498:	690c      	ldr	r4, [r1, #16]
 800649a:	1b12      	subs	r2, r2, r4
 800649c:	d10e      	bne.n	80064bc <__mcmp+0x28>
 800649e:	f100 0314 	add.w	r3, r0, #20
 80064a2:	3114      	adds	r1, #20
 80064a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80064a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80064ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80064b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80064b4:	42a5      	cmp	r5, r4
 80064b6:	d003      	beq.n	80064c0 <__mcmp+0x2c>
 80064b8:	d305      	bcc.n	80064c6 <__mcmp+0x32>
 80064ba:	2201      	movs	r2, #1
 80064bc:	4610      	mov	r0, r2
 80064be:	bd30      	pop	{r4, r5, pc}
 80064c0:	4283      	cmp	r3, r0
 80064c2:	d3f3      	bcc.n	80064ac <__mcmp+0x18>
 80064c4:	e7fa      	b.n	80064bc <__mcmp+0x28>
 80064c6:	f04f 32ff 	mov.w	r2, #4294967295
 80064ca:	e7f7      	b.n	80064bc <__mcmp+0x28>

080064cc <__mdiff>:
 80064cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d0:	460c      	mov	r4, r1
 80064d2:	4606      	mov	r6, r0
 80064d4:	4611      	mov	r1, r2
 80064d6:	4620      	mov	r0, r4
 80064d8:	4617      	mov	r7, r2
 80064da:	f7ff ffdb 	bl	8006494 <__mcmp>
 80064de:	1e05      	subs	r5, r0, #0
 80064e0:	d110      	bne.n	8006504 <__mdiff+0x38>
 80064e2:	4629      	mov	r1, r5
 80064e4:	4630      	mov	r0, r6
 80064e6:	f7ff fd57 	bl	8005f98 <_Balloc>
 80064ea:	b930      	cbnz	r0, 80064fa <__mdiff+0x2e>
 80064ec:	4b39      	ldr	r3, [pc, #228]	; (80065d4 <__mdiff+0x108>)
 80064ee:	4602      	mov	r2, r0
 80064f0:	f240 2132 	movw	r1, #562	; 0x232
 80064f4:	4838      	ldr	r0, [pc, #224]	; (80065d8 <__mdiff+0x10c>)
 80064f6:	f000 fc07 	bl	8006d08 <__assert_func>
 80064fa:	2301      	movs	r3, #1
 80064fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006500:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006504:	bfa4      	itt	ge
 8006506:	463b      	movge	r3, r7
 8006508:	4627      	movge	r7, r4
 800650a:	4630      	mov	r0, r6
 800650c:	6879      	ldr	r1, [r7, #4]
 800650e:	bfa6      	itte	ge
 8006510:	461c      	movge	r4, r3
 8006512:	2500      	movge	r5, #0
 8006514:	2501      	movlt	r5, #1
 8006516:	f7ff fd3f 	bl	8005f98 <_Balloc>
 800651a:	b920      	cbnz	r0, 8006526 <__mdiff+0x5a>
 800651c:	4b2d      	ldr	r3, [pc, #180]	; (80065d4 <__mdiff+0x108>)
 800651e:	4602      	mov	r2, r0
 8006520:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006524:	e7e6      	b.n	80064f4 <__mdiff+0x28>
 8006526:	693e      	ldr	r6, [r7, #16]
 8006528:	60c5      	str	r5, [r0, #12]
 800652a:	6925      	ldr	r5, [r4, #16]
 800652c:	f107 0114 	add.w	r1, r7, #20
 8006530:	f104 0914 	add.w	r9, r4, #20
 8006534:	f100 0e14 	add.w	lr, r0, #20
 8006538:	f107 0210 	add.w	r2, r7, #16
 800653c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006540:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006544:	46f2      	mov	sl, lr
 8006546:	2700      	movs	r7, #0
 8006548:	f859 3b04 	ldr.w	r3, [r9], #4
 800654c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006550:	fa1f f883 	uxth.w	r8, r3
 8006554:	fa17 f78b 	uxtah	r7, r7, fp
 8006558:	0c1b      	lsrs	r3, r3, #16
 800655a:	eba7 0808 	sub.w	r8, r7, r8
 800655e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006562:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006566:	fa1f f888 	uxth.w	r8, r8
 800656a:	141f      	asrs	r7, r3, #16
 800656c:	454d      	cmp	r5, r9
 800656e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006572:	f84a 3b04 	str.w	r3, [sl], #4
 8006576:	d8e7      	bhi.n	8006548 <__mdiff+0x7c>
 8006578:	1b2b      	subs	r3, r5, r4
 800657a:	3b15      	subs	r3, #21
 800657c:	f023 0303 	bic.w	r3, r3, #3
 8006580:	3304      	adds	r3, #4
 8006582:	3415      	adds	r4, #21
 8006584:	42a5      	cmp	r5, r4
 8006586:	bf38      	it	cc
 8006588:	2304      	movcc	r3, #4
 800658a:	4419      	add	r1, r3
 800658c:	4473      	add	r3, lr
 800658e:	469e      	mov	lr, r3
 8006590:	460d      	mov	r5, r1
 8006592:	4565      	cmp	r5, ip
 8006594:	d30e      	bcc.n	80065b4 <__mdiff+0xe8>
 8006596:	f10c 0203 	add.w	r2, ip, #3
 800659a:	1a52      	subs	r2, r2, r1
 800659c:	f022 0203 	bic.w	r2, r2, #3
 80065a0:	3903      	subs	r1, #3
 80065a2:	458c      	cmp	ip, r1
 80065a4:	bf38      	it	cc
 80065a6:	2200      	movcc	r2, #0
 80065a8:	441a      	add	r2, r3
 80065aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80065ae:	b17b      	cbz	r3, 80065d0 <__mdiff+0x104>
 80065b0:	6106      	str	r6, [r0, #16]
 80065b2:	e7a5      	b.n	8006500 <__mdiff+0x34>
 80065b4:	f855 8b04 	ldr.w	r8, [r5], #4
 80065b8:	fa17 f488 	uxtah	r4, r7, r8
 80065bc:	1422      	asrs	r2, r4, #16
 80065be:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80065c2:	b2a4      	uxth	r4, r4
 80065c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80065c8:	f84e 4b04 	str.w	r4, [lr], #4
 80065cc:	1417      	asrs	r7, r2, #16
 80065ce:	e7e0      	b.n	8006592 <__mdiff+0xc6>
 80065d0:	3e01      	subs	r6, #1
 80065d2:	e7ea      	b.n	80065aa <__mdiff+0xde>
 80065d4:	0800724b 	.word	0x0800724b
 80065d8:	080072bc 	.word	0x080072bc

080065dc <__d2b>:
 80065dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80065e0:	4689      	mov	r9, r1
 80065e2:	2101      	movs	r1, #1
 80065e4:	ec57 6b10 	vmov	r6, r7, d0
 80065e8:	4690      	mov	r8, r2
 80065ea:	f7ff fcd5 	bl	8005f98 <_Balloc>
 80065ee:	4604      	mov	r4, r0
 80065f0:	b930      	cbnz	r0, 8006600 <__d2b+0x24>
 80065f2:	4602      	mov	r2, r0
 80065f4:	4b25      	ldr	r3, [pc, #148]	; (800668c <__d2b+0xb0>)
 80065f6:	4826      	ldr	r0, [pc, #152]	; (8006690 <__d2b+0xb4>)
 80065f8:	f240 310a 	movw	r1, #778	; 0x30a
 80065fc:	f000 fb84 	bl	8006d08 <__assert_func>
 8006600:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006604:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006608:	bb35      	cbnz	r5, 8006658 <__d2b+0x7c>
 800660a:	2e00      	cmp	r6, #0
 800660c:	9301      	str	r3, [sp, #4]
 800660e:	d028      	beq.n	8006662 <__d2b+0x86>
 8006610:	4668      	mov	r0, sp
 8006612:	9600      	str	r6, [sp, #0]
 8006614:	f7ff fd8c 	bl	8006130 <__lo0bits>
 8006618:	9900      	ldr	r1, [sp, #0]
 800661a:	b300      	cbz	r0, 800665e <__d2b+0x82>
 800661c:	9a01      	ldr	r2, [sp, #4]
 800661e:	f1c0 0320 	rsb	r3, r0, #32
 8006622:	fa02 f303 	lsl.w	r3, r2, r3
 8006626:	430b      	orrs	r3, r1
 8006628:	40c2      	lsrs	r2, r0
 800662a:	6163      	str	r3, [r4, #20]
 800662c:	9201      	str	r2, [sp, #4]
 800662e:	9b01      	ldr	r3, [sp, #4]
 8006630:	61a3      	str	r3, [r4, #24]
 8006632:	2b00      	cmp	r3, #0
 8006634:	bf14      	ite	ne
 8006636:	2202      	movne	r2, #2
 8006638:	2201      	moveq	r2, #1
 800663a:	6122      	str	r2, [r4, #16]
 800663c:	b1d5      	cbz	r5, 8006674 <__d2b+0x98>
 800663e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006642:	4405      	add	r5, r0
 8006644:	f8c9 5000 	str.w	r5, [r9]
 8006648:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800664c:	f8c8 0000 	str.w	r0, [r8]
 8006650:	4620      	mov	r0, r4
 8006652:	b003      	add	sp, #12
 8006654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800665c:	e7d5      	b.n	800660a <__d2b+0x2e>
 800665e:	6161      	str	r1, [r4, #20]
 8006660:	e7e5      	b.n	800662e <__d2b+0x52>
 8006662:	a801      	add	r0, sp, #4
 8006664:	f7ff fd64 	bl	8006130 <__lo0bits>
 8006668:	9b01      	ldr	r3, [sp, #4]
 800666a:	6163      	str	r3, [r4, #20]
 800666c:	2201      	movs	r2, #1
 800666e:	6122      	str	r2, [r4, #16]
 8006670:	3020      	adds	r0, #32
 8006672:	e7e3      	b.n	800663c <__d2b+0x60>
 8006674:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006678:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800667c:	f8c9 0000 	str.w	r0, [r9]
 8006680:	6918      	ldr	r0, [r3, #16]
 8006682:	f7ff fd35 	bl	80060f0 <__hi0bits>
 8006686:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800668a:	e7df      	b.n	800664c <__d2b+0x70>
 800668c:	0800724b 	.word	0x0800724b
 8006690:	080072bc 	.word	0x080072bc

08006694 <_calloc_r>:
 8006694:	b513      	push	{r0, r1, r4, lr}
 8006696:	434a      	muls	r2, r1
 8006698:	4611      	mov	r1, r2
 800669a:	9201      	str	r2, [sp, #4]
 800669c:	f000 f85a 	bl	8006754 <_malloc_r>
 80066a0:	4604      	mov	r4, r0
 80066a2:	b118      	cbz	r0, 80066ac <_calloc_r+0x18>
 80066a4:	9a01      	ldr	r2, [sp, #4]
 80066a6:	2100      	movs	r1, #0
 80066a8:	f7fe f860 	bl	800476c <memset>
 80066ac:	4620      	mov	r0, r4
 80066ae:	b002      	add	sp, #8
 80066b0:	bd10      	pop	{r4, pc}
	...

080066b4 <_free_r>:
 80066b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066b6:	2900      	cmp	r1, #0
 80066b8:	d048      	beq.n	800674c <_free_r+0x98>
 80066ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066be:	9001      	str	r0, [sp, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f1a1 0404 	sub.w	r4, r1, #4
 80066c6:	bfb8      	it	lt
 80066c8:	18e4      	addlt	r4, r4, r3
 80066ca:	f000 fca7 	bl	800701c <__malloc_lock>
 80066ce:	4a20      	ldr	r2, [pc, #128]	; (8006750 <_free_r+0x9c>)
 80066d0:	9801      	ldr	r0, [sp, #4]
 80066d2:	6813      	ldr	r3, [r2, #0]
 80066d4:	4615      	mov	r5, r2
 80066d6:	b933      	cbnz	r3, 80066e6 <_free_r+0x32>
 80066d8:	6063      	str	r3, [r4, #4]
 80066da:	6014      	str	r4, [r2, #0]
 80066dc:	b003      	add	sp, #12
 80066de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066e2:	f000 bca1 	b.w	8007028 <__malloc_unlock>
 80066e6:	42a3      	cmp	r3, r4
 80066e8:	d90b      	bls.n	8006702 <_free_r+0x4e>
 80066ea:	6821      	ldr	r1, [r4, #0]
 80066ec:	1862      	adds	r2, r4, r1
 80066ee:	4293      	cmp	r3, r2
 80066f0:	bf04      	itt	eq
 80066f2:	681a      	ldreq	r2, [r3, #0]
 80066f4:	685b      	ldreq	r3, [r3, #4]
 80066f6:	6063      	str	r3, [r4, #4]
 80066f8:	bf04      	itt	eq
 80066fa:	1852      	addeq	r2, r2, r1
 80066fc:	6022      	streq	r2, [r4, #0]
 80066fe:	602c      	str	r4, [r5, #0]
 8006700:	e7ec      	b.n	80066dc <_free_r+0x28>
 8006702:	461a      	mov	r2, r3
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	b10b      	cbz	r3, 800670c <_free_r+0x58>
 8006708:	42a3      	cmp	r3, r4
 800670a:	d9fa      	bls.n	8006702 <_free_r+0x4e>
 800670c:	6811      	ldr	r1, [r2, #0]
 800670e:	1855      	adds	r5, r2, r1
 8006710:	42a5      	cmp	r5, r4
 8006712:	d10b      	bne.n	800672c <_free_r+0x78>
 8006714:	6824      	ldr	r4, [r4, #0]
 8006716:	4421      	add	r1, r4
 8006718:	1854      	adds	r4, r2, r1
 800671a:	42a3      	cmp	r3, r4
 800671c:	6011      	str	r1, [r2, #0]
 800671e:	d1dd      	bne.n	80066dc <_free_r+0x28>
 8006720:	681c      	ldr	r4, [r3, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	6053      	str	r3, [r2, #4]
 8006726:	4421      	add	r1, r4
 8006728:	6011      	str	r1, [r2, #0]
 800672a:	e7d7      	b.n	80066dc <_free_r+0x28>
 800672c:	d902      	bls.n	8006734 <_free_r+0x80>
 800672e:	230c      	movs	r3, #12
 8006730:	6003      	str	r3, [r0, #0]
 8006732:	e7d3      	b.n	80066dc <_free_r+0x28>
 8006734:	6825      	ldr	r5, [r4, #0]
 8006736:	1961      	adds	r1, r4, r5
 8006738:	428b      	cmp	r3, r1
 800673a:	bf04      	itt	eq
 800673c:	6819      	ldreq	r1, [r3, #0]
 800673e:	685b      	ldreq	r3, [r3, #4]
 8006740:	6063      	str	r3, [r4, #4]
 8006742:	bf04      	itt	eq
 8006744:	1949      	addeq	r1, r1, r5
 8006746:	6021      	streq	r1, [r4, #0]
 8006748:	6054      	str	r4, [r2, #4]
 800674a:	e7c7      	b.n	80066dc <_free_r+0x28>
 800674c:	b003      	add	sp, #12
 800674e:	bd30      	pop	{r4, r5, pc}
 8006750:	200001fc 	.word	0x200001fc

08006754 <_malloc_r>:
 8006754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006756:	1ccd      	adds	r5, r1, #3
 8006758:	f025 0503 	bic.w	r5, r5, #3
 800675c:	3508      	adds	r5, #8
 800675e:	2d0c      	cmp	r5, #12
 8006760:	bf38      	it	cc
 8006762:	250c      	movcc	r5, #12
 8006764:	2d00      	cmp	r5, #0
 8006766:	4606      	mov	r6, r0
 8006768:	db01      	blt.n	800676e <_malloc_r+0x1a>
 800676a:	42a9      	cmp	r1, r5
 800676c:	d903      	bls.n	8006776 <_malloc_r+0x22>
 800676e:	230c      	movs	r3, #12
 8006770:	6033      	str	r3, [r6, #0]
 8006772:	2000      	movs	r0, #0
 8006774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006776:	f000 fc51 	bl	800701c <__malloc_lock>
 800677a:	4921      	ldr	r1, [pc, #132]	; (8006800 <_malloc_r+0xac>)
 800677c:	680a      	ldr	r2, [r1, #0]
 800677e:	4614      	mov	r4, r2
 8006780:	b99c      	cbnz	r4, 80067aa <_malloc_r+0x56>
 8006782:	4f20      	ldr	r7, [pc, #128]	; (8006804 <_malloc_r+0xb0>)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	b923      	cbnz	r3, 8006792 <_malloc_r+0x3e>
 8006788:	4621      	mov	r1, r4
 800678a:	4630      	mov	r0, r6
 800678c:	f000 f996 	bl	8006abc <_sbrk_r>
 8006790:	6038      	str	r0, [r7, #0]
 8006792:	4629      	mov	r1, r5
 8006794:	4630      	mov	r0, r6
 8006796:	f000 f991 	bl	8006abc <_sbrk_r>
 800679a:	1c43      	adds	r3, r0, #1
 800679c:	d123      	bne.n	80067e6 <_malloc_r+0x92>
 800679e:	230c      	movs	r3, #12
 80067a0:	6033      	str	r3, [r6, #0]
 80067a2:	4630      	mov	r0, r6
 80067a4:	f000 fc40 	bl	8007028 <__malloc_unlock>
 80067a8:	e7e3      	b.n	8006772 <_malloc_r+0x1e>
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	1b5b      	subs	r3, r3, r5
 80067ae:	d417      	bmi.n	80067e0 <_malloc_r+0x8c>
 80067b0:	2b0b      	cmp	r3, #11
 80067b2:	d903      	bls.n	80067bc <_malloc_r+0x68>
 80067b4:	6023      	str	r3, [r4, #0]
 80067b6:	441c      	add	r4, r3
 80067b8:	6025      	str	r5, [r4, #0]
 80067ba:	e004      	b.n	80067c6 <_malloc_r+0x72>
 80067bc:	6863      	ldr	r3, [r4, #4]
 80067be:	42a2      	cmp	r2, r4
 80067c0:	bf0c      	ite	eq
 80067c2:	600b      	streq	r3, [r1, #0]
 80067c4:	6053      	strne	r3, [r2, #4]
 80067c6:	4630      	mov	r0, r6
 80067c8:	f000 fc2e 	bl	8007028 <__malloc_unlock>
 80067cc:	f104 000b 	add.w	r0, r4, #11
 80067d0:	1d23      	adds	r3, r4, #4
 80067d2:	f020 0007 	bic.w	r0, r0, #7
 80067d6:	1ac2      	subs	r2, r0, r3
 80067d8:	d0cc      	beq.n	8006774 <_malloc_r+0x20>
 80067da:	1a1b      	subs	r3, r3, r0
 80067dc:	50a3      	str	r3, [r4, r2]
 80067de:	e7c9      	b.n	8006774 <_malloc_r+0x20>
 80067e0:	4622      	mov	r2, r4
 80067e2:	6864      	ldr	r4, [r4, #4]
 80067e4:	e7cc      	b.n	8006780 <_malloc_r+0x2c>
 80067e6:	1cc4      	adds	r4, r0, #3
 80067e8:	f024 0403 	bic.w	r4, r4, #3
 80067ec:	42a0      	cmp	r0, r4
 80067ee:	d0e3      	beq.n	80067b8 <_malloc_r+0x64>
 80067f0:	1a21      	subs	r1, r4, r0
 80067f2:	4630      	mov	r0, r6
 80067f4:	f000 f962 	bl	8006abc <_sbrk_r>
 80067f8:	3001      	adds	r0, #1
 80067fa:	d1dd      	bne.n	80067b8 <_malloc_r+0x64>
 80067fc:	e7cf      	b.n	800679e <_malloc_r+0x4a>
 80067fe:	bf00      	nop
 8006800:	200001fc 	.word	0x200001fc
 8006804:	20000200 	.word	0x20000200

08006808 <__sfputc_r>:
 8006808:	6893      	ldr	r3, [r2, #8]
 800680a:	3b01      	subs	r3, #1
 800680c:	2b00      	cmp	r3, #0
 800680e:	b410      	push	{r4}
 8006810:	6093      	str	r3, [r2, #8]
 8006812:	da08      	bge.n	8006826 <__sfputc_r+0x1e>
 8006814:	6994      	ldr	r4, [r2, #24]
 8006816:	42a3      	cmp	r3, r4
 8006818:	db01      	blt.n	800681e <__sfputc_r+0x16>
 800681a:	290a      	cmp	r1, #10
 800681c:	d103      	bne.n	8006826 <__sfputc_r+0x1e>
 800681e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006822:	f000 b99f 	b.w	8006b64 <__swbuf_r>
 8006826:	6813      	ldr	r3, [r2, #0]
 8006828:	1c58      	adds	r0, r3, #1
 800682a:	6010      	str	r0, [r2, #0]
 800682c:	7019      	strb	r1, [r3, #0]
 800682e:	4608      	mov	r0, r1
 8006830:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006834:	4770      	bx	lr

08006836 <__sfputs_r>:
 8006836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006838:	4606      	mov	r6, r0
 800683a:	460f      	mov	r7, r1
 800683c:	4614      	mov	r4, r2
 800683e:	18d5      	adds	r5, r2, r3
 8006840:	42ac      	cmp	r4, r5
 8006842:	d101      	bne.n	8006848 <__sfputs_r+0x12>
 8006844:	2000      	movs	r0, #0
 8006846:	e007      	b.n	8006858 <__sfputs_r+0x22>
 8006848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800684c:	463a      	mov	r2, r7
 800684e:	4630      	mov	r0, r6
 8006850:	f7ff ffda 	bl	8006808 <__sfputc_r>
 8006854:	1c43      	adds	r3, r0, #1
 8006856:	d1f3      	bne.n	8006840 <__sfputs_r+0xa>
 8006858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800685c <_vfiprintf_r>:
 800685c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006860:	460d      	mov	r5, r1
 8006862:	b09d      	sub	sp, #116	; 0x74
 8006864:	4614      	mov	r4, r2
 8006866:	4698      	mov	r8, r3
 8006868:	4606      	mov	r6, r0
 800686a:	b118      	cbz	r0, 8006874 <_vfiprintf_r+0x18>
 800686c:	6983      	ldr	r3, [r0, #24]
 800686e:	b90b      	cbnz	r3, 8006874 <_vfiprintf_r+0x18>
 8006870:	f7ff fad6 	bl	8005e20 <__sinit>
 8006874:	4b89      	ldr	r3, [pc, #548]	; (8006a9c <_vfiprintf_r+0x240>)
 8006876:	429d      	cmp	r5, r3
 8006878:	d11b      	bne.n	80068b2 <_vfiprintf_r+0x56>
 800687a:	6875      	ldr	r5, [r6, #4]
 800687c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800687e:	07d9      	lsls	r1, r3, #31
 8006880:	d405      	bmi.n	800688e <_vfiprintf_r+0x32>
 8006882:	89ab      	ldrh	r3, [r5, #12]
 8006884:	059a      	lsls	r2, r3, #22
 8006886:	d402      	bmi.n	800688e <_vfiprintf_r+0x32>
 8006888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800688a:	f7ff fb6c 	bl	8005f66 <__retarget_lock_acquire_recursive>
 800688e:	89ab      	ldrh	r3, [r5, #12]
 8006890:	071b      	lsls	r3, r3, #28
 8006892:	d501      	bpl.n	8006898 <_vfiprintf_r+0x3c>
 8006894:	692b      	ldr	r3, [r5, #16]
 8006896:	b9eb      	cbnz	r3, 80068d4 <_vfiprintf_r+0x78>
 8006898:	4629      	mov	r1, r5
 800689a:	4630      	mov	r0, r6
 800689c:	f000 f9c6 	bl	8006c2c <__swsetup_r>
 80068a0:	b1c0      	cbz	r0, 80068d4 <_vfiprintf_r+0x78>
 80068a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068a4:	07dc      	lsls	r4, r3, #31
 80068a6:	d50e      	bpl.n	80068c6 <_vfiprintf_r+0x6a>
 80068a8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ac:	b01d      	add	sp, #116	; 0x74
 80068ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b2:	4b7b      	ldr	r3, [pc, #492]	; (8006aa0 <_vfiprintf_r+0x244>)
 80068b4:	429d      	cmp	r5, r3
 80068b6:	d101      	bne.n	80068bc <_vfiprintf_r+0x60>
 80068b8:	68b5      	ldr	r5, [r6, #8]
 80068ba:	e7df      	b.n	800687c <_vfiprintf_r+0x20>
 80068bc:	4b79      	ldr	r3, [pc, #484]	; (8006aa4 <_vfiprintf_r+0x248>)
 80068be:	429d      	cmp	r5, r3
 80068c0:	bf08      	it	eq
 80068c2:	68f5      	ldreq	r5, [r6, #12]
 80068c4:	e7da      	b.n	800687c <_vfiprintf_r+0x20>
 80068c6:	89ab      	ldrh	r3, [r5, #12]
 80068c8:	0598      	lsls	r0, r3, #22
 80068ca:	d4ed      	bmi.n	80068a8 <_vfiprintf_r+0x4c>
 80068cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068ce:	f7ff fb4b 	bl	8005f68 <__retarget_lock_release_recursive>
 80068d2:	e7e9      	b.n	80068a8 <_vfiprintf_r+0x4c>
 80068d4:	2300      	movs	r3, #0
 80068d6:	9309      	str	r3, [sp, #36]	; 0x24
 80068d8:	2320      	movs	r3, #32
 80068da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068de:	f8cd 800c 	str.w	r8, [sp, #12]
 80068e2:	2330      	movs	r3, #48	; 0x30
 80068e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006aa8 <_vfiprintf_r+0x24c>
 80068e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068ec:	f04f 0901 	mov.w	r9, #1
 80068f0:	4623      	mov	r3, r4
 80068f2:	469a      	mov	sl, r3
 80068f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068f8:	b10a      	cbz	r2, 80068fe <_vfiprintf_r+0xa2>
 80068fa:	2a25      	cmp	r2, #37	; 0x25
 80068fc:	d1f9      	bne.n	80068f2 <_vfiprintf_r+0x96>
 80068fe:	ebba 0b04 	subs.w	fp, sl, r4
 8006902:	d00b      	beq.n	800691c <_vfiprintf_r+0xc0>
 8006904:	465b      	mov	r3, fp
 8006906:	4622      	mov	r2, r4
 8006908:	4629      	mov	r1, r5
 800690a:	4630      	mov	r0, r6
 800690c:	f7ff ff93 	bl	8006836 <__sfputs_r>
 8006910:	3001      	adds	r0, #1
 8006912:	f000 80aa 	beq.w	8006a6a <_vfiprintf_r+0x20e>
 8006916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006918:	445a      	add	r2, fp
 800691a:	9209      	str	r2, [sp, #36]	; 0x24
 800691c:	f89a 3000 	ldrb.w	r3, [sl]
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 80a2 	beq.w	8006a6a <_vfiprintf_r+0x20e>
 8006926:	2300      	movs	r3, #0
 8006928:	f04f 32ff 	mov.w	r2, #4294967295
 800692c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006930:	f10a 0a01 	add.w	sl, sl, #1
 8006934:	9304      	str	r3, [sp, #16]
 8006936:	9307      	str	r3, [sp, #28]
 8006938:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800693c:	931a      	str	r3, [sp, #104]	; 0x68
 800693e:	4654      	mov	r4, sl
 8006940:	2205      	movs	r2, #5
 8006942:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006946:	4858      	ldr	r0, [pc, #352]	; (8006aa8 <_vfiprintf_r+0x24c>)
 8006948:	f7f9 fc4a 	bl	80001e0 <memchr>
 800694c:	9a04      	ldr	r2, [sp, #16]
 800694e:	b9d8      	cbnz	r0, 8006988 <_vfiprintf_r+0x12c>
 8006950:	06d1      	lsls	r1, r2, #27
 8006952:	bf44      	itt	mi
 8006954:	2320      	movmi	r3, #32
 8006956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800695a:	0713      	lsls	r3, r2, #28
 800695c:	bf44      	itt	mi
 800695e:	232b      	movmi	r3, #43	; 0x2b
 8006960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006964:	f89a 3000 	ldrb.w	r3, [sl]
 8006968:	2b2a      	cmp	r3, #42	; 0x2a
 800696a:	d015      	beq.n	8006998 <_vfiprintf_r+0x13c>
 800696c:	9a07      	ldr	r2, [sp, #28]
 800696e:	4654      	mov	r4, sl
 8006970:	2000      	movs	r0, #0
 8006972:	f04f 0c0a 	mov.w	ip, #10
 8006976:	4621      	mov	r1, r4
 8006978:	f811 3b01 	ldrb.w	r3, [r1], #1
 800697c:	3b30      	subs	r3, #48	; 0x30
 800697e:	2b09      	cmp	r3, #9
 8006980:	d94e      	bls.n	8006a20 <_vfiprintf_r+0x1c4>
 8006982:	b1b0      	cbz	r0, 80069b2 <_vfiprintf_r+0x156>
 8006984:	9207      	str	r2, [sp, #28]
 8006986:	e014      	b.n	80069b2 <_vfiprintf_r+0x156>
 8006988:	eba0 0308 	sub.w	r3, r0, r8
 800698c:	fa09 f303 	lsl.w	r3, r9, r3
 8006990:	4313      	orrs	r3, r2
 8006992:	9304      	str	r3, [sp, #16]
 8006994:	46a2      	mov	sl, r4
 8006996:	e7d2      	b.n	800693e <_vfiprintf_r+0xe2>
 8006998:	9b03      	ldr	r3, [sp, #12]
 800699a:	1d19      	adds	r1, r3, #4
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	9103      	str	r1, [sp, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	bfbb      	ittet	lt
 80069a4:	425b      	neglt	r3, r3
 80069a6:	f042 0202 	orrlt.w	r2, r2, #2
 80069aa:	9307      	strge	r3, [sp, #28]
 80069ac:	9307      	strlt	r3, [sp, #28]
 80069ae:	bfb8      	it	lt
 80069b0:	9204      	strlt	r2, [sp, #16]
 80069b2:	7823      	ldrb	r3, [r4, #0]
 80069b4:	2b2e      	cmp	r3, #46	; 0x2e
 80069b6:	d10c      	bne.n	80069d2 <_vfiprintf_r+0x176>
 80069b8:	7863      	ldrb	r3, [r4, #1]
 80069ba:	2b2a      	cmp	r3, #42	; 0x2a
 80069bc:	d135      	bne.n	8006a2a <_vfiprintf_r+0x1ce>
 80069be:	9b03      	ldr	r3, [sp, #12]
 80069c0:	1d1a      	adds	r2, r3, #4
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	9203      	str	r2, [sp, #12]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	bfb8      	it	lt
 80069ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80069ce:	3402      	adds	r4, #2
 80069d0:	9305      	str	r3, [sp, #20]
 80069d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006ab8 <_vfiprintf_r+0x25c>
 80069d6:	7821      	ldrb	r1, [r4, #0]
 80069d8:	2203      	movs	r2, #3
 80069da:	4650      	mov	r0, sl
 80069dc:	f7f9 fc00 	bl	80001e0 <memchr>
 80069e0:	b140      	cbz	r0, 80069f4 <_vfiprintf_r+0x198>
 80069e2:	2340      	movs	r3, #64	; 0x40
 80069e4:	eba0 000a 	sub.w	r0, r0, sl
 80069e8:	fa03 f000 	lsl.w	r0, r3, r0
 80069ec:	9b04      	ldr	r3, [sp, #16]
 80069ee:	4303      	orrs	r3, r0
 80069f0:	3401      	adds	r4, #1
 80069f2:	9304      	str	r3, [sp, #16]
 80069f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069f8:	482c      	ldr	r0, [pc, #176]	; (8006aac <_vfiprintf_r+0x250>)
 80069fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069fe:	2206      	movs	r2, #6
 8006a00:	f7f9 fbee 	bl	80001e0 <memchr>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d03f      	beq.n	8006a88 <_vfiprintf_r+0x22c>
 8006a08:	4b29      	ldr	r3, [pc, #164]	; (8006ab0 <_vfiprintf_r+0x254>)
 8006a0a:	bb1b      	cbnz	r3, 8006a54 <_vfiprintf_r+0x1f8>
 8006a0c:	9b03      	ldr	r3, [sp, #12]
 8006a0e:	3307      	adds	r3, #7
 8006a10:	f023 0307 	bic.w	r3, r3, #7
 8006a14:	3308      	adds	r3, #8
 8006a16:	9303      	str	r3, [sp, #12]
 8006a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a1a:	443b      	add	r3, r7
 8006a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a1e:	e767      	b.n	80068f0 <_vfiprintf_r+0x94>
 8006a20:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a24:	460c      	mov	r4, r1
 8006a26:	2001      	movs	r0, #1
 8006a28:	e7a5      	b.n	8006976 <_vfiprintf_r+0x11a>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	3401      	adds	r4, #1
 8006a2e:	9305      	str	r3, [sp, #20]
 8006a30:	4619      	mov	r1, r3
 8006a32:	f04f 0c0a 	mov.w	ip, #10
 8006a36:	4620      	mov	r0, r4
 8006a38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a3c:	3a30      	subs	r2, #48	; 0x30
 8006a3e:	2a09      	cmp	r2, #9
 8006a40:	d903      	bls.n	8006a4a <_vfiprintf_r+0x1ee>
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0c5      	beq.n	80069d2 <_vfiprintf_r+0x176>
 8006a46:	9105      	str	r1, [sp, #20]
 8006a48:	e7c3      	b.n	80069d2 <_vfiprintf_r+0x176>
 8006a4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a4e:	4604      	mov	r4, r0
 8006a50:	2301      	movs	r3, #1
 8006a52:	e7f0      	b.n	8006a36 <_vfiprintf_r+0x1da>
 8006a54:	ab03      	add	r3, sp, #12
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	462a      	mov	r2, r5
 8006a5a:	4b16      	ldr	r3, [pc, #88]	; (8006ab4 <_vfiprintf_r+0x258>)
 8006a5c:	a904      	add	r1, sp, #16
 8006a5e:	4630      	mov	r0, r6
 8006a60:	f7fd ff2c 	bl	80048bc <_printf_float>
 8006a64:	4607      	mov	r7, r0
 8006a66:	1c78      	adds	r0, r7, #1
 8006a68:	d1d6      	bne.n	8006a18 <_vfiprintf_r+0x1bc>
 8006a6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a6c:	07d9      	lsls	r1, r3, #31
 8006a6e:	d405      	bmi.n	8006a7c <_vfiprintf_r+0x220>
 8006a70:	89ab      	ldrh	r3, [r5, #12]
 8006a72:	059a      	lsls	r2, r3, #22
 8006a74:	d402      	bmi.n	8006a7c <_vfiprintf_r+0x220>
 8006a76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a78:	f7ff fa76 	bl	8005f68 <__retarget_lock_release_recursive>
 8006a7c:	89ab      	ldrh	r3, [r5, #12]
 8006a7e:	065b      	lsls	r3, r3, #25
 8006a80:	f53f af12 	bmi.w	80068a8 <_vfiprintf_r+0x4c>
 8006a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a86:	e711      	b.n	80068ac <_vfiprintf_r+0x50>
 8006a88:	ab03      	add	r3, sp, #12
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	462a      	mov	r2, r5
 8006a8e:	4b09      	ldr	r3, [pc, #36]	; (8006ab4 <_vfiprintf_r+0x258>)
 8006a90:	a904      	add	r1, sp, #16
 8006a92:	4630      	mov	r0, r6
 8006a94:	f7fe f9b6 	bl	8004e04 <_printf_i>
 8006a98:	e7e4      	b.n	8006a64 <_vfiprintf_r+0x208>
 8006a9a:	bf00      	nop
 8006a9c:	0800727c 	.word	0x0800727c
 8006aa0:	0800729c 	.word	0x0800729c
 8006aa4:	0800725c 	.word	0x0800725c
 8006aa8:	0800741c 	.word	0x0800741c
 8006aac:	08007426 	.word	0x08007426
 8006ab0:	080048bd 	.word	0x080048bd
 8006ab4:	08006837 	.word	0x08006837
 8006ab8:	08007422 	.word	0x08007422

08006abc <_sbrk_r>:
 8006abc:	b538      	push	{r3, r4, r5, lr}
 8006abe:	4d06      	ldr	r5, [pc, #24]	; (8006ad8 <_sbrk_r+0x1c>)
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	4608      	mov	r0, r1
 8006ac6:	602b      	str	r3, [r5, #0]
 8006ac8:	f7fa fcf4 	bl	80014b4 <_sbrk>
 8006acc:	1c43      	adds	r3, r0, #1
 8006ace:	d102      	bne.n	8006ad6 <_sbrk_r+0x1a>
 8006ad0:	682b      	ldr	r3, [r5, #0]
 8006ad2:	b103      	cbz	r3, 8006ad6 <_sbrk_r+0x1a>
 8006ad4:	6023      	str	r3, [r4, #0]
 8006ad6:	bd38      	pop	{r3, r4, r5, pc}
 8006ad8:	20000280 	.word	0x20000280

08006adc <__sread>:
 8006adc:	b510      	push	{r4, lr}
 8006ade:	460c      	mov	r4, r1
 8006ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ae4:	f000 faa6 	bl	8007034 <_read_r>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	bfab      	itete	ge
 8006aec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006aee:	89a3      	ldrhlt	r3, [r4, #12]
 8006af0:	181b      	addge	r3, r3, r0
 8006af2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006af6:	bfac      	ite	ge
 8006af8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006afa:	81a3      	strhlt	r3, [r4, #12]
 8006afc:	bd10      	pop	{r4, pc}

08006afe <__swrite>:
 8006afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b02:	461f      	mov	r7, r3
 8006b04:	898b      	ldrh	r3, [r1, #12]
 8006b06:	05db      	lsls	r3, r3, #23
 8006b08:	4605      	mov	r5, r0
 8006b0a:	460c      	mov	r4, r1
 8006b0c:	4616      	mov	r6, r2
 8006b0e:	d505      	bpl.n	8006b1c <__swrite+0x1e>
 8006b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b14:	2302      	movs	r3, #2
 8006b16:	2200      	movs	r2, #0
 8006b18:	f000 f9f8 	bl	8006f0c <_lseek_r>
 8006b1c:	89a3      	ldrh	r3, [r4, #12]
 8006b1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b26:	81a3      	strh	r3, [r4, #12]
 8006b28:	4632      	mov	r2, r6
 8006b2a:	463b      	mov	r3, r7
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b32:	f000 b869 	b.w	8006c08 <_write_r>

08006b36 <__sseek>:
 8006b36:	b510      	push	{r4, lr}
 8006b38:	460c      	mov	r4, r1
 8006b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b3e:	f000 f9e5 	bl	8006f0c <_lseek_r>
 8006b42:	1c43      	adds	r3, r0, #1
 8006b44:	89a3      	ldrh	r3, [r4, #12]
 8006b46:	bf15      	itete	ne
 8006b48:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b52:	81a3      	strheq	r3, [r4, #12]
 8006b54:	bf18      	it	ne
 8006b56:	81a3      	strhne	r3, [r4, #12]
 8006b58:	bd10      	pop	{r4, pc}

08006b5a <__sclose>:
 8006b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b5e:	f000 b8f1 	b.w	8006d44 <_close_r>
	...

08006b64 <__swbuf_r>:
 8006b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b66:	460e      	mov	r6, r1
 8006b68:	4614      	mov	r4, r2
 8006b6a:	4605      	mov	r5, r0
 8006b6c:	b118      	cbz	r0, 8006b76 <__swbuf_r+0x12>
 8006b6e:	6983      	ldr	r3, [r0, #24]
 8006b70:	b90b      	cbnz	r3, 8006b76 <__swbuf_r+0x12>
 8006b72:	f7ff f955 	bl	8005e20 <__sinit>
 8006b76:	4b21      	ldr	r3, [pc, #132]	; (8006bfc <__swbuf_r+0x98>)
 8006b78:	429c      	cmp	r4, r3
 8006b7a:	d12b      	bne.n	8006bd4 <__swbuf_r+0x70>
 8006b7c:	686c      	ldr	r4, [r5, #4]
 8006b7e:	69a3      	ldr	r3, [r4, #24]
 8006b80:	60a3      	str	r3, [r4, #8]
 8006b82:	89a3      	ldrh	r3, [r4, #12]
 8006b84:	071a      	lsls	r2, r3, #28
 8006b86:	d52f      	bpl.n	8006be8 <__swbuf_r+0x84>
 8006b88:	6923      	ldr	r3, [r4, #16]
 8006b8a:	b36b      	cbz	r3, 8006be8 <__swbuf_r+0x84>
 8006b8c:	6923      	ldr	r3, [r4, #16]
 8006b8e:	6820      	ldr	r0, [r4, #0]
 8006b90:	1ac0      	subs	r0, r0, r3
 8006b92:	6963      	ldr	r3, [r4, #20]
 8006b94:	b2f6      	uxtb	r6, r6
 8006b96:	4283      	cmp	r3, r0
 8006b98:	4637      	mov	r7, r6
 8006b9a:	dc04      	bgt.n	8006ba6 <__swbuf_r+0x42>
 8006b9c:	4621      	mov	r1, r4
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	f000 f966 	bl	8006e70 <_fflush_r>
 8006ba4:	bb30      	cbnz	r0, 8006bf4 <__swbuf_r+0x90>
 8006ba6:	68a3      	ldr	r3, [r4, #8]
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	60a3      	str	r3, [r4, #8]
 8006bac:	6823      	ldr	r3, [r4, #0]
 8006bae:	1c5a      	adds	r2, r3, #1
 8006bb0:	6022      	str	r2, [r4, #0]
 8006bb2:	701e      	strb	r6, [r3, #0]
 8006bb4:	6963      	ldr	r3, [r4, #20]
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	4283      	cmp	r3, r0
 8006bba:	d004      	beq.n	8006bc6 <__swbuf_r+0x62>
 8006bbc:	89a3      	ldrh	r3, [r4, #12]
 8006bbe:	07db      	lsls	r3, r3, #31
 8006bc0:	d506      	bpl.n	8006bd0 <__swbuf_r+0x6c>
 8006bc2:	2e0a      	cmp	r6, #10
 8006bc4:	d104      	bne.n	8006bd0 <__swbuf_r+0x6c>
 8006bc6:	4621      	mov	r1, r4
 8006bc8:	4628      	mov	r0, r5
 8006bca:	f000 f951 	bl	8006e70 <_fflush_r>
 8006bce:	b988      	cbnz	r0, 8006bf4 <__swbuf_r+0x90>
 8006bd0:	4638      	mov	r0, r7
 8006bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bd4:	4b0a      	ldr	r3, [pc, #40]	; (8006c00 <__swbuf_r+0x9c>)
 8006bd6:	429c      	cmp	r4, r3
 8006bd8:	d101      	bne.n	8006bde <__swbuf_r+0x7a>
 8006bda:	68ac      	ldr	r4, [r5, #8]
 8006bdc:	e7cf      	b.n	8006b7e <__swbuf_r+0x1a>
 8006bde:	4b09      	ldr	r3, [pc, #36]	; (8006c04 <__swbuf_r+0xa0>)
 8006be0:	429c      	cmp	r4, r3
 8006be2:	bf08      	it	eq
 8006be4:	68ec      	ldreq	r4, [r5, #12]
 8006be6:	e7ca      	b.n	8006b7e <__swbuf_r+0x1a>
 8006be8:	4621      	mov	r1, r4
 8006bea:	4628      	mov	r0, r5
 8006bec:	f000 f81e 	bl	8006c2c <__swsetup_r>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	d0cb      	beq.n	8006b8c <__swbuf_r+0x28>
 8006bf4:	f04f 37ff 	mov.w	r7, #4294967295
 8006bf8:	e7ea      	b.n	8006bd0 <__swbuf_r+0x6c>
 8006bfa:	bf00      	nop
 8006bfc:	0800727c 	.word	0x0800727c
 8006c00:	0800729c 	.word	0x0800729c
 8006c04:	0800725c 	.word	0x0800725c

08006c08 <_write_r>:
 8006c08:	b538      	push	{r3, r4, r5, lr}
 8006c0a:	4d07      	ldr	r5, [pc, #28]	; (8006c28 <_write_r+0x20>)
 8006c0c:	4604      	mov	r4, r0
 8006c0e:	4608      	mov	r0, r1
 8006c10:	4611      	mov	r1, r2
 8006c12:	2200      	movs	r2, #0
 8006c14:	602a      	str	r2, [r5, #0]
 8006c16:	461a      	mov	r2, r3
 8006c18:	f7fa fbfb 	bl	8001412 <_write>
 8006c1c:	1c43      	adds	r3, r0, #1
 8006c1e:	d102      	bne.n	8006c26 <_write_r+0x1e>
 8006c20:	682b      	ldr	r3, [r5, #0]
 8006c22:	b103      	cbz	r3, 8006c26 <_write_r+0x1e>
 8006c24:	6023      	str	r3, [r4, #0]
 8006c26:	bd38      	pop	{r3, r4, r5, pc}
 8006c28:	20000280 	.word	0x20000280

08006c2c <__swsetup_r>:
 8006c2c:	4b32      	ldr	r3, [pc, #200]	; (8006cf8 <__swsetup_r+0xcc>)
 8006c2e:	b570      	push	{r4, r5, r6, lr}
 8006c30:	681d      	ldr	r5, [r3, #0]
 8006c32:	4606      	mov	r6, r0
 8006c34:	460c      	mov	r4, r1
 8006c36:	b125      	cbz	r5, 8006c42 <__swsetup_r+0x16>
 8006c38:	69ab      	ldr	r3, [r5, #24]
 8006c3a:	b913      	cbnz	r3, 8006c42 <__swsetup_r+0x16>
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	f7ff f8ef 	bl	8005e20 <__sinit>
 8006c42:	4b2e      	ldr	r3, [pc, #184]	; (8006cfc <__swsetup_r+0xd0>)
 8006c44:	429c      	cmp	r4, r3
 8006c46:	d10f      	bne.n	8006c68 <__swsetup_r+0x3c>
 8006c48:	686c      	ldr	r4, [r5, #4]
 8006c4a:	89a3      	ldrh	r3, [r4, #12]
 8006c4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c50:	0719      	lsls	r1, r3, #28
 8006c52:	d42c      	bmi.n	8006cae <__swsetup_r+0x82>
 8006c54:	06dd      	lsls	r5, r3, #27
 8006c56:	d411      	bmi.n	8006c7c <__swsetup_r+0x50>
 8006c58:	2309      	movs	r3, #9
 8006c5a:	6033      	str	r3, [r6, #0]
 8006c5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c60:	81a3      	strh	r3, [r4, #12]
 8006c62:	f04f 30ff 	mov.w	r0, #4294967295
 8006c66:	e03e      	b.n	8006ce6 <__swsetup_r+0xba>
 8006c68:	4b25      	ldr	r3, [pc, #148]	; (8006d00 <__swsetup_r+0xd4>)
 8006c6a:	429c      	cmp	r4, r3
 8006c6c:	d101      	bne.n	8006c72 <__swsetup_r+0x46>
 8006c6e:	68ac      	ldr	r4, [r5, #8]
 8006c70:	e7eb      	b.n	8006c4a <__swsetup_r+0x1e>
 8006c72:	4b24      	ldr	r3, [pc, #144]	; (8006d04 <__swsetup_r+0xd8>)
 8006c74:	429c      	cmp	r4, r3
 8006c76:	bf08      	it	eq
 8006c78:	68ec      	ldreq	r4, [r5, #12]
 8006c7a:	e7e6      	b.n	8006c4a <__swsetup_r+0x1e>
 8006c7c:	0758      	lsls	r0, r3, #29
 8006c7e:	d512      	bpl.n	8006ca6 <__swsetup_r+0x7a>
 8006c80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c82:	b141      	cbz	r1, 8006c96 <__swsetup_r+0x6a>
 8006c84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c88:	4299      	cmp	r1, r3
 8006c8a:	d002      	beq.n	8006c92 <__swsetup_r+0x66>
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	f7ff fd11 	bl	80066b4 <_free_r>
 8006c92:	2300      	movs	r3, #0
 8006c94:	6363      	str	r3, [r4, #52]	; 0x34
 8006c96:	89a3      	ldrh	r3, [r4, #12]
 8006c98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c9c:	81a3      	strh	r3, [r4, #12]
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	6063      	str	r3, [r4, #4]
 8006ca2:	6923      	ldr	r3, [r4, #16]
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	89a3      	ldrh	r3, [r4, #12]
 8006ca8:	f043 0308 	orr.w	r3, r3, #8
 8006cac:	81a3      	strh	r3, [r4, #12]
 8006cae:	6923      	ldr	r3, [r4, #16]
 8006cb0:	b94b      	cbnz	r3, 8006cc6 <__swsetup_r+0x9a>
 8006cb2:	89a3      	ldrh	r3, [r4, #12]
 8006cb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cbc:	d003      	beq.n	8006cc6 <__swsetup_r+0x9a>
 8006cbe:	4621      	mov	r1, r4
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	f000 f959 	bl	8006f78 <__smakebuf_r>
 8006cc6:	89a0      	ldrh	r0, [r4, #12]
 8006cc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ccc:	f010 0301 	ands.w	r3, r0, #1
 8006cd0:	d00a      	beq.n	8006ce8 <__swsetup_r+0xbc>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60a3      	str	r3, [r4, #8]
 8006cd6:	6963      	ldr	r3, [r4, #20]
 8006cd8:	425b      	negs	r3, r3
 8006cda:	61a3      	str	r3, [r4, #24]
 8006cdc:	6923      	ldr	r3, [r4, #16]
 8006cde:	b943      	cbnz	r3, 8006cf2 <__swsetup_r+0xc6>
 8006ce0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ce4:	d1ba      	bne.n	8006c5c <__swsetup_r+0x30>
 8006ce6:	bd70      	pop	{r4, r5, r6, pc}
 8006ce8:	0781      	lsls	r1, r0, #30
 8006cea:	bf58      	it	pl
 8006cec:	6963      	ldrpl	r3, [r4, #20]
 8006cee:	60a3      	str	r3, [r4, #8]
 8006cf0:	e7f4      	b.n	8006cdc <__swsetup_r+0xb0>
 8006cf2:	2000      	movs	r0, #0
 8006cf4:	e7f7      	b.n	8006ce6 <__swsetup_r+0xba>
 8006cf6:	bf00      	nop
 8006cf8:	2000000c 	.word	0x2000000c
 8006cfc:	0800727c 	.word	0x0800727c
 8006d00:	0800729c 	.word	0x0800729c
 8006d04:	0800725c 	.word	0x0800725c

08006d08 <__assert_func>:
 8006d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d0a:	4614      	mov	r4, r2
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	4b09      	ldr	r3, [pc, #36]	; (8006d34 <__assert_func+0x2c>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4605      	mov	r5, r0
 8006d14:	68d8      	ldr	r0, [r3, #12]
 8006d16:	b14c      	cbz	r4, 8006d2c <__assert_func+0x24>
 8006d18:	4b07      	ldr	r3, [pc, #28]	; (8006d38 <__assert_func+0x30>)
 8006d1a:	9100      	str	r1, [sp, #0]
 8006d1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d20:	4906      	ldr	r1, [pc, #24]	; (8006d3c <__assert_func+0x34>)
 8006d22:	462b      	mov	r3, r5
 8006d24:	f000 f8e0 	bl	8006ee8 <fiprintf>
 8006d28:	f000 f9a3 	bl	8007072 <abort>
 8006d2c:	4b04      	ldr	r3, [pc, #16]	; (8006d40 <__assert_func+0x38>)
 8006d2e:	461c      	mov	r4, r3
 8006d30:	e7f3      	b.n	8006d1a <__assert_func+0x12>
 8006d32:	bf00      	nop
 8006d34:	2000000c 	.word	0x2000000c
 8006d38:	0800742d 	.word	0x0800742d
 8006d3c:	0800743a 	.word	0x0800743a
 8006d40:	08007468 	.word	0x08007468

08006d44 <_close_r>:
 8006d44:	b538      	push	{r3, r4, r5, lr}
 8006d46:	4d06      	ldr	r5, [pc, #24]	; (8006d60 <_close_r+0x1c>)
 8006d48:	2300      	movs	r3, #0
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	4608      	mov	r0, r1
 8006d4e:	602b      	str	r3, [r5, #0]
 8006d50:	f7fa fb7b 	bl	800144a <_close>
 8006d54:	1c43      	adds	r3, r0, #1
 8006d56:	d102      	bne.n	8006d5e <_close_r+0x1a>
 8006d58:	682b      	ldr	r3, [r5, #0]
 8006d5a:	b103      	cbz	r3, 8006d5e <_close_r+0x1a>
 8006d5c:	6023      	str	r3, [r4, #0]
 8006d5e:	bd38      	pop	{r3, r4, r5, pc}
 8006d60:	20000280 	.word	0x20000280

08006d64 <__sflush_r>:
 8006d64:	898a      	ldrh	r2, [r1, #12]
 8006d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d6a:	4605      	mov	r5, r0
 8006d6c:	0710      	lsls	r0, r2, #28
 8006d6e:	460c      	mov	r4, r1
 8006d70:	d458      	bmi.n	8006e24 <__sflush_r+0xc0>
 8006d72:	684b      	ldr	r3, [r1, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	dc05      	bgt.n	8006d84 <__sflush_r+0x20>
 8006d78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	dc02      	bgt.n	8006d84 <__sflush_r+0x20>
 8006d7e:	2000      	movs	r0, #0
 8006d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d86:	2e00      	cmp	r6, #0
 8006d88:	d0f9      	beq.n	8006d7e <__sflush_r+0x1a>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d90:	682f      	ldr	r7, [r5, #0]
 8006d92:	602b      	str	r3, [r5, #0]
 8006d94:	d032      	beq.n	8006dfc <__sflush_r+0x98>
 8006d96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d98:	89a3      	ldrh	r3, [r4, #12]
 8006d9a:	075a      	lsls	r2, r3, #29
 8006d9c:	d505      	bpl.n	8006daa <__sflush_r+0x46>
 8006d9e:	6863      	ldr	r3, [r4, #4]
 8006da0:	1ac0      	subs	r0, r0, r3
 8006da2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006da4:	b10b      	cbz	r3, 8006daa <__sflush_r+0x46>
 8006da6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006da8:	1ac0      	subs	r0, r0, r3
 8006daa:	2300      	movs	r3, #0
 8006dac:	4602      	mov	r2, r0
 8006dae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006db0:	6a21      	ldr	r1, [r4, #32]
 8006db2:	4628      	mov	r0, r5
 8006db4:	47b0      	blx	r6
 8006db6:	1c43      	adds	r3, r0, #1
 8006db8:	89a3      	ldrh	r3, [r4, #12]
 8006dba:	d106      	bne.n	8006dca <__sflush_r+0x66>
 8006dbc:	6829      	ldr	r1, [r5, #0]
 8006dbe:	291d      	cmp	r1, #29
 8006dc0:	d82c      	bhi.n	8006e1c <__sflush_r+0xb8>
 8006dc2:	4a2a      	ldr	r2, [pc, #168]	; (8006e6c <__sflush_r+0x108>)
 8006dc4:	40ca      	lsrs	r2, r1
 8006dc6:	07d6      	lsls	r6, r2, #31
 8006dc8:	d528      	bpl.n	8006e1c <__sflush_r+0xb8>
 8006dca:	2200      	movs	r2, #0
 8006dcc:	6062      	str	r2, [r4, #4]
 8006dce:	04d9      	lsls	r1, r3, #19
 8006dd0:	6922      	ldr	r2, [r4, #16]
 8006dd2:	6022      	str	r2, [r4, #0]
 8006dd4:	d504      	bpl.n	8006de0 <__sflush_r+0x7c>
 8006dd6:	1c42      	adds	r2, r0, #1
 8006dd8:	d101      	bne.n	8006dde <__sflush_r+0x7a>
 8006dda:	682b      	ldr	r3, [r5, #0]
 8006ddc:	b903      	cbnz	r3, 8006de0 <__sflush_r+0x7c>
 8006dde:	6560      	str	r0, [r4, #84]	; 0x54
 8006de0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006de2:	602f      	str	r7, [r5, #0]
 8006de4:	2900      	cmp	r1, #0
 8006de6:	d0ca      	beq.n	8006d7e <__sflush_r+0x1a>
 8006de8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dec:	4299      	cmp	r1, r3
 8006dee:	d002      	beq.n	8006df6 <__sflush_r+0x92>
 8006df0:	4628      	mov	r0, r5
 8006df2:	f7ff fc5f 	bl	80066b4 <_free_r>
 8006df6:	2000      	movs	r0, #0
 8006df8:	6360      	str	r0, [r4, #52]	; 0x34
 8006dfa:	e7c1      	b.n	8006d80 <__sflush_r+0x1c>
 8006dfc:	6a21      	ldr	r1, [r4, #32]
 8006dfe:	2301      	movs	r3, #1
 8006e00:	4628      	mov	r0, r5
 8006e02:	47b0      	blx	r6
 8006e04:	1c41      	adds	r1, r0, #1
 8006e06:	d1c7      	bne.n	8006d98 <__sflush_r+0x34>
 8006e08:	682b      	ldr	r3, [r5, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d0c4      	beq.n	8006d98 <__sflush_r+0x34>
 8006e0e:	2b1d      	cmp	r3, #29
 8006e10:	d001      	beq.n	8006e16 <__sflush_r+0xb2>
 8006e12:	2b16      	cmp	r3, #22
 8006e14:	d101      	bne.n	8006e1a <__sflush_r+0xb6>
 8006e16:	602f      	str	r7, [r5, #0]
 8006e18:	e7b1      	b.n	8006d7e <__sflush_r+0x1a>
 8006e1a:	89a3      	ldrh	r3, [r4, #12]
 8006e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e20:	81a3      	strh	r3, [r4, #12]
 8006e22:	e7ad      	b.n	8006d80 <__sflush_r+0x1c>
 8006e24:	690f      	ldr	r7, [r1, #16]
 8006e26:	2f00      	cmp	r7, #0
 8006e28:	d0a9      	beq.n	8006d7e <__sflush_r+0x1a>
 8006e2a:	0793      	lsls	r3, r2, #30
 8006e2c:	680e      	ldr	r6, [r1, #0]
 8006e2e:	bf08      	it	eq
 8006e30:	694b      	ldreq	r3, [r1, #20]
 8006e32:	600f      	str	r7, [r1, #0]
 8006e34:	bf18      	it	ne
 8006e36:	2300      	movne	r3, #0
 8006e38:	eba6 0807 	sub.w	r8, r6, r7
 8006e3c:	608b      	str	r3, [r1, #8]
 8006e3e:	f1b8 0f00 	cmp.w	r8, #0
 8006e42:	dd9c      	ble.n	8006d7e <__sflush_r+0x1a>
 8006e44:	6a21      	ldr	r1, [r4, #32]
 8006e46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e48:	4643      	mov	r3, r8
 8006e4a:	463a      	mov	r2, r7
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	47b0      	blx	r6
 8006e50:	2800      	cmp	r0, #0
 8006e52:	dc06      	bgt.n	8006e62 <__sflush_r+0xfe>
 8006e54:	89a3      	ldrh	r3, [r4, #12]
 8006e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e5a:	81a3      	strh	r3, [r4, #12]
 8006e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e60:	e78e      	b.n	8006d80 <__sflush_r+0x1c>
 8006e62:	4407      	add	r7, r0
 8006e64:	eba8 0800 	sub.w	r8, r8, r0
 8006e68:	e7e9      	b.n	8006e3e <__sflush_r+0xda>
 8006e6a:	bf00      	nop
 8006e6c:	20400001 	.word	0x20400001

08006e70 <_fflush_r>:
 8006e70:	b538      	push	{r3, r4, r5, lr}
 8006e72:	690b      	ldr	r3, [r1, #16]
 8006e74:	4605      	mov	r5, r0
 8006e76:	460c      	mov	r4, r1
 8006e78:	b913      	cbnz	r3, 8006e80 <_fflush_r+0x10>
 8006e7a:	2500      	movs	r5, #0
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	bd38      	pop	{r3, r4, r5, pc}
 8006e80:	b118      	cbz	r0, 8006e8a <_fflush_r+0x1a>
 8006e82:	6983      	ldr	r3, [r0, #24]
 8006e84:	b90b      	cbnz	r3, 8006e8a <_fflush_r+0x1a>
 8006e86:	f7fe ffcb 	bl	8005e20 <__sinit>
 8006e8a:	4b14      	ldr	r3, [pc, #80]	; (8006edc <_fflush_r+0x6c>)
 8006e8c:	429c      	cmp	r4, r3
 8006e8e:	d11b      	bne.n	8006ec8 <_fflush_r+0x58>
 8006e90:	686c      	ldr	r4, [r5, #4]
 8006e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0ef      	beq.n	8006e7a <_fflush_r+0xa>
 8006e9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e9c:	07d0      	lsls	r0, r2, #31
 8006e9e:	d404      	bmi.n	8006eaa <_fflush_r+0x3a>
 8006ea0:	0599      	lsls	r1, r3, #22
 8006ea2:	d402      	bmi.n	8006eaa <_fflush_r+0x3a>
 8006ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ea6:	f7ff f85e 	bl	8005f66 <__retarget_lock_acquire_recursive>
 8006eaa:	4628      	mov	r0, r5
 8006eac:	4621      	mov	r1, r4
 8006eae:	f7ff ff59 	bl	8006d64 <__sflush_r>
 8006eb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006eb4:	07da      	lsls	r2, r3, #31
 8006eb6:	4605      	mov	r5, r0
 8006eb8:	d4e0      	bmi.n	8006e7c <_fflush_r+0xc>
 8006eba:	89a3      	ldrh	r3, [r4, #12]
 8006ebc:	059b      	lsls	r3, r3, #22
 8006ebe:	d4dd      	bmi.n	8006e7c <_fflush_r+0xc>
 8006ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ec2:	f7ff f851 	bl	8005f68 <__retarget_lock_release_recursive>
 8006ec6:	e7d9      	b.n	8006e7c <_fflush_r+0xc>
 8006ec8:	4b05      	ldr	r3, [pc, #20]	; (8006ee0 <_fflush_r+0x70>)
 8006eca:	429c      	cmp	r4, r3
 8006ecc:	d101      	bne.n	8006ed2 <_fflush_r+0x62>
 8006ece:	68ac      	ldr	r4, [r5, #8]
 8006ed0:	e7df      	b.n	8006e92 <_fflush_r+0x22>
 8006ed2:	4b04      	ldr	r3, [pc, #16]	; (8006ee4 <_fflush_r+0x74>)
 8006ed4:	429c      	cmp	r4, r3
 8006ed6:	bf08      	it	eq
 8006ed8:	68ec      	ldreq	r4, [r5, #12]
 8006eda:	e7da      	b.n	8006e92 <_fflush_r+0x22>
 8006edc:	0800727c 	.word	0x0800727c
 8006ee0:	0800729c 	.word	0x0800729c
 8006ee4:	0800725c 	.word	0x0800725c

08006ee8 <fiprintf>:
 8006ee8:	b40e      	push	{r1, r2, r3}
 8006eea:	b503      	push	{r0, r1, lr}
 8006eec:	4601      	mov	r1, r0
 8006eee:	ab03      	add	r3, sp, #12
 8006ef0:	4805      	ldr	r0, [pc, #20]	; (8006f08 <fiprintf+0x20>)
 8006ef2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ef6:	6800      	ldr	r0, [r0, #0]
 8006ef8:	9301      	str	r3, [sp, #4]
 8006efa:	f7ff fcaf 	bl	800685c <_vfiprintf_r>
 8006efe:	b002      	add	sp, #8
 8006f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f04:	b003      	add	sp, #12
 8006f06:	4770      	bx	lr
 8006f08:	2000000c 	.word	0x2000000c

08006f0c <_lseek_r>:
 8006f0c:	b538      	push	{r3, r4, r5, lr}
 8006f0e:	4d07      	ldr	r5, [pc, #28]	; (8006f2c <_lseek_r+0x20>)
 8006f10:	4604      	mov	r4, r0
 8006f12:	4608      	mov	r0, r1
 8006f14:	4611      	mov	r1, r2
 8006f16:	2200      	movs	r2, #0
 8006f18:	602a      	str	r2, [r5, #0]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f7fa fabc 	bl	8001498 <_lseek>
 8006f20:	1c43      	adds	r3, r0, #1
 8006f22:	d102      	bne.n	8006f2a <_lseek_r+0x1e>
 8006f24:	682b      	ldr	r3, [r5, #0]
 8006f26:	b103      	cbz	r3, 8006f2a <_lseek_r+0x1e>
 8006f28:	6023      	str	r3, [r4, #0]
 8006f2a:	bd38      	pop	{r3, r4, r5, pc}
 8006f2c:	20000280 	.word	0x20000280

08006f30 <__swhatbuf_r>:
 8006f30:	b570      	push	{r4, r5, r6, lr}
 8006f32:	460e      	mov	r6, r1
 8006f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f38:	2900      	cmp	r1, #0
 8006f3a:	b096      	sub	sp, #88	; 0x58
 8006f3c:	4614      	mov	r4, r2
 8006f3e:	461d      	mov	r5, r3
 8006f40:	da07      	bge.n	8006f52 <__swhatbuf_r+0x22>
 8006f42:	2300      	movs	r3, #0
 8006f44:	602b      	str	r3, [r5, #0]
 8006f46:	89b3      	ldrh	r3, [r6, #12]
 8006f48:	061a      	lsls	r2, r3, #24
 8006f4a:	d410      	bmi.n	8006f6e <__swhatbuf_r+0x3e>
 8006f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f50:	e00e      	b.n	8006f70 <__swhatbuf_r+0x40>
 8006f52:	466a      	mov	r2, sp
 8006f54:	f000 f894 	bl	8007080 <_fstat_r>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	dbf2      	blt.n	8006f42 <__swhatbuf_r+0x12>
 8006f5c:	9a01      	ldr	r2, [sp, #4]
 8006f5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f66:	425a      	negs	r2, r3
 8006f68:	415a      	adcs	r2, r3
 8006f6a:	602a      	str	r2, [r5, #0]
 8006f6c:	e7ee      	b.n	8006f4c <__swhatbuf_r+0x1c>
 8006f6e:	2340      	movs	r3, #64	; 0x40
 8006f70:	2000      	movs	r0, #0
 8006f72:	6023      	str	r3, [r4, #0]
 8006f74:	b016      	add	sp, #88	; 0x58
 8006f76:	bd70      	pop	{r4, r5, r6, pc}

08006f78 <__smakebuf_r>:
 8006f78:	898b      	ldrh	r3, [r1, #12]
 8006f7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f7c:	079d      	lsls	r5, r3, #30
 8006f7e:	4606      	mov	r6, r0
 8006f80:	460c      	mov	r4, r1
 8006f82:	d507      	bpl.n	8006f94 <__smakebuf_r+0x1c>
 8006f84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	6123      	str	r3, [r4, #16]
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	6163      	str	r3, [r4, #20]
 8006f90:	b002      	add	sp, #8
 8006f92:	bd70      	pop	{r4, r5, r6, pc}
 8006f94:	ab01      	add	r3, sp, #4
 8006f96:	466a      	mov	r2, sp
 8006f98:	f7ff ffca 	bl	8006f30 <__swhatbuf_r>
 8006f9c:	9900      	ldr	r1, [sp, #0]
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	f7ff fbd7 	bl	8006754 <_malloc_r>
 8006fa6:	b948      	cbnz	r0, 8006fbc <__smakebuf_r+0x44>
 8006fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fac:	059a      	lsls	r2, r3, #22
 8006fae:	d4ef      	bmi.n	8006f90 <__smakebuf_r+0x18>
 8006fb0:	f023 0303 	bic.w	r3, r3, #3
 8006fb4:	f043 0302 	orr.w	r3, r3, #2
 8006fb8:	81a3      	strh	r3, [r4, #12]
 8006fba:	e7e3      	b.n	8006f84 <__smakebuf_r+0xc>
 8006fbc:	4b0d      	ldr	r3, [pc, #52]	; (8006ff4 <__smakebuf_r+0x7c>)
 8006fbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	6020      	str	r0, [r4, #0]
 8006fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc8:	81a3      	strh	r3, [r4, #12]
 8006fca:	9b00      	ldr	r3, [sp, #0]
 8006fcc:	6163      	str	r3, [r4, #20]
 8006fce:	9b01      	ldr	r3, [sp, #4]
 8006fd0:	6120      	str	r0, [r4, #16]
 8006fd2:	b15b      	cbz	r3, 8006fec <__smakebuf_r+0x74>
 8006fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fd8:	4630      	mov	r0, r6
 8006fda:	f000 f863 	bl	80070a4 <_isatty_r>
 8006fde:	b128      	cbz	r0, 8006fec <__smakebuf_r+0x74>
 8006fe0:	89a3      	ldrh	r3, [r4, #12]
 8006fe2:	f023 0303 	bic.w	r3, r3, #3
 8006fe6:	f043 0301 	orr.w	r3, r3, #1
 8006fea:	81a3      	strh	r3, [r4, #12]
 8006fec:	89a0      	ldrh	r0, [r4, #12]
 8006fee:	4305      	orrs	r5, r0
 8006ff0:	81a5      	strh	r5, [r4, #12]
 8006ff2:	e7cd      	b.n	8006f90 <__smakebuf_r+0x18>
 8006ff4:	08005db9 	.word	0x08005db9

08006ff8 <__ascii_mbtowc>:
 8006ff8:	b082      	sub	sp, #8
 8006ffa:	b901      	cbnz	r1, 8006ffe <__ascii_mbtowc+0x6>
 8006ffc:	a901      	add	r1, sp, #4
 8006ffe:	b142      	cbz	r2, 8007012 <__ascii_mbtowc+0x1a>
 8007000:	b14b      	cbz	r3, 8007016 <__ascii_mbtowc+0x1e>
 8007002:	7813      	ldrb	r3, [r2, #0]
 8007004:	600b      	str	r3, [r1, #0]
 8007006:	7812      	ldrb	r2, [r2, #0]
 8007008:	1e10      	subs	r0, r2, #0
 800700a:	bf18      	it	ne
 800700c:	2001      	movne	r0, #1
 800700e:	b002      	add	sp, #8
 8007010:	4770      	bx	lr
 8007012:	4610      	mov	r0, r2
 8007014:	e7fb      	b.n	800700e <__ascii_mbtowc+0x16>
 8007016:	f06f 0001 	mvn.w	r0, #1
 800701a:	e7f8      	b.n	800700e <__ascii_mbtowc+0x16>

0800701c <__malloc_lock>:
 800701c:	4801      	ldr	r0, [pc, #4]	; (8007024 <__malloc_lock+0x8>)
 800701e:	f7fe bfa2 	b.w	8005f66 <__retarget_lock_acquire_recursive>
 8007022:	bf00      	nop
 8007024:	20000278 	.word	0x20000278

08007028 <__malloc_unlock>:
 8007028:	4801      	ldr	r0, [pc, #4]	; (8007030 <__malloc_unlock+0x8>)
 800702a:	f7fe bf9d 	b.w	8005f68 <__retarget_lock_release_recursive>
 800702e:	bf00      	nop
 8007030:	20000278 	.word	0x20000278

08007034 <_read_r>:
 8007034:	b538      	push	{r3, r4, r5, lr}
 8007036:	4d07      	ldr	r5, [pc, #28]	; (8007054 <_read_r+0x20>)
 8007038:	4604      	mov	r4, r0
 800703a:	4608      	mov	r0, r1
 800703c:	4611      	mov	r1, r2
 800703e:	2200      	movs	r2, #0
 8007040:	602a      	str	r2, [r5, #0]
 8007042:	461a      	mov	r2, r3
 8007044:	f7fa f9c8 	bl	80013d8 <_read>
 8007048:	1c43      	adds	r3, r0, #1
 800704a:	d102      	bne.n	8007052 <_read_r+0x1e>
 800704c:	682b      	ldr	r3, [r5, #0]
 800704e:	b103      	cbz	r3, 8007052 <_read_r+0x1e>
 8007050:	6023      	str	r3, [r4, #0]
 8007052:	bd38      	pop	{r3, r4, r5, pc}
 8007054:	20000280 	.word	0x20000280

08007058 <__ascii_wctomb>:
 8007058:	b149      	cbz	r1, 800706e <__ascii_wctomb+0x16>
 800705a:	2aff      	cmp	r2, #255	; 0xff
 800705c:	bf85      	ittet	hi
 800705e:	238a      	movhi	r3, #138	; 0x8a
 8007060:	6003      	strhi	r3, [r0, #0]
 8007062:	700a      	strbls	r2, [r1, #0]
 8007064:	f04f 30ff 	movhi.w	r0, #4294967295
 8007068:	bf98      	it	ls
 800706a:	2001      	movls	r0, #1
 800706c:	4770      	bx	lr
 800706e:	4608      	mov	r0, r1
 8007070:	4770      	bx	lr

08007072 <abort>:
 8007072:	b508      	push	{r3, lr}
 8007074:	2006      	movs	r0, #6
 8007076:	f000 f84d 	bl	8007114 <raise>
 800707a:	2001      	movs	r0, #1
 800707c:	f7fa f9a2 	bl	80013c4 <_exit>

08007080 <_fstat_r>:
 8007080:	b538      	push	{r3, r4, r5, lr}
 8007082:	4d07      	ldr	r5, [pc, #28]	; (80070a0 <_fstat_r+0x20>)
 8007084:	2300      	movs	r3, #0
 8007086:	4604      	mov	r4, r0
 8007088:	4608      	mov	r0, r1
 800708a:	4611      	mov	r1, r2
 800708c:	602b      	str	r3, [r5, #0]
 800708e:	f7fa f9e8 	bl	8001462 <_fstat>
 8007092:	1c43      	adds	r3, r0, #1
 8007094:	d102      	bne.n	800709c <_fstat_r+0x1c>
 8007096:	682b      	ldr	r3, [r5, #0]
 8007098:	b103      	cbz	r3, 800709c <_fstat_r+0x1c>
 800709a:	6023      	str	r3, [r4, #0]
 800709c:	bd38      	pop	{r3, r4, r5, pc}
 800709e:	bf00      	nop
 80070a0:	20000280 	.word	0x20000280

080070a4 <_isatty_r>:
 80070a4:	b538      	push	{r3, r4, r5, lr}
 80070a6:	4d06      	ldr	r5, [pc, #24]	; (80070c0 <_isatty_r+0x1c>)
 80070a8:	2300      	movs	r3, #0
 80070aa:	4604      	mov	r4, r0
 80070ac:	4608      	mov	r0, r1
 80070ae:	602b      	str	r3, [r5, #0]
 80070b0:	f7fa f9e7 	bl	8001482 <_isatty>
 80070b4:	1c43      	adds	r3, r0, #1
 80070b6:	d102      	bne.n	80070be <_isatty_r+0x1a>
 80070b8:	682b      	ldr	r3, [r5, #0]
 80070ba:	b103      	cbz	r3, 80070be <_isatty_r+0x1a>
 80070bc:	6023      	str	r3, [r4, #0]
 80070be:	bd38      	pop	{r3, r4, r5, pc}
 80070c0:	20000280 	.word	0x20000280

080070c4 <_raise_r>:
 80070c4:	291f      	cmp	r1, #31
 80070c6:	b538      	push	{r3, r4, r5, lr}
 80070c8:	4604      	mov	r4, r0
 80070ca:	460d      	mov	r5, r1
 80070cc:	d904      	bls.n	80070d8 <_raise_r+0x14>
 80070ce:	2316      	movs	r3, #22
 80070d0:	6003      	str	r3, [r0, #0]
 80070d2:	f04f 30ff 	mov.w	r0, #4294967295
 80070d6:	bd38      	pop	{r3, r4, r5, pc}
 80070d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80070da:	b112      	cbz	r2, 80070e2 <_raise_r+0x1e>
 80070dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070e0:	b94b      	cbnz	r3, 80070f6 <_raise_r+0x32>
 80070e2:	4620      	mov	r0, r4
 80070e4:	f000 f830 	bl	8007148 <_getpid_r>
 80070e8:	462a      	mov	r2, r5
 80070ea:	4601      	mov	r1, r0
 80070ec:	4620      	mov	r0, r4
 80070ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070f2:	f000 b817 	b.w	8007124 <_kill_r>
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d00a      	beq.n	8007110 <_raise_r+0x4c>
 80070fa:	1c59      	adds	r1, r3, #1
 80070fc:	d103      	bne.n	8007106 <_raise_r+0x42>
 80070fe:	2316      	movs	r3, #22
 8007100:	6003      	str	r3, [r0, #0]
 8007102:	2001      	movs	r0, #1
 8007104:	e7e7      	b.n	80070d6 <_raise_r+0x12>
 8007106:	2400      	movs	r4, #0
 8007108:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800710c:	4628      	mov	r0, r5
 800710e:	4798      	blx	r3
 8007110:	2000      	movs	r0, #0
 8007112:	e7e0      	b.n	80070d6 <_raise_r+0x12>

08007114 <raise>:
 8007114:	4b02      	ldr	r3, [pc, #8]	; (8007120 <raise+0xc>)
 8007116:	4601      	mov	r1, r0
 8007118:	6818      	ldr	r0, [r3, #0]
 800711a:	f7ff bfd3 	b.w	80070c4 <_raise_r>
 800711e:	bf00      	nop
 8007120:	2000000c 	.word	0x2000000c

08007124 <_kill_r>:
 8007124:	b538      	push	{r3, r4, r5, lr}
 8007126:	4d07      	ldr	r5, [pc, #28]	; (8007144 <_kill_r+0x20>)
 8007128:	2300      	movs	r3, #0
 800712a:	4604      	mov	r4, r0
 800712c:	4608      	mov	r0, r1
 800712e:	4611      	mov	r1, r2
 8007130:	602b      	str	r3, [r5, #0]
 8007132:	f7fa f937 	bl	80013a4 <_kill>
 8007136:	1c43      	adds	r3, r0, #1
 8007138:	d102      	bne.n	8007140 <_kill_r+0x1c>
 800713a:	682b      	ldr	r3, [r5, #0]
 800713c:	b103      	cbz	r3, 8007140 <_kill_r+0x1c>
 800713e:	6023      	str	r3, [r4, #0]
 8007140:	bd38      	pop	{r3, r4, r5, pc}
 8007142:	bf00      	nop
 8007144:	20000280 	.word	0x20000280

08007148 <_getpid_r>:
 8007148:	f7fa b924 	b.w	8001394 <_getpid>

0800714c <_init>:
 800714c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800714e:	bf00      	nop
 8007150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007152:	bc08      	pop	{r3}
 8007154:	469e      	mov	lr, r3
 8007156:	4770      	bx	lr

08007158 <_fini>:
 8007158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715a:	bf00      	nop
 800715c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800715e:	bc08      	pop	{r3}
 8007160:	469e      	mov	lr, r3
 8007162:	4770      	bx	lr
